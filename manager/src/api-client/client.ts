/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AidDecisionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getsystradeList(ems_No: string, trade_Mode: string, finish_dates: string, finish_datee: string): Promise<any> {
        let url_ = this.baseUrl + "/AidDecision/GetsystradeList?";
        if (ems_No === undefined || ems_No === null)
            throw new Error("The parameter 'ems_No' must be defined and cannot be null.");
        else
            url_ += "Ems_No=" + encodeURIComponent("" + ems_No) + "&"; 
        if (trade_Mode === undefined || trade_Mode === null)
            throw new Error("The parameter 'trade_Mode' must be defined and cannot be null.");
        else
            url_ += "Trade_Mode=" + encodeURIComponent("" + trade_Mode) + "&"; 
        if (finish_dates === undefined || finish_dates === null)
            throw new Error("The parameter 'finish_dates' must be defined and cannot be null.");
        else
            url_ += "finish_dates=" + encodeURIComponent("" + finish_dates) + "&"; 
        if (finish_datee === undefined || finish_datee === null)
            throw new Error("The parameter 'finish_datee' must be defined and cannot be null.");
        else
            url_ += "finish_datee=" + encodeURIComponent("" + finish_datee) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetsystradeList(_response);
        });
    }

    protected processGetsystradeList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getsystradeListe(ems_No: string, trade_Mode: string, finish_dates: string, finish_datee: string): Promise<any> {
        let url_ = this.baseUrl + "/AidDecision/GetsystradeListe?";
        if (ems_No === undefined || ems_No === null)
            throw new Error("The parameter 'ems_No' must be defined and cannot be null.");
        else
            url_ += "Ems_No=" + encodeURIComponent("" + ems_No) + "&"; 
        if (trade_Mode === undefined || trade_Mode === null)
            throw new Error("The parameter 'trade_Mode' must be defined and cannot be null.");
        else
            url_ += "Trade_Mode=" + encodeURIComponent("" + trade_Mode) + "&"; 
        if (finish_dates === undefined || finish_dates === null)
            throw new Error("The parameter 'finish_dates' must be defined and cannot be null.");
        else
            url_ += "finish_dates=" + encodeURIComponent("" + finish_dates) + "&"; 
        if (finish_datee === undefined || finish_datee === null)
            throw new Error("The parameter 'finish_datee' must be defined and cannot be null.");
        else
            url_ += "finish_datee=" + encodeURIComponent("" + finish_datee) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetsystradeListe(_response);
        });
    }

    protected processGetsystradeListe(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getBusinessFeeListe(supplierName: string, createDates: string, createDatee: string): Promise<any> {
        let url_ = this.baseUrl + "/AidDecision/GetBusinessFeeListe?";
        if (supplierName === undefined || supplierName === null)
            throw new Error("The parameter 'supplierName' must be defined and cannot be null.");
        else
            url_ += "SupplierName=" + encodeURIComponent("" + supplierName) + "&"; 
        if (createDates === undefined || createDates === null)
            throw new Error("The parameter 'createDates' must be defined and cannot be null.");
        else
            url_ += "CreateDates=" + encodeURIComponent("" + createDates) + "&"; 
        if (createDatee === undefined || createDatee === null)
            throw new Error("The parameter 'createDatee' must be defined and cannot be null.");
        else
            url_ += "CreateDatee=" + encodeURIComponent("" + createDatee) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBusinessFeeListe(_response);
        });
    }

    protected processGetBusinessFeeListe(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取预警数据
     * @return OK
     */
    allWarn(): Promise<any> {
        let url_ = this.baseUrl + "/AidDecision/AllWarn";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAllWarn(_response);
        });
    }

    protected processAllWarn(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/AidDecision/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class AppArchiveAttachmentClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询附件
     * @param value 条件
     * @return OK
     */
    queryAppAsnAttachment(value: EntAppArchiveAttachment): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/QueryAppAsnAttachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAppAsnAttachment(_response);
        });
    }

    protected processQueryAppAsnAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询附件对应的文件
     * @return OK
     */
    queryAppSysAttachment(sourceID: number): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/QueryAppSysAttachment?";
        if (sourceID === undefined || sourceID === null)
            throw new Error("The parameter 'sourceID' must be defined and cannot be null.");
        else
            url_ += "sourceID=" + encodeURIComponent("" + sourceID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAppSysAttachment(_response);
        });
    }

    protected processQueryAppSysAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据业务单号获取附件信息
     * @return OK
     */
    queryAppSysAttachmentByBillNo(billNo: string): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/QueryAppSysAttachmentByBillNo?";
        if (billNo === undefined || billNo === null)
            throw new Error("The parameter 'billNo' must be defined and cannot be null.");
        else
            url_ += "billNo=" + encodeURIComponent("" + billNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAppSysAttachmentByBillNo(_response);
        });
    }

    protected processQueryAppSysAttachmentByBillNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存附件信息
     * @return OK
     */
    saveAppArchiveAttachment(value: EntAppArchiveAttachment): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/SaveAppArchiveAttachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveAppArchiveAttachment(_response);
        });
    }

    protected processSaveAppArchiveAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除附件信息
     * @param id 附件ID
     * @return OK
     */
    deleteAppArchiveAttachment(id: number): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/DeleteAppArchiveAttachment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAppArchiveAttachment(_response);
        });
    }

    protected processDeleteAppArchiveAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除附件信息
     * @param id 附件ID
     * @return OK
     */
    deleteAppSysAttachment(id: number): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/DeleteAppSysAttachment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAppSysAttachment(_response);
        });
    }

    protected processDeleteAppSysAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取附件信息
     * @param id 附件代码
     * @return OK
     */
    getAppArchiveAttachmentById(id: number): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/GetAppArchiveAttachmentById/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppArchiveAttachmentById(_response);
        });
    }

    protected processGetAppArchiveAttachmentById(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据业务单号获取归档信息
     * @return OK
     */
    getAppArchiveAttachmentByBusNo(busNo: string): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/GetAppArchiveAttachmentByBusNo?";
        if (busNo === undefined || busNo === null)
            throw new Error("The parameter 'busNo' must be defined and cannot be null.");
        else
            url_ += "busNo=" + encodeURIComponent("" + busNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppArchiveAttachmentByBusNo(_response);
        });
    }

    protected processGetAppArchiveAttachmentByBusNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存附件信息
     * @param attachments 附件列表
     * @return OK
     */
    saveAppSysAttachment(attachments: EntAppSysAttachment[]): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/SaveAppSysAttachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(attachments);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveAppSysAttachment(_response);
        });
    }

    protected processSaveAppSysAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 同步报关文件信息
     * @return OK
     */
    syncEntryFile(loginName: string): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/SyncEntryFile?";
        if (loginName === undefined || loginName === null)
            throw new Error("The parameter 'loginName' must be defined and cannot be null.");
        else
            url_ += "loginName=" + encodeURIComponent("" + loginName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSyncEntryFile(_response);
        });
    }

    protected processSyncEntryFile(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 归档
     * @return OK
     */
    archive(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/Archive?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processArchive(_response);
        });
    }

    protected processArchive(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/AppArchiveAttachment/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class AppEffectiveClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getPageList(model: EntAppEffectiveDate): Promise<any> {
        let url_ = this.baseUrl + "/AppEffective/GetPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageList(_response);
        });
    }

    protected processGetPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    update(model: EntAppEffectiveDate): Promise<any> {
        let url_ = this.baseUrl + "/AppEffective/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/AppEffective/Delete?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/AppEffective/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(list: EntAppEffectiveDate[]): Promise<any> {
        let url_ = this.baseUrl + "/AppEffective/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/AppEffective/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class AseshSyncClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    importErpBom(boom: EntInnerAseshJmyErpBom[]): Promise<any> {
        let url_ = this.baseUrl + "/Asesh/ImportErpBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(boom);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportErpBom(_response);
        });
    }

    protected processImportErpBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    importWaferQty(waferQties: EntInnerAseshJmyWaferQty[]): Promise<any> {
        let url_ = this.baseUrl + "/Asesh/ImportWaferQty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(waferQties);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportWaferQty(_response);
        });
    }

    protected processImportWaferQty(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    importWrokBom(workBoms: EntInnerAseshJmyWorkBom[]): Promise<any> {
        let url_ = this.baseUrl + "/Asesh/ImportWorkBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workBoms);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportWrokBom(_response);
        });
    }

    protected processImportWrokBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    importWrokBom2(exportInfos: EntInnerAseshJmyExportInfo[]): Promise<any> {
        let url_ = this.baseUrl + "/Asesh/ImportExportInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(exportInfos);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportWrokBom2(_response);
        });
    }

    protected processImportWrokBom2(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    importImportInfo(importInfos: EntInnerAseshJmyImportInfo[]): Promise<any> {
        let url_ = this.baseUrl + "/Asesh/ImportImportInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(importInfos);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportImportInfo(_response);
        });
    }

    protected processImportImportInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    insertLog(logModel: EntInnerAseshJmyLog): Promise<any> {
        let url_ = this.baseUrl + "/Asesh/InsertLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(logModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertLog(_response);
        });
    }

    protected processInsertLog(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/AseshSync/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class AsnAttachmentClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询附件
     * @param value 条件
     * @return OK
     */
    queryAppAsnAttachment(value: EntAppAsnAttachment): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/QueryAppAsnAttachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAppAsnAttachment(_response);
        });
    }

    protected processQueryAppAsnAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询附件对应的文件
     * @return OK
     */
    queryAppSysAttachment(sourceID: number, businessId: string): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/QueryAppSysAttachment?";
        if (sourceID === undefined || sourceID === null)
            throw new Error("The parameter 'sourceID' must be defined and cannot be null.");
        else
            url_ += "sourceID=" + encodeURIComponent("" + sourceID) + "&"; 
        if (businessId === undefined || businessId === null)
            throw new Error("The parameter 'businessId' must be defined and cannot be null.");
        else
            url_ += "businessId=" + encodeURIComponent("" + businessId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAppSysAttachment(_response);
        });
    }

    protected processQueryAppSysAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存附件信息
     * @return OK
     */
    saveAppAsnAttachment(value: EntAppAsnAttachment): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/SaveAppAsnAttachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveAppAsnAttachment(_response);
        });
    }

    protected processSaveAppAsnAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存附件信息
     * @return OK
     */
    saveAppSysAttachment(value: EntAppSysAttachment): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/SaveAppSysAttachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveAppSysAttachment(_response);
        });
    }

    protected processSaveAppSysAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除附件信息
     * @param ids 附件ID
     * @return OK
     */
    deleteAppAsnAttachment(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/DeleteAppAsnAttachment?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAppAsnAttachment(_response);
        });
    }

    protected processDeleteAppAsnAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除附件信息
     * @param ids 附件ID
     * @return OK
     */
    deleteAppSysAttachment(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/DeleteAppSysAttachment?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAppSysAttachment(_response);
        });
    }

    protected processDeleteAppSysAttachment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取附件信息
     * @return OK
     */
    getAppAsnAttachmentByLocationID(locationID: string): Promise<any> {
        let url_ = this.baseUrl + "/AsnAttachment/GetAppAsnAttachmentByLocationID?";
        if (locationID === undefined || locationID === null)
            throw new Error("The parameter 'locationID' must be defined and cannot be null.");
        else
            url_ += "locationID=" + encodeURIComponent("" + locationID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppAsnAttachmentByLocationID(_response);
        });
    }

    protected processGetAppAsnAttachmentByLocationID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/AsnAttachment/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasContractClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getPageList(model: EntBasContract): Promise<any> {
        let url_ = this.baseUrl + "/BasContract/GetPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageList(_response);
        });
    }

    protected processGetPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntBasContract): Promise<any> {
        let url_ = this.baseUrl + "/BasContract/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(id: number): Promise<any> {
        let url_ = this.baseUrl + "/BasContract/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/BasContract/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasContract/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasContractFileClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getContractFilesByContractId(contractId: string): Promise<any> {
        let url_ = this.baseUrl + "/BasContractFile/GetContractFilesByContractId?";
        if (contractId === undefined || contractId === null)
            throw new Error("The parameter 'contractId' must be defined and cannot be null.");
        else
            url_ += "ContractId=" + encodeURIComponent("" + contractId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetContractFilesByContractId(_response);
        });
    }

    protected processGetContractFilesByContractId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntBasContractFile): Promise<any> {
        let url_ = this.baseUrl + "/BasContractFile/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BasContractFile/Delete?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "Ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasContractFile/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasCustomerDefaultconfigClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * GET: api/BasCustomerDefaultconfig/5
     * @return OK
     */
    get(id: number): Promise<ReturnResultOfEntBasCustomerDefaultconfig> {
        let url_ = this.baseUrl + "/bas/defaultconfig/get?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ReturnResultOfEntBasCustomerDefaultconfig> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntBasCustomerDefaultconfig.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntBasCustomerDefaultconfig>(<any>null);
    }

    /**
     * @return OK
     */
    post(value: SearchRequest): Promise<ReturnResultOfPageListOfEntBasCustomerDefaultconfig> {
        let url_ = this.baseUrl + "/bas/defaultconfig/page";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ReturnResultOfPageListOfEntBasCustomerDefaultconfig> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntBasCustomerDefaultconfig.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntBasCustomerDefaultconfig>(<any>null);
    }

    /**
     * @return OK
     */
    add(value: EntBasCustomerDefaultconfig): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bas/defaultconfig/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    delete(id: number): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bas/defaultconfig/del?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    updateDefaultValue(value: { [key: string]: string; }): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bas/defaultconfig/updaedefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateDefaultValue(_response);
        });
    }

    protected processUpdateDefaultValue(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasCustomerDefaultconfig/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BaseApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BaseApi/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BaseDataYunClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取所有数据
     * @return OK
     */
    queryAllComplex(): Promise<any> {
        let url_ = this.baseUrl + "/yun/complex";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAllComplex(_response);
        });
    }

    protected processQueryAllComplex(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取所有数据
     * @return OK
     */
    queryAllCiq(): Promise<any> {
        let url_ = this.baseUrl + "/yun/ciq";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAllCiq(_response);
        });
    }

    protected processQueryAllCiq(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取所有数据
     * @return OK
     */
    queryAllCustoms(): Promise<any> {
        let url_ = this.baseUrl + "/yun/customs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAllCustoms(_response);
        });
    }

    protected processQueryAllCustoms(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取所有数据
     * @return OK
     */
    queryAppVersion(): Promise<any> {
        let url_ = this.baseUrl + "/yun/appversion";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryAppVersion(_response);
        });
    }

    protected processQueryAppVersion(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    insertDBVersion(dbVersion: EntDbVersion): Promise<any> {
        let url_ = this.baseUrl + "/BaseDataYun/InsertDBVersion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dbVersion);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertDBVersion(_response);
        });
    }

    protected processInsertDBVersion(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class BaseRateClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取用户查询列表分页数据
     * @param model 查询参数
     * @return OK
     */
    baseRateList(model: EntBasRate): Promise<any> {
        let url_ = this.baseUrl + "/BaseRate/BaseRateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBaseRateList(_response);
        });
    }

    protected processBaseRateList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除客户
     * @param i 客户代码
     * @return OK
     */
    deletBaseRate(i: string): Promise<any> {
        let url_ = this.baseUrl + "/BaseRate/DeletBaseRate?";
        if (i === undefined || i === null)
            throw new Error("The parameter 'i' must be defined and cannot be null.");
        else
            url_ += "i=" + encodeURIComponent("" + i) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletBaseRate(_response);
        });
    }

    protected processDeletBaseRate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增、修改用户基本信息
     * @param model 用户对象
     * @return OK
     */
    saveBaseRate(model: EntBasRate): Promise<any> {
        let url_ = this.baseUrl + "/BaseRate/SaveBaseRate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveBaseRate(_response);
        });
    }

    protected processSaveBaseRate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: RequestModelOfDataTable): Promise<any> {
        let url_ = this.baseUrl + "/BaseRate/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BaseRate/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasGoodsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 根据id查询商品
     * @return OK
     */
    getById(id: string): Promise<ReturnResultOfEntBasGoods> {
        let url_ = this.baseUrl + "/basgoods/GetById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ReturnResultOfEntBasGoods> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntBasGoods.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntBasGoods>(<any>null);
    }

    /**
     * 查询商品
     * @return OK
     */
    query(request: SearchRequest): Promise<ReturnResultOfPageListOfEntBasGoods> {
        let url_ = this.baseUrl + "/basgoods/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntBasGoods> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntBasGoods.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntBasGoods>(<any>null);
    }

    /**
     * 查询商品
     * @return OK
     */
    queryFirst(copgno: string): Promise<ReturnResultOfEntBasGoods> {
        let url_ = this.baseUrl + "/basgoods/queryfirst/{copgno}";
        if (copgno === undefined || copgno === null)
            throw new Error("The parameter 'copgno' must be defined.");
        url_ = url_.replace("{copgno}", encodeURIComponent("" + copgno)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryFirst(_response);
        });
    }

    protected processQueryFirst(response: Response): Promise<ReturnResultOfEntBasGoods> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntBasGoods.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntBasGoods>(<any>null);
    }

    /**
     * 导出商品
     * @return OK
     */
    export(request: SearchRequest): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/basgoods/export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExport(_response);
        });
    }

    protected processExport(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 新增商品
     * @return OK
     */
    insert(model: EntBasGoods): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/basgoods/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增商品
     * @return OK
     */
    insert2(models: EntBasGoods[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/basgoods/batchinsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert2(_response);
        });
    }

    protected processInsert2(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 修改商品
     * @return OK
     */
    update(model: EntBasGoods): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/basgoods/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改商品list
     * @return OK
     */
    updateList(models: EntBasGoods[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/basgoods/updatelist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateList(_response);
        });
    }

    protected processUpdateList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除商品
     * @return OK
     */
    delete(models: EntBasGoods[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/basgoods/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 同步商品库
     * @return OK
     */
    sychornize(customerno: string, emsno: string, createnuser: string): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/basgoods/sychornize/{customerno}/{emsno}/{Createnuser}";
        if (customerno === undefined || customerno === null)
            throw new Error("The parameter 'customerno' must be defined.");
        url_ = url_.replace("{customerno}", encodeURIComponent("" + customerno)); 
        if (emsno === undefined || emsno === null)
            throw new Error("The parameter 'emsno' must be defined.");
        url_ = url_.replace("{emsno}", encodeURIComponent("" + emsno)); 
        if (createnuser === undefined || createnuser === null)
            throw new Error("The parameter 'createnuser' must be defined.");
        url_ = url_.replace("{Createnuser}", encodeURIComponent("" + createnuser)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSychornize(_response);
        });
    }

    protected processSychornize(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 根据id查询商品
     * @return OK
     */
    hsCodeNewOld(hscode: string): Promise<any> {
        let url_ = this.baseUrl + "/BasGoods/HsCodeNewOld?";
        if (hscode === undefined || hscode === null)
            throw new Error("The parameter 'hscode' must be defined and cannot be null.");
        else
            url_ += "hscode=" + encodeURIComponent("" + hscode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHsCodeNewOld(_response);
        });
    }

    protected processHsCodeNewOld(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询商品
     * @return OK
     */
    getList(model: EntBasGoods): Promise<ReturnResultOfPageListOfEntBasGoods> {
        let url_ = this.baseUrl + "/BasGoods/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<ReturnResultOfPageListOfEntBasGoods> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntBasGoods.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntBasGoods>(<any>null);
    }

    /**
     * 导出商品
     * @return OK
     */
    exportDT(model: EntBasGoods): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/BasGoods/exportDT";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExportDT(_response);
        });
    }

    protected processExportDT(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 查询比对结果分页数据
     * @return OK
     */
    getResult(model: EntBasGoodsCc): Promise<any> {
        let url_ = this.baseUrl + "/BasGoods/GetResult";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetResult(_response);
        });
    }

    protected processGetResult(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 税则库更新信息比对
     * @param org 企业代码
     * @param user 操作用户
     * @return OK
     */
    compareHsInfo(org: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/BasGoods/CompareHsInfo?";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompareHsInfo(_response);
        });
    }

    protected processCompareHsInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: RequestModelOfDataTable): Promise<any> {
        let url_ = this.baseUrl + "/BasGoods/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasGoods/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasGoodsErpRelationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 根据id查询商品
     * @return OK
     */
    getById(id: string): Promise<ReturnResultOfEntBasGoodsErpRelation> {
        let url_ = this.baseUrl + "/basgoodserp/GetById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ReturnResultOfEntBasGoodsErpRelation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntBasGoodsErpRelation.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntBasGoodsErpRelation>(<any>null);
    }

    /**
     * 根据Erp物料关系数据
     * @return OK
     */
    getErpRelations(): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/basgoodserp/GetErpRelations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetErpRelations(_response);
        });
    }

    protected processGetErpRelations(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    insertMany(list: EntBasGoodsErpRelation[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/basgoodserp/insertmany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertMany(_response);
        });
    }

    protected processInsertMany(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    query(condition: EntBasGoodsErpRelation): Promise<ReturnResultOfPageListOfEntBasGoodsErpRelation> {
        let url_ = this.baseUrl + "/basgoodserp/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntBasGoodsErpRelation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntBasGoodsErpRelation.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntBasGoodsErpRelation>(<any>null);
    }

    /**
     * @return OK
     */
    delete(condition: EntBasGoodsErpRelation): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/basgoodserp/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    deleteAll(ids: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/basgoodserp/deleteall";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAll(_response);
        });
    }

    protected processDeleteAll(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    update(model: EntBasGoodsErpRelation): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/basgoodserp/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取同步数据
     * @return OK
     */
    getSyncBaseGoods(): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/basgoodserp/GetSyncBaseGoods";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSyncBaseGoods(_response);
        });
    }

    protected processGetSyncBaseGoods(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasGoodsErpRelation/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasicFactorClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @param model_iD (optional) 
     * @param model_sku (optional) 
     * @param model_sapUnit (optional) 
     * @param model_wmsUnit (optional) 
     * @param model_factor (optional) 
     * @param model_warehouseID (optional) 
     * @param model_factoryID (optional) 
     * @param model_createUser (optional) 
     * @param model_createDate (optional) 
     * @param model_updateUser (optional) 
     * @param model_updateDate (optional) 
     * @param model_pageSize (optional) 
     * @param model_pageIndex (optional) 
     * @param model_totalCount (optional) 
     * @return OK
     */
    getPageBasicFactor(model_iD: number | null | undefined, model_sku: string | null | undefined, model_sapUnit: string | null | undefined, model_wmsUnit: string | null | undefined, model_factor: number | null | undefined, model_warehouseID: string | null | undefined, model_factoryID: string | null | undefined, model_createUser: string | null | undefined, model_createDate: Date | null | undefined, model_updateUser: string | null | undefined, model_updateDate: Date | null | undefined, model_pageSize: number | null | undefined, model_pageIndex: number | null | undefined, model_totalCount: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/BasicFactor/GetPageBasicFactor/{ID}?";
        if (model_iD !== undefined)
            url_ += "model.iD=" + encodeURIComponent("" + model_iD) + "&"; 
        if (model_sku !== undefined)
            url_ += "model.sku=" + encodeURIComponent("" + model_sku) + "&"; 
        if (model_sapUnit !== undefined)
            url_ += "model.sapUnit=" + encodeURIComponent("" + model_sapUnit) + "&"; 
        if (model_wmsUnit !== undefined)
            url_ += "model.wmsUnit=" + encodeURIComponent("" + model_wmsUnit) + "&"; 
        if (model_factor !== undefined)
            url_ += "model.factor=" + encodeURIComponent("" + model_factor) + "&"; 
        if (model_warehouseID !== undefined)
            url_ += "model.warehouseID=" + encodeURIComponent("" + model_warehouseID) + "&"; 
        if (model_factoryID !== undefined)
            url_ += "model.factoryID=" + encodeURIComponent("" + model_factoryID) + "&"; 
        if (model_createUser !== undefined)
            url_ += "model.createUser=" + encodeURIComponent("" + model_createUser) + "&"; 
        if (model_createDate !== undefined)
            url_ += "model.createDate=" + encodeURIComponent(model_createDate ? "" + model_createDate.toJSON() : "") + "&"; 
        if (model_updateUser !== undefined)
            url_ += "model.updateUser=" + encodeURIComponent("" + model_updateUser) + "&"; 
        if (model_updateDate !== undefined)
            url_ += "model.updateDate=" + encodeURIComponent(model_updateDate ? "" + model_updateDate.toJSON() : "") + "&"; 
        if (model_pageSize !== undefined)
            url_ += "model.pageSize=" + encodeURIComponent("" + model_pageSize) + "&"; 
        if (model_pageIndex !== undefined)
            url_ += "model.pageIndex=" + encodeURIComponent("" + model_pageIndex) + "&"; 
        if (model_totalCount !== undefined)
            url_ += "model.totalCount=" + encodeURIComponent("" + model_totalCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageBasicFactor(_response);
        });
    }

    protected processGetPageBasicFactor(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntAppBasicFactor): Promise<any> {
        let url_ = this.baseUrl + "/BasicFactor/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(ids: string[]): Promise<any> {
        let url_ = this.baseUrl + "/BasicFactor/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: RequestModelOfDataTable): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/BasicFactor/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasicFactor/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BasSkuClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询SKU
     * @return OK
     */
    query(condition: EntBasSku): Promise<ReturnResultOfPageListOfEntBasSku> {
        let url_ = this.baseUrl + "/bassku/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntBasSku> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntBasSku.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntBasSku>(<any>null);
    }

    /**
     * 导出SKU
     * @return OK
     */
    export(request: SearchRequest): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/bassku/export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExport(_response);
        });
    }

    protected processExport(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 新增SKU
     * @return OK
     */
    insert(model: EntBasSku): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bassku/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增SKU
     * @return OK
     */
    batchInsert(models: EntBasSku[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bassku/batchinsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchInsert(_response);
        });
    }

    protected processBatchInsert(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 修改SKU
     * @return OK
     */
    update(model: EntBasSku): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bassku/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除SKU
     * @return OK
     */
    delete(models: EntBasSku[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/bassku/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询SKU图片
     * @return OK
     */
    querySkuAttachment(condition: EntBasSkuAttachment): Promise<ReturnResultOfPageListOfEntBasSkuAttachment> {
        let url_ = this.baseUrl + "/bassku/queryskuattachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerySkuAttachment(_response);
        });
    }

    protected processQuerySkuAttachment(response: Response): Promise<ReturnResultOfPageListOfEntBasSkuAttachment> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntBasSkuAttachment.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntBasSkuAttachment>(<any>null);
    }

    /**
     * 插入SKU图片
     * @return OK
     */
    insertSkuAttachment(model: EntBasSkuAttachment): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bassku/insertskuattachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertSkuAttachment(_response);
        });
    }

    protected processInsertSkuAttachment(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除SKU图片
     * @return OK
     */
    deleteSkuAttachment(id: number): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bassku/deleteskuattachment?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSkuAttachment(_response);
        });
    }

    protected processDeleteSkuAttachment(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改图片描述
     * @return OK
     */
    updateSkuAttachment(model: EntBasSkuAttachment): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bassku/updasteskuattachment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSkuAttachment(_response);
        });
    }

    protected processUpdateSkuAttachment(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 查询料号
     * @param goods_createTime_Begin (optional) 
     * @param goods_createTime_End (optional) 
     * @param goods_id (optional) 
     * @param goods_copEmsId (optional) 
     * @param goods_customerCode (optional) 
     * @param goods_copGNo (optional) 
     * @param goods_gNo (optional) 
     * @param goods_materialFlag (optional) 
     * @param goods_gName (optional) 
     * @param goods_gNameEn (optional) 
     * @param goods_unit (optional) 
     * @param goods_decPrice (optional) 
     * @param goods_currency (optional) 
     * @param goods_allowMaxQty (optional) 
     * @param goods_goodsFlag (optional) 
     * @param goods_bondFlag (optional) 
     * @param goods_suggestionNum (optional) 
     * @param goods_hscode (optional) 
     * @param goods_hscodeBig (optional) 
     * @param goods_suggestionCompany (optional) 
     * @param goods_erpUnit (optional) 
     * @param goods_unit1 (optional) 
     * @param goods_unit2 (optional) 
     * @param goods_factor1 (optional) 
     * @param goods_factor2 (optional) 
     * @param goods_factor (optional) 
     * @param goods_declareModel (optional) 
     * @param goods_gModel (optional) 
     * @param goods_goodsDescription (optional) 
     * @param goods_createUser (optional) 
     * @param goods_createTime (optional) 
     * @param goods_unitCn (optional) 
     * @param goods_currCn (optional) 
     * @param goods_importFile (optional) 
     * @param goods_hscodeUpdateStatus (optional) 
     * @param goods_updateTime (optional) 
     * @param goods_updateUser (optional) 
     * @param goods_recordFlag (optional) 
     * @param goods_modifyMark (optional) 
     * @param goods_remark (optional) 
     * @param goods_lotatt01 (optional) 
     * @param goods_lotatt02 (optional) 
     * @param goods_lotatt03 (optional) 
     * @param goods_lotatt04 (optional) 
     * @param goods_lotatt05 (optional) 
     * @param goods_country (optional) 
     * @param goods_netWt (optional) 
     * @param goods_serialNo (optional) 
     * @param goods_pageSize (optional) 
     * @param goods_pageIndex (optional) 
     * @param goods_totalCount (optional) 
     * @return OK
     */
    getRecordSkuOrNot(goods_createTime_Begin: Date | null | undefined, goods_createTime_End: Date | null | undefined, goods_id: number | null | undefined, goods_copEmsId: string | null | undefined, goods_customerCode: string | null | undefined, goods_copGNo: string | null | undefined, goods_gNo: number | null | undefined, goods_materialFlag: string | null | undefined, goods_gName: string | null | undefined, goods_gNameEn: string | null | undefined, goods_unit: string | null | undefined, goods_decPrice: number | null | undefined, goods_currency: string | null | undefined, goods_allowMaxQty: number | null | undefined, goods_goodsFlag: string | null | undefined, goods_bondFlag: string | null | undefined, goods_suggestionNum: string | null | undefined, goods_hscode: string | null | undefined, goods_hscodeBig: string | null | undefined, goods_suggestionCompany: string | null | undefined, goods_erpUnit: string | null | undefined, goods_unit1: string | null | undefined, goods_unit2: string | null | undefined, goods_factor1: number | null | undefined, goods_factor2: number | null | undefined, goods_factor: number | null | undefined, goods_declareModel: string | null | undefined, goods_gModel: string | null | undefined, goods_goodsDescription: string | null | undefined, goods_createUser: string | null | undefined, goods_createTime: Date | null | undefined, goods_unitCn: string | null | undefined, goods_currCn: string | null | undefined, goods_importFile: string | null | undefined, goods_hscodeUpdateStatus: string | null | undefined, goods_updateTime: Date | null | undefined, goods_updateUser: string | null | undefined, goods_recordFlag: string | null | undefined, goods_modifyMark: string | null | undefined, goods_remark: string | null | undefined, goods_lotatt01: string | null | undefined, goods_lotatt02: string | null | undefined, goods_lotatt03: string | null | undefined, goods_lotatt04: string | null | undefined, goods_lotatt05: string | null | undefined, goods_country: string | null | undefined, goods_netWt: number | null | undefined, goods_serialNo: number | null | undefined, goods_pageSize: number | null | undefined, goods_pageIndex: number | null | undefined, goods_totalCount: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/BasSku/GetRecordSkuOrNot?";
        if (goods_createTime_Begin !== undefined)
            url_ += "goods.createTime_Begin=" + encodeURIComponent(goods_createTime_Begin ? "" + goods_createTime_Begin.toJSON() : "") + "&"; 
        if (goods_createTime_End !== undefined)
            url_ += "goods.createTime_End=" + encodeURIComponent(goods_createTime_End ? "" + goods_createTime_End.toJSON() : "") + "&"; 
        if (goods_id !== undefined)
            url_ += "goods.id=" + encodeURIComponent("" + goods_id) + "&"; 
        if (goods_copEmsId !== undefined)
            url_ += "goods.copEmsId=" + encodeURIComponent("" + goods_copEmsId) + "&"; 
        if (goods_customerCode !== undefined)
            url_ += "goods.customerCode=" + encodeURIComponent("" + goods_customerCode) + "&"; 
        if (goods_copGNo !== undefined)
            url_ += "goods.copGNo=" + encodeURIComponent("" + goods_copGNo) + "&"; 
        if (goods_gNo !== undefined)
            url_ += "goods.gNo=" + encodeURIComponent("" + goods_gNo) + "&"; 
        if (goods_materialFlag !== undefined)
            url_ += "goods.materialFlag=" + encodeURIComponent("" + goods_materialFlag) + "&"; 
        if (goods_gName !== undefined)
            url_ += "goods.gName=" + encodeURIComponent("" + goods_gName) + "&"; 
        if (goods_gNameEn !== undefined)
            url_ += "goods.gNameEn=" + encodeURIComponent("" + goods_gNameEn) + "&"; 
        if (goods_unit !== undefined)
            url_ += "goods.unit=" + encodeURIComponent("" + goods_unit) + "&"; 
        if (goods_decPrice !== undefined)
            url_ += "goods.decPrice=" + encodeURIComponent("" + goods_decPrice) + "&"; 
        if (goods_currency !== undefined)
            url_ += "goods.currency=" + encodeURIComponent("" + goods_currency) + "&"; 
        if (goods_allowMaxQty !== undefined)
            url_ += "goods.allowMaxQty=" + encodeURIComponent("" + goods_allowMaxQty) + "&"; 
        if (goods_goodsFlag !== undefined)
            url_ += "goods.goodsFlag=" + encodeURIComponent("" + goods_goodsFlag) + "&"; 
        if (goods_bondFlag !== undefined)
            url_ += "goods.bondFlag=" + encodeURIComponent("" + goods_bondFlag) + "&"; 
        if (goods_suggestionNum !== undefined)
            url_ += "goods.suggestionNum=" + encodeURIComponent("" + goods_suggestionNum) + "&"; 
        if (goods_hscode !== undefined)
            url_ += "goods.hscode=" + encodeURIComponent("" + goods_hscode) + "&"; 
        if (goods_hscodeBig !== undefined)
            url_ += "goods.hscodeBig=" + encodeURIComponent("" + goods_hscodeBig) + "&"; 
        if (goods_suggestionCompany !== undefined)
            url_ += "goods.suggestionCompany=" + encodeURIComponent("" + goods_suggestionCompany) + "&"; 
        if (goods_erpUnit !== undefined)
            url_ += "goods.erpUnit=" + encodeURIComponent("" + goods_erpUnit) + "&"; 
        if (goods_unit1 !== undefined)
            url_ += "goods.unit1=" + encodeURIComponent("" + goods_unit1) + "&"; 
        if (goods_unit2 !== undefined)
            url_ += "goods.unit2=" + encodeURIComponent("" + goods_unit2) + "&"; 
        if (goods_factor1 !== undefined)
            url_ += "goods.factor1=" + encodeURIComponent("" + goods_factor1) + "&"; 
        if (goods_factor2 !== undefined)
            url_ += "goods.factor2=" + encodeURIComponent("" + goods_factor2) + "&"; 
        if (goods_factor !== undefined)
            url_ += "goods.factor=" + encodeURIComponent("" + goods_factor) + "&"; 
        if (goods_declareModel !== undefined)
            url_ += "goods.declareModel=" + encodeURIComponent("" + goods_declareModel) + "&"; 
        if (goods_gModel !== undefined)
            url_ += "goods.gModel=" + encodeURIComponent("" + goods_gModel) + "&"; 
        if (goods_goodsDescription !== undefined)
            url_ += "goods.goodsDescription=" + encodeURIComponent("" + goods_goodsDescription) + "&"; 
        if (goods_createUser !== undefined)
            url_ += "goods.createUser=" + encodeURIComponent("" + goods_createUser) + "&"; 
        if (goods_createTime !== undefined)
            url_ += "goods.createTime=" + encodeURIComponent(goods_createTime ? "" + goods_createTime.toJSON() : "") + "&"; 
        if (goods_unitCn !== undefined)
            url_ += "goods.unitCn=" + encodeURIComponent("" + goods_unitCn) + "&"; 
        if (goods_currCn !== undefined)
            url_ += "goods.currCn=" + encodeURIComponent("" + goods_currCn) + "&"; 
        if (goods_importFile !== undefined)
            url_ += "goods.importFile=" + encodeURIComponent("" + goods_importFile) + "&"; 
        if (goods_hscodeUpdateStatus !== undefined)
            url_ += "goods.hscodeUpdateStatus=" + encodeURIComponent("" + goods_hscodeUpdateStatus) + "&"; 
        if (goods_updateTime !== undefined)
            url_ += "goods.updateTime=" + encodeURIComponent(goods_updateTime ? "" + goods_updateTime.toJSON() : "") + "&"; 
        if (goods_updateUser !== undefined)
            url_ += "goods.updateUser=" + encodeURIComponent("" + goods_updateUser) + "&"; 
        if (goods_recordFlag !== undefined)
            url_ += "goods.recordFlag=" + encodeURIComponent("" + goods_recordFlag) + "&"; 
        if (goods_modifyMark !== undefined)
            url_ += "goods.modifyMark=" + encodeURIComponent("" + goods_modifyMark) + "&"; 
        if (goods_remark !== undefined)
            url_ += "goods.remark=" + encodeURIComponent("" + goods_remark) + "&"; 
        if (goods_lotatt01 !== undefined)
            url_ += "goods.lotatt01=" + encodeURIComponent("" + goods_lotatt01) + "&"; 
        if (goods_lotatt02 !== undefined)
            url_ += "goods.lotatt02=" + encodeURIComponent("" + goods_lotatt02) + "&"; 
        if (goods_lotatt03 !== undefined)
            url_ += "goods.lotatt03=" + encodeURIComponent("" + goods_lotatt03) + "&"; 
        if (goods_lotatt04 !== undefined)
            url_ += "goods.lotatt04=" + encodeURIComponent("" + goods_lotatt04) + "&"; 
        if (goods_lotatt05 !== undefined)
            url_ += "goods.lotatt05=" + encodeURIComponent("" + goods_lotatt05) + "&"; 
        if (goods_country !== undefined)
            url_ += "goods.country=" + encodeURIComponent("" + goods_country) + "&"; 
        if (goods_netWt !== undefined)
            url_ += "goods.netWt=" + encodeURIComponent("" + goods_netWt) + "&"; 
        if (goods_serialNo !== undefined)
            url_ += "goods.serialNo=" + encodeURIComponent("" + goods_serialNo) + "&"; 
        if (goods_pageSize !== undefined)
            url_ += "goods.pageSize=" + encodeURIComponent("" + goods_pageSize) + "&"; 
        if (goods_pageIndex !== undefined)
            url_ += "goods.pageIndex=" + encodeURIComponent("" + goods_pageIndex) + "&"; 
        if (goods_totalCount !== undefined)
            url_ += "goods.totalCount=" + encodeURIComponent("" + goods_totalCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecordSkuOrNot(_response);
        });
    }

    protected processGetRecordSkuOrNot(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BasSku/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BillClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询清单
     * @return OK
     */
    query(request: SearchRequest): Promise<ReturnResultOfPageListOfEntGoldenBillHead> {
        let url_ = this.baseUrl + "/bill/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntGoldenBillHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenBillHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenBillHead>(<any>null);
    }

    /**
     * 清单导出查询
     * @return OK
     */
    queryList(model: EntGoldenBillHead): Promise<any> {
        let url_ = this.baseUrl + "/bill/querylist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryList(_response);
        });
    }

    protected processQueryList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单导出查询
     * @return OK
     */
    querylistToExceL(model: EntGoldenBillHead): Promise<any> {
        let url_ = this.baseUrl + "/bill/querylistToExceL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerylistToExceL(_response);
        });
    }

    protected processQuerylistToExceL(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询表体
     * @param headerId 清单表头
     * @return OK
     */
    querylistToExcel(headerId: number): Promise<any> {
        let url_ = this.baseUrl + "/bill/querylistToExcel/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerylistToExcel(_response);
        });
    }

    protected processQuerylistToExcel(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单导出查询
     * @return OK
     */
    querylistToExceLDetial(model: EntGoldenBillHead): Promise<any> {
        let url_ = this.baseUrl + "/bill/querylistToExceLDetial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerylistToExceLDetial(_response);
        });
    }

    protected processQuerylistToExceLDetial(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 修改清单
     * @return OK
     */
    update(model: EntGoldenBillHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bill/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改清单
     * @return OK
     */
    updateStatus(id: number, status: string): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/bill/updatestate/{id}/{status}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined.");
        url_ = url_.replace("{status}", encodeURIComponent("" + status)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStatus(_response);
        });
    }

    protected processUpdateStatus(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除清单
     * @return OK
     */
    delete(models: EntGoldenBillHead[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/bill/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询表体
     * @param headerId 清单表头
     * @return OK
     */
    queryLists(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenBillList> {
        let url_ = this.baseUrl + "/bill/querylist/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryLists(_response);
        });
    }

    protected processQueryLists(response: Response): Promise<ReturnResultOfPageListOfEntGoldenBillList> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenBillList.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenBillList>(<any>null);
    }

    /**
     * 查询表体
     * @param headerId 清单表头
     * @return OK
     */
    querylistTopdf(headerId: number): Promise<any> {
        let url_ = this.baseUrl + "/bill/querylistTopdf/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerylistTopdf(_response);
        });
    }

    protected processQuerylistTopdf(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询规则
     * @return OK
     */
    queryBillmergeRule(billMergeRule: EntGoldenBillMergeRule): Promise<any> {
        let url_ = this.baseUrl + "/bill/queryBillmergeRule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(billMergeRule);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBillmergeRule(_response);
        });
    }

    protected processQueryBillmergeRule(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除表体
     * @return OK
     */
    deleteList(models: EntGoldenBillList[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/bill/deletelist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    querylistmergeToExcel(headerId: number): Promise<any> {
        let url_ = this.baseUrl + "/bill/querylistmergeToExcel/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerylistmergeToExcel(_response);
        });
    }

    protected processQuerylistmergeToExcel(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获取指定预录入编号的单证资料数据集
    创建人  :Ny6000
    创建时间:2019-04-25 09:47
     * @return OK
     */
    getFiles(coperpno: string): Promise<ReturnResultOfListOfEntTgBusinessFile> {
        let url_ = this.baseUrl + "/bill/getfiles/{coperpno}";
        if (coperpno === undefined || coperpno === null)
            throw new Error("The parameter 'coperpno' must be defined.");
        url_ = url_.replace("{coperpno}", encodeURIComponent("" + coperpno)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFiles(_response);
        });
    }

    protected processGetFiles(response: Response): Promise<ReturnResultOfListOfEntTgBusinessFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfListOfEntTgBusinessFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfListOfEntTgBusinessFile>(<any>null);
    }

    /**
     * 获取预录入统一编号
     * @return OK
     */
    getSeqNo(): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bill/getseqno";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSeqNo(_response);
        });
    }

    protected processGetSeqNo(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 同步表体数据
     * @return OK
     */
    synchronizeData(id: number): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bill/synchronizedata/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSynchronizeData(_response);
        });
    }

    protected processSynchronizeData(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 发送清单前校验
     * @return OK
     */
    checkBeforeSend(headid: number, customercode: string, isyanz: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bill/checkbeforesend/{headid}/{customercode}/{Isyanz}";
        if (headid === undefined || headid === null)
            throw new Error("The parameter 'headid' must be defined.");
        url_ = url_.replace("{headid}", encodeURIComponent("" + headid)); 
        if (customercode === undefined || customercode === null)
            throw new Error("The parameter 'customercode' must be defined.");
        url_ = url_.replace("{customercode}", encodeURIComponent("" + customercode)); 
        if (isyanz === undefined || isyanz === null)
            throw new Error("The parameter 'isyanz' must be defined.");
        url_ = url_.replace("{Isyanz}", encodeURIComponent("" + isyanz)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckBeforeSend(_response);
        });
    }

    protected processCheckBeforeSend(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 回填数据
     * @return OK
     */
    reFillData(headid: number, customercode: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/bill/refilldata/{headid}/{customercode}";
        if (headid === undefined || headid === null)
            throw new Error("The parameter 'headid' must be defined.");
        url_ = url_.replace("{headid}", encodeURIComponent("" + headid)); 
        if (customercode === undefined || customercode === null)
            throw new Error("The parameter 'customercode' must be defined.");
        url_ = url_.replace("{customercode}", encodeURIComponent("" + customercode)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReFillData(_response);
        });
    }

    protected processReFillData(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 功能    :穿行测试查询
    创建人  :Ny6000
    创建时间:2019-04-23 17:22
     * @return OK
     */
    goThroughQuery(model: EntGoldenBusHead): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/Bill/GoThroughQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGoThroughQuery(_response);
        });
    }

    protected processGoThroughQuery(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 功能    :档案库-进出口附件信息查询
    创建人  :Ny6000
    创建时间:2019-04-23 18:58
     * @return OK
     */
    attachmentQuery(model: EntGoldenBusHead): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/Bill/AttachmentQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAttachmentQuery(_response);
        });
    }

    protected processAttachmentQuery(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 功能    :档案库-进出口附件信息保存
    创建人  :Ny6000
    创建时间:2019-04-23 18:59
     * @return OK
     */
    attachmentSave(model: EntGoldenBusHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Bill/AttachmentSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAttachmentSave(_response);
        });
    }

    protected processAttachmentSave(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 功能    :档案库-进出口附件文件压缩下载
    创建人  :Ny6000
    创建时间:2019-04-23 19:49
     * @return OK
     */
    downAttachment(id: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/Bill/DownAttachment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDownAttachment(_response);
        });
    }

    protected processDownAttachment(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 清单审核判断
     * @return OK
     */
    checkMustAudit(): Promise<any> {
        let url_ = this.baseUrl + "/Bill/CheckMustAudit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckMustAudit(_response);
        });
    }

    protected processCheckMustAudit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单审核日志
     * @return OK
     */
    getApproveLog(coperpcode: string): Promise<ReturnResultOfEntGoldenBillHead> {
        let url_ = this.baseUrl + "/Bill/GetApproveLog?";
        if (coperpcode === undefined || coperpcode === null)
            throw new Error("The parameter 'coperpcode' must be defined and cannot be null.");
        else
            url_ += "coperpcode=" + encodeURIComponent("" + coperpcode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApproveLog(_response);
        });
    }

    protected processGetApproveLog(response: Response): Promise<ReturnResultOfEntGoldenBillHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntGoldenBillHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntGoldenBillHead>(<any>null);
    }

    /**
     * 业务单状态跟踪
     * @return OK
     */
    getBillStatusFollowing(condition: BillStatusFollowingCondition): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/Bill/GetBillStatusFollowing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBillStatusFollowing(_response);
        });
    }

    protected processGetBillStatusFollowing(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 获取审核日志
     * @return OK
     */
    getGoldenAuditLog(condition: EntGoldenAuditLog): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/Bill/GetGoldenAuditLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGoldenAuditLog(_response);
        });
    }

    protected processGetGoldenAuditLog(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 清单表体列表查询
     * @return OK
     */
    queryBillList(model: EntGoldenBillList): Promise<any> {
        let url_ = this.baseUrl + "/Bill/QueryBillList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBillList(_response);
        });
    }

    protected processQueryBillList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单单个实体获取
     * @return OK
     */
    getBillListEnt(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/GetBillListEnt/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBillListEnt(_response);
        });
    }

    protected processGetBillListEnt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单审核通过
     * @return OK
     */
    approveGo(model: EntGoldenBillHead): Promise<any> {
        let url_ = this.baseUrl + "/Bill/ApproveGo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApproveGo(_response);
        });
    }

    protected processApproveGo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单审核驳回
     * @return OK
     */
    approveBack(model: EntGoldenBillHead): Promise<any> {
        let url_ = this.baseUrl + "/Bill/ApproveBack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApproveBack(_response);
        });
    }

    protected processApproveBack(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增清单
     * @return OK
     */
    insertBillHead(model: EntGoldenBillHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Bill/InsertBillHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBillHead(_response);
        });
    }

    protected processInsertBillHead(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    getCustomerDefaultInfo(customer: string, type: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/GetCustomerDefaultInfo?";
        if (customer === undefined || customer === null)
            throw new Error("The parameter 'customer' must be defined and cannot be null.");
        else
            url_ += "customer=" + encodeURIComponent("" + customer) + "&"; 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomerDefaultInfo(_response);
        });
    }

    protected processGetCustomerDefaultInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryBillHeadData(model: EntGoldenBillHead): Promise<any> {
        let url_ = this.baseUrl + "/Bill/QueryBillHeadData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBillHeadData(_response);
        });
    }

    protected processQueryBillHeadData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取单个清单表头及表体信息
     * @return OK
     */
    getFirstBillHeadInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/GetFirstBillHeadInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFirstBillHeadInfo(_response);
        });
    }

    protected processGetFirstBillHeadInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取单个清单表头数据
     * @return OK
     */
    getEntBillHeadInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/GetEntBillHeadInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntBillHeadInfo(_response);
        });
    }

    protected processGetEntBillHeadInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 申请删除清单
     * @param id 表头ID
     * @return OK
     */
    applyDelBill(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/ApplyDelBill/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApplyDelBill(_response);
        });
    }

    protected processApplyDelBill(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 复制清单
     * @return OK
     */
    copyBill(id: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/CopyBill/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCopyBill(_response);
        });
    }

    protected processCopyBill(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 复制全部
     * @return OK
     */
    copyBillAll(id: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/CopyBillAll/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCopyBillAll(_response);
        });
    }

    protected processCopyBillAll(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增表体
     * @return OK
     */
    insertList(model: EntGoldenBillList): Promise<any> {
        let url_ = this.baseUrl + "/Bill/InsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertList(_response);
        });
    }

    protected processInsertList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增表体
     * @return OK
     */
    batchInsertList(dy: any): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/Bill/BatchInsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dy);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchInsertList(_response);
        });
    }

    protected processBatchInsertList(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 获取表体最大序号
     * @return OK
     */
    getMaxSeqNo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/GetMaxSeqNo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMaxSeqNo(_response);
        });
    }

    protected processGetMaxSeqNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 修改表体
     * @return OK
     */
    updateList(model: EntGoldenBillList): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Bill/UpdateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateList(_response);
        });
    }

    protected processUpdateList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改规则
     * @return OK
     */
    updateModelList(model: EntGoldenBillMergeRule[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Bill/UpdateModelList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateModelList(_response);
        });
    }

    protected processUpdateModelList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 查询归并后表体
     * @param headerId 清单表头
     * @return OK
     */
    queryListMerges(headerId: string, type: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/QueryListMerges?";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined and cannot be null.");
        else
            url_ += "headerId=" + encodeURIComponent("" + headerId) + "&"; 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryListMerges(_response);
        });
    }

    protected processQueryListMerges(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取料号信息
     * @return OK
     */
    getImgInfo(goodsFlag: string, emsno: string, copgno: string): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/Bill/GetImgInfo?";
        if (goodsFlag === undefined || goodsFlag === null)
            throw new Error("The parameter 'goodsFlag' must be defined and cannot be null.");
        else
            url_ += "goodsFlag=" + encodeURIComponent("" + goodsFlag) + "&"; 
        if (emsno === undefined || emsno === null)
            throw new Error("The parameter 'emsno' must be defined and cannot be null.");
        else
            url_ += "emsno=" + encodeURIComponent("" + emsno) + "&"; 
        if (copgno === undefined || copgno === null)
            throw new Error("The parameter 'copgno' must be defined and cannot be null.");
        else
            url_ += "copgno=" + encodeURIComponent("" + copgno) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImgInfo(_response);
        });
    }

    protected processGetImgInfo(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 获取料号信息
     * @return OK
     */
    getVersions(emsNo: string, copGNo: string): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/Bill/GetVersions?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        if (copGNo === undefined || copGNo === null)
            throw new Error("The parameter 'copGNo' must be defined and cannot be null.");
        else
            url_ += "copGNo=" + encodeURIComponent("" + copGNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVersions(_response);
        });
    }

    protected processGetVersions(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 获取料号信息
     * @return OK
     */
    gethscodeAndUnitBy(erpSkuList: string, isImg: string): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/Bill/GethscodeAndUnitBy?";
        if (erpSkuList === undefined || erpSkuList === null)
            throw new Error("The parameter 'erpSkuList' must be defined and cannot be null.");
        else
            url_ += "ErpSkuList=" + encodeURIComponent("" + erpSkuList) + "&"; 
        if (isImg === undefined || isImg === null)
            throw new Error("The parameter 'isImg' must be defined and cannot be null.");
        else
            url_ += "isImg=" + encodeURIComponent("" + isImg) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGethscodeAndUnitBy(_response);
        });
    }

    protected processGethscodeAndUnitBy(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 清单表体
     * @return OK
     */
    billList(headId: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/BillList?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBillList(_response);
        });
    }

    protected processBillList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 归并表体
     * @return OK
     */
    merge(headId: string, user: string, type: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/Merge?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMerge(_response);
        });
    }

    protected processMerge(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 清单拆单
     * @return OK
     */
    split(headId: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/Split?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSplit(_response);
        });
    }

    protected processSplit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 撤销归并表体
     * @return OK
     */
    revokeMerge(headId: string): Promise<any> {
        let url_ = this.baseUrl + "/Bill/RevokeMerge?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRevokeMerge(_response);
        });
    }

    protected processRevokeMerge(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :同步核注清单数据到报关单和业务单中
    创建人  :Ny6000
    创建时间:2019-04-16 10:09
     * @return OK
     */
    generateBillToEntry(id: string, user: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/Bill/GenerateBillToEntry/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateBillToEntry(_response);
        });
    }

    protected processGenerateBillToEntry(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 功能    :生成指定核注清单数据指定类型的单证资料
    创建人  :Ny6000
    创建时间:2019-04-18 17:51
     * @return OK
     */
    licenseDocBuild(id: string, t: string, u: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/Bill/LicenseDocBuild/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (t === undefined || t === null)
            throw new Error("The parameter 't' must be defined and cannot be null.");
        else
            url_ += "t=" + encodeURIComponent("" + t) + "&"; 
        if (u === undefined || u === null)
            throw new Error("The parameter 'u' must be defined and cannot be null.");
        else
            url_ += "u=" + encodeURIComponent("" + u) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLicenseDocBuild(_response);
        });
    }

    protected processLicenseDocBuild(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Bill/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BomClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(model: EntBasBom): Promise<any> {
        let url_ = this.baseUrl + "/Bom/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getData(model: EntBasBom): Promise<any> {
        let url_ = this.baseUrl + "/Bom/GetData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetData(_response);
        });
    }

    protected processGetData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(listId: string[]): Promise<any> {
        let url_ = this.baseUrl + "/Bom/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntBasBom): Promise<any> {
        let url_ = this.baseUrl + "/Bom/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: EntBasBomdetial): Promise<any> {
        let url_ = this.baseUrl + "/Bom/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getEmsNo(customerCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Bom/GetEmsNo?";
        if (customerCode === undefined || customerCode === null)
            throw new Error("The parameter 'customerCode' must be defined and cannot be null.");
        else
            url_ += "customerCode=" + encodeURIComponent("" + customerCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmsNo(_response);
        });
    }

    protected processGetEmsNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getImgGNo(model: EntBasBom): Promise<any> {
        let url_ = this.baseUrl + "/Bom/GetImgGNo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImgGNo(_response);
        });
    }

    protected processGetImgGNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getExgGNo(model: EntBasBom): Promise<any> {
        let url_ = this.baseUrl + "/Bom/GetExgGNo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExgGNo(_response);
        });
    }

    protected processGetExgGNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :BOM单耗版本号匹配
    创建人  :Ny6000
    创建时间:2019-04-15 11:41
     * @return OK
     */
    matchBeginDate(erpNo: string, emsNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Bom/MatchBeginDate?";
        if (erpNo === undefined || erpNo === null)
            throw new Error("The parameter 'erpNo' must be defined and cannot be null.");
        else
            url_ += "ErpNo=" + encodeURIComponent("" + erpNo) + "&"; 
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "EmsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMatchBeginDate(_response);
        });
    }

    protected processMatchBeginDate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据选择勾选记录主键,获得单耗版本号待匹配数据
    创建人  :Ny6000
    创建时间:2019-06-27 10:33
     * @return OK
     */
    getDataForMatch(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/Bom/GetDataForMatch?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDataForMatch(_response);
        });
    }

    protected processGetDataForMatch(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :BOM同步数据中暂无版本号记录,生成新BOM备案版本号
    创建人  :Ny6000
    创建时间:2019-07-29 16:28
     * @return OK
     */
    createNewBeginDate(argLoginName: string): Promise<any> {
        let url_ = this.baseUrl + "/Bom/CreateNewBeginDate?";
        if (argLoginName === undefined || argLoginName === null)
            throw new Error("The parameter 'argLoginName' must be defined and cannot be null.");
        else
            url_ += "argLoginName=" + encodeURIComponent("" + argLoginName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNewBeginDate(_response);
        });
    }

    protected processCreateNewBeginDate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Bom/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class BussInfoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 功能    :根据查询条件,获得业务单表头数据集
    创建人  :Ny6000
    创建时间:2019-03-25 15:54
     * @return OK
     */
    getHeadList(model: EntGoldenBusHead): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetHeadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadList(_response);
        });
    }

    protected processGetHeadList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据查询条件,获得业务单表头数据集
    创建人  :Ny6000
    创建时间:2019-03-25 15:54
     * @return OK
     */
    getHeadExportData(model: EntGoldenBusHead): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetHeadExportData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadExportData(_response);
        });
    }

    protected processGetHeadExportData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :保存业务单表头
    创建人  :Ny6000
    创建时间:2019-03-27 11:36
     * @return OK
     */
    headSave(model: EntGoldenBusHead): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/HeadSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadSave(_response);
        });
    }

    protected processHeadSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取表头信息通过业务单号
     * @return OK
     */
    getBusHead(busNo: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetBusHead?";
        if (busNo === undefined || busNo === null)
            throw new Error("The parameter 'busNo' must be defined and cannot be null.");
        else
            url_ += "busNo=" + encodeURIComponent("" + busNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBusHead(_response);
        });
    }

    protected processGetBusHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :判断删除业务单表头,表体
    创建人  :Ny6000
    创建时间:2019-03-27 11:36
     * @return OK
     */
    headDelete(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/HeadDelete?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadDelete(_response);
        });
    }

    protected processHeadDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :批量判断删除业务单表头,表体
    创建人  :Ny6000
    创建时间:2019-03-27 11:36
     * @return OK
     */
    listHeadDelete(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/ListHeadDelete?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListHeadDelete(_response);
        });
    }

    protected processListHeadDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获得业务单表体明细数据集
    创建人  :Ny6000
    创建时间:2019-03-25 15:53
     * @return OK
     */
    getDetailsList(model: EntGoldenBusList): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetDetailsList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDetailsList(_response);
        });
    }

    protected processGetDetailsList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获取指定主键的业务单表头数据对象
    创建人  :Ny6000
    创建时间:2019-03-26 12:05
     * @return OK
     */
    getHeadSingle(id: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetHeadSingle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadSingle(_response);
        });
    }

    protected processGetHeadSingle(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获取指定主键的业务单表体数据对象
    创建人  :Ny6000
    创建时间:2019-03-27 14:33
     * @return OK
     */
    getListSingle(id: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetListSingle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListSingle(_response);
        });
    }

    protected processGetListSingle(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据主键更新单行业务单明细数据
    创建人  :Ny6000
    创建时间:2019-04-01 18:07
     * @return OK
     */
    listSave(listSingle: EntGoldenBusList): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/ListSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listSingle);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListSave(_response);
        });
    }

    protected processListSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :批量导入业务单明细数据
    创建人  :Ny6000
    创建时间:2019-03-27 20:02
     * @return OK
     */
    importList(listModel: EntGoldenBusList[]): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/ImportList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportList(_response);
        });
    }

    protected processImportList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :删除指定业务单下所选表体明细,判断从sap发票中挑选时需要还原发票明细数量
    创建人  :Ny6000
    创建时间:2019-03-28 14:12
     * @return OK
     */
    deleteList(headId: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/DeleteList?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :删除指定业务单下全部明细数据
    创建人  :Ny6000
    创建时间:2019-03-28 14:46
     * @return OK
     */
    deleteListAll(headId: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/DeleteListAll?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteListAll(_response);
        });
    }

    protected processDeleteListAll(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 验证字段合法性
     * @return OK
     */
    checkHeadFieldExists(model: EntGoldenBusHead): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/CheckHeadFieldExists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckHeadFieldExists(_response);
        });
    }

    protected processCheckHeadFieldExists(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :关联备案数据回填指定业务单下全部明细数据的备案信息
    创建人  :Ny6000
    创建时间:2019-03-28 14:47
     * @return OK
     */
    splitEmsNo(headId: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/SplitEmsNo?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSplitEmsNo(_response);
        });
    }

    protected processSplitEmsNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据指定业务单执行拆单操作(进口)
    创建人  :Ny6000
    创建时间:2019-03-28 15:31
     * @return OK
     */
    splitAsnNo(headId: number, splitNum: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/SplitAsnNo?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (splitNum === undefined || splitNum === null)
            throw new Error("The parameter 'splitNum' must be defined and cannot be null.");
        else
            url_ += "SplitNum=" + encodeURIComponent("" + splitNum) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSplitAsnNo(_response);
        });
    }

    protected processSplitAsnNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据指定业务单执行拆单操作(进口)
    创建人  :Ny6000
    创建时间:2019-03-28 15:31
     * @return OK
     */
    splitListNo(headId: number, splitNum: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/SplitListNo?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (splitNum === undefined || splitNum === null)
            throw new Error("The parameter 'splitNum' must be defined and cannot be null.");
        else
            url_ += "SplitNum=" + encodeURIComponent("" + splitNum) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSplitListNo(_response);
        });
    }

    protected processSplitListNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据指定业务单执行拆单操作(出口)
    创建人  :Ny6000
    创建时间:2019-04-09 15:06
     * @return OK
     */
    splitSoNo(headId: number, splitNum: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/SplitSoNo?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (splitNum === undefined || splitNum === null)
            throw new Error("The parameter 'splitNum' must be defined and cannot be null.");
        else
            url_ += "SplitNum=" + encodeURIComponent("" + splitNum) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSplitSoNo(_response);
        });
    }

    protected processSplitSoNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据指定业务单执行取消拆单操作
    创建人  :Ny6000
    创建时间:2019-03-28 17:00
     * @return OK
     */
    splitAsnNoCancel(headId: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/SplitAsnNoCancel?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSplitAsnNoCancel(_response);
        });
    }

    protected processSplitAsnNoCancel(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :批量更新业务单明细数据(仅更新部分可编辑字段)
    创建人  :Ny6000
    创建时间:2019-03-29 12:48
     * @return OK
     */
    batchUpdateBusList(listModel: EntGoldenBusList[]): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/BatchUpdateBusList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchUpdateBusList(_response);
        });
    }

    protected processBatchUpdateBusList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :批量更新业务单明细数据(仅更新部分可编辑字段)
    创建人  :Ny6000
    创建时间:2019-03-29 12:48
     * @return OK
     */
    checkBusInfo(id: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/CheckBusInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckBusInfo(_response);
        });
    }

    protected processCheckBusInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :判断生成核注清单
    创建人  :Ny6000
    创建时间:2019-03-29 17:59
     * @return OK
     */
    buildBus(ids: string, userName: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/BuildBus?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined and cannot be null.");
        else
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBuildBus(_response);
        });
    }

    protected processBuildBus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :判断取消生成核注清单
    创建人  :Ny6000
    创建时间:2019-03-29 17:59
     * @return OK
     */
    cancelBuildBus(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/CancelBuildBus?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelBuildBus(_response);
        });
    }

    protected processCancelBuildBus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获取指定查询条件的出库中间库发票明细信息
    创建人  :Ny6000
    创建时间:2019-04-08 17:51
     * @return OK
     */
    outStockGetList(model: EntAppOutStock): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/OutStockGetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOutStockGetList(_response);
        });
    }

    protected processOutStockGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :挑选出库中间库明细数据插入业务单明细表
    创建人  :Ny6000
    创建时间:2019-04-08 17:31
     * @return OK
     */
    outStockAppendList(headId: number, ids: string, userName: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/OutStockAppendList?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined and cannot be null.");
        else
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOutStockAppendList(_response);
        });
    }

    protected processOutStockAppendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :更新指定业务单表头状态
    创建人  :Ny6000
    创建时间:2019-04-08 18:40
     * @return OK
     */
    headStatusUpdate(id: number, s: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/HeadStatusUpdate/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (s === undefined || s === null)
            throw new Error("The parameter 's' must be defined and cannot be null.");
        else
            url_ += "S=" + encodeURIComponent("" + s) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadStatusUpdate(_response);
        });
    }

    protected processHeadStatusUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获取指定主键的料件备案数据实体类
    创建人  :Ny6000
    创建时间:2019-04-11 11:33
     * @return OK
     */
    getSingleImg(sku: string, emsno: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetSingleImg?";
        if (sku === undefined || sku === null)
            throw new Error("The parameter 'sku' must be defined and cannot be null.");
        else
            url_ += "sku=" + encodeURIComponent("" + sku) + "&"; 
        if (emsno === undefined || emsno === null)
            throw new Error("The parameter 'emsno' must be defined and cannot be null.");
        else
            url_ += "emsno=" + encodeURIComponent("" + emsno) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleImg(_response);
        });
    }

    protected processGetSingleImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获取指定主键的成品备案数据实体类
    创建人  :Ny6000
    创建时间:2019-04-11 11:36
     * @return OK
     */
    getSingleExg(sku: string, emsno: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetSingleExg?";
        if (sku === undefined || sku === null)
            throw new Error("The parameter 'sku' must be defined and cannot be null.");
        else
            url_ += "sku=" + encodeURIComponent("" + sku) + "&"; 
        if (emsno === undefined || emsno === null)
            throw new Error("The parameter 'emsno' must be defined and cannot be null.");
        else
            url_ += "emsno=" + encodeURIComponent("" + emsno) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleExg(_response);
        });
    }

    protected processGetSingleExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获得指定类型和发送主键报文回执日志数据集
    创建人  :Ny6000
    创建时间:2019-04-11 18:26
     * @return OK
     */
    getDockLog(model: EntMessageDockLog): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetDockLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDockLog(_response);
        });
    }

    protected processGetDockLog(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获得指定业务单拆单明细
    创建人  :Ny6000
    创建时间:2019-04-12 14:54
     * @return OK
     */
    getSplitDetails(id: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetSplitDetails/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSplitDetails(_response);
        });
    }

    protected processGetSplitDetails(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 批量添加产品
     * @return OK
     */
    addSkuOfSelect(headId: number, gmark: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/AddSkuOfSelect?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (gmark === undefined || gmark === null)
            throw new Error("The parameter 'gmark' must be defined and cannot be null.");
        else
            url_ += "gmark=" + encodeURIComponent("" + gmark) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddSkuOfSelect(_response);
        });
    }

    protected processAddSkuOfSelect(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 批量添加产品
     * @return OK
     */
    addInvoiceOfSelect(headId: number, ids: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/AddInvoiceOfSelect?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddInvoiceOfSelect(_response);
        });
    }

    protected processAddInvoiceOfSelect(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取接单列表信息
     * @return OK
     */
    queryBillAccpetPageData(model: EntGoldenBusHead): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/QueryBillAccpetPageData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBillAccpetPageData(_response);
        });
    }

    protected processQueryBillAccpetPageData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取接单列表信息
     * @return OK
     */
    getEntryDataByBusNo(busNo: string): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetEntryDataByBusNo?";
        if (busNo === undefined || busNo === null)
            throw new Error("The parameter 'busNo' must be defined and cannot be null.");
        else
            url_ += "busNo=" + encodeURIComponent("" + busNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryDataByBusNo(_response);
        });
    }

    protected processGetEntryDataByBusNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 批量更新
     * @return OK
     */
    updateHeadByTable(table: any): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/UpdateHeadByTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(table);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateHeadByTable(_response);
        });
    }

    protected processUpdateHeadByTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取业务单状态
     * @return OK
     */
    getHeadStatus(headId: number): Promise<any> {
        let url_ = this.baseUrl + "/BussInfo/GetHeadStatus?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadStatus(_response);
        });
    }

    protected processGetHeadStatus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/BussInfo/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class CacheClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 保存单个key value
     * @param key Redis Key
     * @param value 保存的值
     * @return OK
     */
    set(key: string, value: string): Promise<boolean> {
        let url_ = this.baseUrl + "/Cache/Set?";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        if (value === undefined || value === null)
            throw new Error("The parameter 'value' must be defined and cannot be null.");
        else
            url_ += "value=" + encodeURIComponent("" + value) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSet(_response);
        });
    }

    protected processSet(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * 获取单个key的值
     * @param key Redis Key
     * @return OK
     */
    get(key: string): Promise<any> {
        let url_ = this.baseUrl + "/Cache/Get?";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除单个key
     * @param key redis key
     * @return OK
     */
    remove(key: string): Promise<boolean> {
        let url_ = this.baseUrl + "/Cache/Remove?";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * 存储数据到hash表
     * @return OK
     */
    hashSet(obj: any): Promise<boolean> {
        let url_ = this.baseUrl + "/Cache/HashSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(obj);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHashSet(_response);
        });
    }

    protected processHashSet(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * 存储数据到hash表
     * @return OK
     */
    hashSetDic(obj: any): Promise<string> {
        let url_ = this.baseUrl + "/Cache/HashSetDic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(obj);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHashSetDic(_response);
        });
    }

    protected processHashSetDic(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * 获取hashKeyData
     * @return OK
     */
    hashGet(hashId: string, key: string): Promise<any> {
        let url_ = this.baseUrl + "/Cache/HashGet?";
        if (hashId === undefined || hashId === null)
            throw new Error("The parameter 'hashId' must be defined and cannot be null.");
        else
            url_ += "hashId=" + encodeURIComponent("" + hashId) + "&"; 
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHashGet(_response);
        });
    }

    protected processHashGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 移除hash中的某值
     * @return OK
     */
    hashDelete(hashId: string, key: string): Promise<boolean> {
        let url_ = this.baseUrl + "/Cache/HashDelete?";
        if (hashId === undefined || hashId === null)
            throw new Error("The parameter 'hashId' must be defined and cannot be null.");
        else
            url_ += "hashId=" + encodeURIComponent("" + hashId) + "&"; 
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHashDelete(_response);
        });
    }

    protected processHashDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * 从hash表获取全部数据
     * @return OK
     */
    hashGetAllDic(hashId: string): Promise<{ [key: string]: string; }> {
        let url_ = this.baseUrl + "/Cache/HashGetAllDic?";
        if (hashId === undefined || hashId === null)
            throw new Error("The parameter 'hashId' must be defined and cannot be null.");
        else
            url_ += "hashId=" + encodeURIComponent("" + hashId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHashGetAllDic(_response);
        });
    }

    protected processHashGetAllDic(response: Response): Promise<{ [key: string]: string; }> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200![key] = resultData200[key];
                }
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<{ [key: string]: string; }>(<any>null);
    }

    /**
     * 清除缓存库
     * @return No Content
     */
    flushDb(dbNum: number): Promise<void> {
        let url_ = this.baseUrl + "/Cache/FlushDb?";
        if (dbNum === undefined || dbNum === null)
            throw new Error("The parameter 'dbNum' must be defined and cannot be null.");
        else
            url_ += "dbNum=" + encodeURIComponent("" + dbNum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFlushDb(_response);
        });
    }

    protected processFlushDb(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 清除缓存库
     * @return OK
     */
    getAllKeys(): Promise<any> {
        let url_ = this.baseUrl + "/Cache/GetAllKeys";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllKeys(_response);
        });
    }

    protected processGetAllKeys(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 初始化系统缓存
     * @return OK
     */
    getHgCacheList(ct: Ct): Promise<CacheCode[]> {
        let url_ = this.baseUrl + "/Cache/GetHgCacheList?";
        if (ct === undefined || ct === null)
            throw new Error("The parameter 'ct' must be defined and cannot be null.");
        else
            url_ += "ct=" + encodeURIComponent("" + ct) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHgCacheList(_response);
        });
    }

    protected processGetHgCacheList(response: Response): Promise<CacheCode[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CacheCode.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CacheCode[]>(<any>null);
    }

    /**
     * 初始化系统缓存
     * @return No Content
     */
    initHgCacheList(ct: Ct2): Promise<void> {
        let url_ = this.baseUrl + "/Cache/InitHgCacheList?";
        if (ct === undefined || ct === null)
            throw new Error("The parameter 'ct' must be defined and cannot be null.");
        else
            url_ += "ct=" + encodeURIComponent("" + ct) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInitHgCacheList(_response);
        });
    }

    protected processInitHgCacheList(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CategoryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 根据主键获取一个实体
     * @return OK
     */
    get(id: number): Promise<Category> {
        let url_ = this.baseUrl + "/api/category/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Category> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Category.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category>(<any>null);
    }

    /**
     * 获取全部实体列表
     * @return OK
     */
    getListAll(): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/category/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListAll(_response);
        });
    }

    protected processGetListAll(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * 获取满足参数条件的实体列表
     * @param parameters { Name : "经济" }
     * @return OK
     */
    getList(parameters: any): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/category/getlist/v1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * 获取满足参数条件的实体列表
     * @param request {Sql:"where name=@name",Parameter:{ name : "经济" }}
     * @return OK
     */
    getList2(request: SqlParameterPair): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/category/getlist/v2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList2(_response);
        });
    }

    protected processGetList2(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * 使用SQL查询
     * @param sql select * from Category
     * @return OK
     */
    queryByRawSql(sql: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/category/getlist/v3?";
        if (sql === undefined || sql === null)
            throw new Error("The parameter 'sql' must be defined and cannot be null.");
        else
            url_ += "sql=" + encodeURIComponent("" + sql) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryByRawSql(_response);
        });
    }

    protected processQueryByRawSql(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * 根据条件分页
     * @param pagenumber 1
     * @param itemsperpage 10
     * @param conditions where name=@name
     * @param order id desc
     * @param parameters { name : "经济" }
     * @return OK
     */
    getListPaged(pagenumber: number, itemsperpage: number, conditions: string, order: string, parameters: any): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/category/pagelist?";
        if (pagenumber === undefined || pagenumber === null)
            throw new Error("The parameter 'pagenumber' must be defined and cannot be null.");
        else
            url_ += "pagenumber=" + encodeURIComponent("" + pagenumber) + "&"; 
        if (itemsperpage === undefined || itemsperpage === null)
            throw new Error("The parameter 'itemsperpage' must be defined and cannot be null.");
        else
            url_ += "itemsperpage=" + encodeURIComponent("" + itemsperpage) + "&"; 
        if (conditions === undefined || conditions === null)
            throw new Error("The parameter 'conditions' must be defined and cannot be null.");
        else
            url_ += "conditions=" + encodeURIComponent("" + conditions) + "&"; 
        if (order === undefined || order === null)
            throw new Error("The parameter 'order' must be defined and cannot be null.");
        else
            url_ += "order=" + encodeURIComponent("" + order) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListPaged(_response);
        });
    }

    protected processGetListPaged(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * 查询满足条件的第一条记录，如果无记录则抛出异常
     * @param request {Sql: "select  * from Category where name=@name",Parameter: {name:"经济"}}
     * @return OK
     */
    queryFirst(request: SqlParameterPair): Promise<Category> {
        let url_ = this.baseUrl + "/api/category/queryfirst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryFirst(_response);
        });
    }

    protected processQueryFirst(response: Response): Promise<Category> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Category.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category>(<any>null);
    }

    /**
     * 查询满足条件的第一条记录，如果无记录则返回一个默认值
     * @param request {Sql: "select  * from Category where name=@name",Parameter: {name:"经济"}}
     * @return OK
     */
    queryFirstOrDefault(request: SqlParameterPair): Promise<Category> {
        let url_ = this.baseUrl + "/api/category/queryfirstordefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryFirstOrDefault(_response);
        });
    }

    protected processQueryFirstOrDefault(response: Response): Promise<Category> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Category.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category>(<any>null);
    }

    /**
     * 查询满足条件的第一条记录，如果无记录则抛出异常,如果有多条记录也抛出异常
     * @param request {Sql: "select  * from Category where name=@name",Parameter: {name:"经济"}}
     * @return OK
     */
    querySingle(request: SqlParameterPair): Promise<Category> {
        let url_ = this.baseUrl + "/api/category/querysingle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerySingle(_response);
        });
    }

    protected processQuerySingle(response: Response): Promise<Category> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Category.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category>(<any>null);
    }

    /**
     * 查询满足条件的第一条记录，如果无记录则返回一个默认值,如果有多条记录抛出异常
     * @param request {Sql: "select  * from Category where name=@name",Parameter: {name:"经济"}}
     * @return OK
     */
    querySingleOrDefault(request: SqlParameterPair): Promise<Category> {
        let url_ = this.baseUrl + "/api/category/querysingleordefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuerySingleOrDefault(_response);
        });
    }

    protected processQuerySingleOrDefault(response: Response): Promise<Category> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Category.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category>(<any>null);
    }

    /**
     * 插入实体并返回主键值
     * @return OK
     */
    insert(entity: Category): Promise<number> {
        let url_ = this.baseUrl + "/api/category/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 批量插入实体
     * @return No Content
     */
    bulkInsert(entities: Category[]): Promise<void> {
        let url_ = this.baseUrl + "/api/category/bulkinsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entities);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBulkInsert(_response);
        });
    }

    protected processBulkInsert(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 使用SQL语句插入一条记录
     * @param request {Sql:"INSERT INTO Category (name) Values (@name);",Parameter:{name:"文化"}}
     * @return OK
     */
    insertOneByRawSql(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/insertonebysql";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertOneByRawSql(_response);
        });
    }

    protected processInsertOneByRawSql(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 使用SQL语句插入一批记录
     * @param request {Sql:"INSERT INTO Category (name) Values (@name);",Parameter:[{name:"文化"},{name:"军事"}]}
     * @return OK
     */
    insertBatchByRawSql(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/insertbatchbysql";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBatchByRawSql(_response);
        });
    }

    protected processInsertBatchByRawSql(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @return OK
     */
    insertOneByStorage(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/insertonebystorage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertOneByStorage(_response);
        });
    }

    protected processInsertOneByStorage(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 使用存储过程插入一批记录
     * @param request {Sql:"INSERT INTO Category (Name) Values (@Name);",Parameter:[{Name:"文化"},{name:"军事"}]}
     * @return OK
     */
    insertBatchByStorage(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/insertbatchbystorage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBatchByStorage(_response);
        });
    }

    protected processInsertBatchByStorage(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 更新实体
     * @return OK
     */
    update(entity: Category): Promise<number> {
        let url_ = this.baseUrl + "/api/category/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 批量更新实体
     * @return No Content
     */
    bulkUpdate(entities: Category[]): Promise<void> {
        let url_ = this.baseUrl + "/api/category/bulkupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entities);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBulkUpdate(_response);
        });
    }

    protected processBulkUpdate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 批量合并实体(存在则更新,不存在则新增)
     * @return No Content
     */
    bulkMerge(entities: Category[]): Promise<void> {
        let url_ = this.baseUrl + "/api/category/bulkmerge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entities);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBulkMerge(_response);
        });
    }

    protected processBulkMerge(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 使用SQL语句更新一条记录
     * @param request {Sql:"UPDATE Category SET Name = @name WHERE Id = @Id;",Parameter:{name:"经济",Id:1}}
     * @return OK
     */
    updateOneByRawSql(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/updateonebysql";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateOneByRawSql(_response);
        });
    }

    protected processUpdateOneByRawSql(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 使用SQL语句更新一批记录
     * @param request {Sql:"UPDATE Category SET Name = @name WHERE Id = @id;",Parameter:[{name:"经济",id:1},{name:"科幻",id:2}]}
     * @return OK
     */
    updateBatchByRawSql(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/updatebatchbysql";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBatchByRawSql(_response);
        });
    }

    protected processUpdateBatchByRawSql(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 根据主键删除
     * @return OK
     */
    delete(id: number): Promise<number> {
        let url_ = this.baseUrl + "/api/category/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 根据实体删除
     * @return OK
     */
    delete2(entity: Category): Promise<number> {
        let url_ = this.baseUrl + "/api/category/deleteone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 批量删除
     * @return No Content
     */
    bulkDelete(entities: Category[]): Promise<void> {
        let url_ = this.baseUrl + "/api/category/deletebatch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entities);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBulkDelete(_response);
        });
    }

    protected processBulkDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 根据条件删除
     * @param parameters {name:"军事"}
     * @return OK
     */
    deleteList(parameters: any): Promise<number> {
        let url_ = this.baseUrl + "/api/category/deletewithcondition/v1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 根据条件删除
     * @param request {Sql:"where name=@name",Parameter:{name:"军事"}}
     * @return OK
     */
    deleteList2(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/deletewithcondition/v2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList2(_response);
        });
    }

    protected processDeleteList2(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 使用SQL语句删除
     * @param request {Sql:"DELETE FROM Category WHERE name = @name",Parameter: {name:"军事"}}
     * @return OK
     */
    deleteByRawSql(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/deletewithcondition/v3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByRawSql(_response);
        });
    }

    protected processDeleteByRawSql(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 获取满足条件的数量
     * @param request {Sql:"where name=@name",Parameter: { name:"经济" }}
     * @return OK
     */
    recordCount(request: SqlParameterPair): Promise<number> {
        let url_ = this.baseUrl + "/api/category/recordcount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecordCount(_response);
        });
    }

    protected processRecordCount(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 使用事务
     * @return No Content
     */
    useTransaction(): Promise<void> {
        let url_ = this.baseUrl + "/api/category/usetransaction";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUseTransaction(_response);
        });
    }

    protected processUseTransaction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Category/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class CmExgdummyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getCmExgdummyList(model: EntGoldenCmExgdummy): Promise<any> {
        let url_ = this.baseUrl + "/CmExgdummy/GetCmExgdummyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCmExgdummyList(_response);
        });
    }

    protected processGetCmExgdummyList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getCmExgdummyListByID(model: EntGoldenCmExgdummy): Promise<any> {
        let url_ = this.baseUrl + "/CmExgdummy/GetCmExgdummyListByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCmExgdummyListByID(_response);
        });
    }

    protected processGetCmExgdummyListByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    deleteCmExgdummy(id: string): Promise<any> {
        let url_ = this.baseUrl + "/CmExgdummy/DeleteCmExgdummy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCmExgdummy(_response);
        });
    }

    protected processDeleteCmExgdummy(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增、修改用户基本信息
     * @return OK
     */
    saveCmExgdummy(model1: EntGoldenCmExgdummy): Promise<any> {
        let url_ = this.baseUrl + "/CmExgdummy/SaveCmExgdummy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model1);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveCmExgdummy(_response);
        });
    }

    protected processSaveCmExgdummy(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 批量导入
     * @return OK
     */
    importCmExgdummy(model1: EntGoldenCmExgdummy[]): Promise<any> {
        let url_ = this.baseUrl + "/CmExgdummy/ImportCmExgdummy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model1);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportCmExgdummy(_response);
        });
    }

    protected processImportCmExgdummy(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class CodeTypeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询参数
     * @return OK
     */
    query(request: EntParaQuery): Promise<ReturnResultOfEntParaQuery> {
        let url_ = this.baseUrl + "/codetype/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfEntParaQuery> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntParaQuery.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntParaQuery>(<any>null);
    }

    /**
     * 查询参数下拉绑定
     * @return OK
     */
    queryParaCombobox(): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/CodeType/QueryParaCombobox";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryParaCombobox(_response);
        });
    }

    protected processQueryParaCombobox(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 根据系统代码获取系统代码信息
     * @param code 系统代码
     * @param codeType (optional) 系统类别
     * @return OK
     */
    getBasCodeByCode(code: string, codeType: string | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetBasCodeByCode?";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined and cannot be null.");
        else
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        if (codeType !== undefined)
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBasCodeByCode(_response);
        });
    }

    protected processGetBasCodeByCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Gets the list.
     * @return OK
     */
    getList(model: EntBasCodetype): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Gets the code list.
     * @param codeType Type of the code.
     * @return OK
     */
    getCodeList(codeType: string): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetCodeList?";
        if (codeType === undefined || codeType === null)
            throw new Error("The parameter 'codeType' must be defined and cannot be null.");
        else
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCodeList(_response);
        });
    }

    protected processGetCodeList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Gets the code list.
     * @param codeType Type of the code.
     * @return OK
     */
    getBaseCodeList(codeType: string): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetBaseCodeList?";
        if (codeType === undefined || codeType === null)
            throw new Error("The parameter 'codeType' must be defined and cannot be null.");
        else
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBaseCodeList(_response);
        });
    }

    protected processGetBaseCodeList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Deletes the type of the code.
     * @param codeType Type of the code.
     * @return OK
     */
    deleteCodeType(codeType: string): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/DeleteCodeType?";
        if (codeType === undefined || codeType === null)
            throw new Error("The parameter 'codeType' must be defined and cannot be null.");
        else
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCodeType(_response);
        });
    }

    protected processDeleteCodeType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Deletes the codes.
     * @param codeType Type of the code.
     * @param codes The codes.
     * @return OK
     */
    deleteCodes(codeType: string, codes: string): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/DeleteCodes?";
        if (codeType === undefined || codeType === null)
            throw new Error("The parameter 'codeType' must be defined and cannot be null.");
        else
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        if (codes === undefined || codes === null)
            throw new Error("The parameter 'codes' must be defined and cannot be null.");
        else
            url_ += "codes=" + encodeURIComponent("" + codes) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCodes(_response);
        });
    }

    protected processDeleteCodes(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Saves the codes.
     * @param entity The entity.
     * @return OK
     */
    saveCodes(isAdd: string, entity: EntBasCodes): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/SaveCodes?";
        if (isAdd === undefined || isAdd === null)
            throw new Error("The parameter 'isAdd' must be defined and cannot be null.");
        else
            url_ += "IsAdd=" + encodeURIComponent("" + isAdd) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveCodes(_response);
        });
    }

    protected processSaveCodes(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Saves the type of the code.
     * @param entity The entity.
     * @return OK
     */
    saveCodeType(isAdd: string, entity: EntBasCodetype): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/SaveCodeType?";
        if (isAdd === undefined || isAdd === null)
            throw new Error("The parameter 'isAdd' must be defined and cannot be null.");
        else
            url_ += "IsAdd=" + encodeURIComponent("" + isAdd) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveCodeType(_response);
        });
    }

    protected processSaveCodeType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据 CodeType 获取
     * @param code (optional) 
     * @param usd1 (optional) 
     * @return OK
     */
    getBasCodeByCodeType(codeType: string, code: string | null | undefined, usd1: string | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetBasCodeByCodeType?";
        if (codeType === undefined || codeType === null)
            throw new Error("The parameter 'codeType' must be defined and cannot be null.");
        else
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        if (usd1 !== undefined)
            url_ += "usd1=" + encodeURIComponent("" + usd1) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBasCodeByCodeType(_response);
        });
    }

    protected processGetBasCodeByCodeType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据 CodeType 获取
     * @param code (optional) 
     * @param name (optional) 
     * @return OK
     */
    getBasCodesByTypeAndCode(codeType: string, code: string | null | undefined, name: string | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetBasCodesByTypeAndCode?";
        if (codeType === undefined || codeType === null)
            throw new Error("The parameter 'codeType' must be defined and cannot be null.");
        else
            url_ += "codeType=" + encodeURIComponent("" + codeType) + "&"; 
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBasCodesByTypeAndCode(_response);
        });
    }

    protected processGetBasCodesByTypeAndCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据 CodeType 获取
     * @return OK
     */
    getBasCodeByCodeTypes(codeTypeList: string): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetBasCodeByCodeTypes?";
        if (codeTypeList === undefined || codeTypeList === null)
            throw new Error("The parameter 'codeTypeList' must be defined and cannot be null.");
        else
            url_ += "codeTypeList=" + encodeURIComponent("" + codeTypeList) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBasCodeByCodeTypes(_response);
        });
    }

    protected processGetBasCodeByCodeTypes(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取征免方式代码下拉绑定
     * @return OK
     */
    getLevyModeTypes(): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetLevyModeTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLevyModeTypes(_response);
        });
    }

    protected processGetLevyModeTypes(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取Ciq编码
     * @return OK
     */
    getCiqData(hsCode: string): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/GetCiqData?";
        if (hsCode === undefined || hsCode === null)
            throw new Error("The parameter 'hsCode' must be defined and cannot be null.");
        else
            url_ += "hsCode=" + encodeURIComponent("" + hsCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCiqData(_response);
        });
    }

    protected processGetCiqData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 初始化系统代码缓存
     * @return OK
     */
    initBasCodesCacheByClient(): Promise<any> {
        let url_ = this.baseUrl + "/CodeType/InitBasCodesCacheByClient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInitBasCodesCacheByClient(_response);
        });
    }

    protected processInitBasCodesCacheByClient(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/CodeType/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class CompanyFinanceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 删除企业财务
     * @return OK
     */
    delete(models: EntCustomsErpCompanyFinance[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/CompanyFinance/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    headSave(model: EntCustomsErpCompanyFinance): Promise<any> {
        let url_ = this.baseUrl + "/CompanyFinance/HeadSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadSave(_response);
        });
    }

    protected processHeadSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 导入企业财务数据
     * @return OK
     */
    batchinsert(models: EntCustomsErpCompanyFinance[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/CompanyFinance/batchinsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchinsert(_response);
        });
    }

    protected processBatchinsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/CompanyFinance/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    getList(model: EntCustomsErpCompanyFinance): Promise<any> {
        let url_ = this.baseUrl + "/CompanyFinance/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/CompanyFinance/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/CompanyFinance/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class ContractClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 新增
     * @return OK
     */
    insert(model: EntCustomsErpContract): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    update(model: EntCustomsErpContract): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(model: EntCustomsErpContract): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同主表协议关系数据
     * @return OK
     */
    datasInsert(models: EntCustomsErpContract[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/Contract/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsert(_response);
        });
    }

    protected processDatasInsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 新增
     * @return OK
     */
    insertList(model: EntCustomsErpContractList): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/insertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertList(_response);
        });
    }

    protected processInsertList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateList(model: EntCustomsErpContractList): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/updateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateList(_response);
        });
    }

    protected processUpdateList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteList(model: EntCustomsErpContractList): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/deleteList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUploadList(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Contract/updateUploadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadList(_response);
        });
    }

    protected processUpdateUploadList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同子表协议关系数据
     * @return OK
     */
    datasInsertList(models: EntCustomsErpContractList[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/Contract/DatasInsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsertList(_response);
        });
    }

    protected processDatasInsertList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntCustomsErpContract): Promise<any> {
        let url_ = this.baseUrl + "/Contract/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetByID(model: EntCustomsErpContract): Promise<any> {
        let url_ = this.baseUrl + "/Contract/QueryHeadPagerDataSetByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetList(model: EntCustomsErpContractList): Promise<any> {
        let url_ = this.baseUrl + "/Contract/QueryHeadPagerDataSetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetList(_response);
        });
    }

    protected processQueryHeadPagerDataSetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetListByID(model: EntCustomsErpContractList): Promise<any> {
        let url_ = this.baseUrl + "/Contract/QueryHeadPagerDataSetListByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetListByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetListByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/Contract/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSendList(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/Contract/QueryHeadPagerDataSetSendList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSendList(_response);
        });
    }

    protected processQueryHeadPagerDataSetSendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class CostAuditClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询审核明细
     * @return OK
     */
    getShBunessList(model: EntTgBusinessFee): Promise<any> {
        let url_ = this.baseUrl + "/CostAudit/GetShBunessList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetShBunessList(_response);
        });
    }

    protected processGetShBunessList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 审核
     * @return OK
     */
    updateheck(modelList: EntTgBusinessFee[]): Promise<any> {
        let url_ = this.baseUrl + "/CostAudit/Updateheck";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateheck(_response);
        });
    }

    protected processUpdateheck(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 审核
     * @return OK
     */
    updateQxCheck(modelList: EntTgBusinessFee[]): Promise<any> {
        let url_ = this.baseUrl + "/CostAudit/UpdateQxCheck";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateQxCheck(_response);
        });
    }

    protected processUpdateQxCheck(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 审核
     * @return OK
     */
    updateCostSettlemen(modelList: EntTgBusinessFee[]): Promise<any> {
        let url_ = this.baseUrl + "/CostAudit/UpdateCostSettlemen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCostSettlemen(_response);
        });
    }

    protected processUpdateCostSettlemen(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 审核
     * @return OK
     */
    updateQxCostSettlemen(modelList: EntTgBusinessFee[]): Promise<any> {
        let url_ = this.baseUrl + "/CostAudit/UpdateQxCostSettlemen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateQxCostSettlemen(_response);
        });
    }

    protected processUpdateQxCostSettlemen(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询结算明细
     * @return OK
     */
    getCostSettlementList(model: EntTgBusinessFee): Promise<any> {
        let url_ = this.baseUrl + "/CostAudit/GetCostSettlementList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCostSettlementList(_response);
        });
    }

    protected processGetCostSettlementList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/CostAudit/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class CusAsnHeaderClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询经营范围成品备案
     * @param model 查询参数
     * @return OK
     */
    queryTable(model: EntAppAsnTrace): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/QueryTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTable(_response);
        });
    }

    protected processQueryTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updateTable(model: EntAppAsnTrace): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/UpdateTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTable(_response);
        });
    }

    protected processUpdateTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 跟进导入
     * @return OK
     */
    excelDrTable(model: any): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/ExcelDrTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExcelDrTable(_response);
        });
    }

    protected processExcelDrTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询经营范围成品备案
     * @param model 查询参数
     * @return OK
     */
    queryOutTable(model: EntAppOutTrace): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/QueryOutTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryOutTable(_response);
        });
    }

    protected processQueryOutTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 跟进导入
     * @return OK
     */
    excelDrOutTable(model: any): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/ExcelDrOutTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExcelDrOutTable(_response);
        });
    }

    protected processExcelDrOutTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updateOutTable(model: EntAppOutTrace): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/UpdateOutTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateOutTable(_response);
        });
    }

    protected processUpdateOutTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getBunessList(model: EntTgBusinessFee): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/GetBunessList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBunessList(_response);
        });
    }

    protected processGetBunessList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryFeeListByID(model: EntTgBusinessFee): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/QueryFeeListByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryFeeListByID(_response);
        });
    }

    protected processQueryFeeListByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    deleteBusinessFee(id: string): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/DeleteBusinessFee/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBusinessFee(_response);
        });
    }

    protected processDeleteBusinessFee(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 批量导入
     * @return OK
     */
    importBusinessFee(model1: EntTgBusinessFee[]): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/ImportBusinessFee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model1);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportBusinessFee(_response);
        });
    }

    protected processImportBusinessFee(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增、修改用户基本信息
     * @return OK
     */
    saveBusinessFee(model1: EntTgBusinessFee[]): Promise<any> {
        let url_ = this.baseUrl + "/CusAsnHeader/SaveBusinessFee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model1);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveBusinessFee(_response);
        });
    }

    protected processSaveBusinessFee(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class CustomerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/Customer/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取用户查询列表分页数据
     * @param model 查询参数
     * @return OK
     */
    customerList(model: EntBasCustomer): Promise<any> {
        let url_ = this.baseUrl + "/Customer/CustomerList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCustomerList(_response);
        });
    }

    protected processCustomerList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增、修改用户基本信息
     * @param model 用户对象
     * @return OK
     */
    saveCustomer(model: EntBasCustomer): Promise<any> {
        let url_ = this.baseUrl + "/Customer/SaveCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveCustomer(_response);
        });
    }

    protected processSaveCustomer(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryCountByCustomerCode(customerCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Customer/QueryCountByCustomerCode?";
        if (customerCode === undefined || customerCode === null)
            throw new Error("The parameter 'customerCode' must be defined and cannot be null.");
        else
            url_ += "customerCode=" + encodeURIComponent("" + customerCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryCountByCustomerCode(_response);
        });
    }

    protected processQueryCountByCustomerCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除客户
     * @param i 客户代码
     * @return OK
     */
    deleteCustomer(i: string): Promise<any> {
        let url_ = this.baseUrl + "/Customer/DeleteCustomer?";
        if (i === undefined || i === null)
            throw new Error("The parameter 'i' must be defined and cannot be null.");
        else
            url_ += "i=" + encodeURIComponent("" + i) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCustomer(_response);
        });
    }

    protected processDeleteCustomer(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据条件查询 model table
     * @param model_customerCode (optional) 
     * @param model_customerNameCn (optional) 
     * @param model_customerType (optional) 
     * @param model_customerEN (optional) 
     * @param model_country (optional) 
     * @param model_province (optional) 
     * @param model_postcode (optional) 
     * @param model_city (optional) 
     * @param model_addressCn (optional) 
     * @param model_phone (optional) 
     * @param model_fax (optional) 
     * @param model_homePage (optional) 
     * @param model_financialCode (optional) 
     * @param model_eDICode (optional) 
     * @param model_serviceMan (optional) 
     * @param model_businessMan (optional) 
     * @param model_defaultPackage (optional) 
     * @param model_defaultProperty (optional) 
     * @param model_checkFlag (optional) 
     * @param model_creditCode (optional) 
     * @param model_curr (optional) 
     * @param model_createTime (optional) 
     * @param model_createBy (optional) 
     * @param model_editTime (optional) 
     * @param model_editBy (optional) 
     * @param model_shortName (optional) 
     * @param model_usd1 (optional) 
     * @param model_usd2 (optional) 
     * @param model_usd3 (optional) 
     * @param model_usd4 (optional) 
     * @param model_usd5 (optional) 
     * @param model_companyOf (optional) 
     * @param model_addressEn (optional) 
     * @param model_id (optional) 
     * @param model_shortEnName (optional) 
     * @param model_email (optional) 
     * @param model_pageSize (optional) 
     * @param model_pageIndex (optional) 
     * @param model_totalCount (optional) 
     * @return OK
     */
    getPageModelByParam(model_customerCode: string | null | undefined, model_customerNameCn: string | null | undefined, model_customerType: string | null | undefined, model_customerEN: string | null | undefined, model_country: string | null | undefined, model_province: string | null | undefined, model_postcode: string | null | undefined, model_city: string | null | undefined, model_addressCn: string | null | undefined, model_phone: string | null | undefined, model_fax: string | null | undefined, model_homePage: string | null | undefined, model_financialCode: string | null | undefined, model_eDICode: string | null | undefined, model_serviceMan: string | null | undefined, model_businessMan: string | null | undefined, model_defaultPackage: string | null | undefined, model_defaultProperty: string | null | undefined, model_checkFlag: string | null | undefined, model_creditCode: string | null | undefined, model_curr: string | null | undefined, model_createTime: Date | null | undefined, model_createBy: string | null | undefined, model_editTime: Date | null | undefined, model_editBy: string | null | undefined, model_shortName: string | null | undefined, model_usd1: string | null | undefined, model_usd2: string | null | undefined, model_usd3: string | null | undefined, model_usd4: string | null | undefined, model_usd5: string | null | undefined, model_companyOf: string | null | undefined, model_addressEn: string | null | undefined, model_id: number | null | undefined, model_shortEnName: string | null | undefined, model_email: string | null | undefined, model_pageSize: number | null | undefined, model_pageIndex: number | null | undefined, model_totalCount: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Customer/GetPageModelByParam/{Id}?";
        if (model_customerCode !== undefined)
            url_ += "model.customerCode=" + encodeURIComponent("" + model_customerCode) + "&"; 
        if (model_customerNameCn !== undefined)
            url_ += "model.customerNameCn=" + encodeURIComponent("" + model_customerNameCn) + "&"; 
        if (model_customerType !== undefined)
            url_ += "model.customerType=" + encodeURIComponent("" + model_customerType) + "&"; 
        if (model_customerEN !== undefined)
            url_ += "model.customerEN=" + encodeURIComponent("" + model_customerEN) + "&"; 
        if (model_country !== undefined)
            url_ += "model.country=" + encodeURIComponent("" + model_country) + "&"; 
        if (model_province !== undefined)
            url_ += "model.province=" + encodeURIComponent("" + model_province) + "&"; 
        if (model_postcode !== undefined)
            url_ += "model.postcode=" + encodeURIComponent("" + model_postcode) + "&"; 
        if (model_city !== undefined)
            url_ += "model.city=" + encodeURIComponent("" + model_city) + "&"; 
        if (model_addressCn !== undefined)
            url_ += "model.addressCn=" + encodeURIComponent("" + model_addressCn) + "&"; 
        if (model_phone !== undefined)
            url_ += "model.phone=" + encodeURIComponent("" + model_phone) + "&"; 
        if (model_fax !== undefined)
            url_ += "model.fax=" + encodeURIComponent("" + model_fax) + "&"; 
        if (model_homePage !== undefined)
            url_ += "model.homePage=" + encodeURIComponent("" + model_homePage) + "&"; 
        if (model_financialCode !== undefined)
            url_ += "model.financialCode=" + encodeURIComponent("" + model_financialCode) + "&"; 
        if (model_eDICode !== undefined)
            url_ += "model.eDICode=" + encodeURIComponent("" + model_eDICode) + "&"; 
        if (model_serviceMan !== undefined)
            url_ += "model.serviceMan=" + encodeURIComponent("" + model_serviceMan) + "&"; 
        if (model_businessMan !== undefined)
            url_ += "model.businessMan=" + encodeURIComponent("" + model_businessMan) + "&"; 
        if (model_defaultPackage !== undefined)
            url_ += "model.defaultPackage=" + encodeURIComponent("" + model_defaultPackage) + "&"; 
        if (model_defaultProperty !== undefined)
            url_ += "model.defaultProperty=" + encodeURIComponent("" + model_defaultProperty) + "&"; 
        if (model_checkFlag !== undefined)
            url_ += "model.checkFlag=" + encodeURIComponent("" + model_checkFlag) + "&"; 
        if (model_creditCode !== undefined)
            url_ += "model.creditCode=" + encodeURIComponent("" + model_creditCode) + "&"; 
        if (model_curr !== undefined)
            url_ += "model.curr=" + encodeURIComponent("" + model_curr) + "&"; 
        if (model_createTime !== undefined)
            url_ += "model.createTime=" + encodeURIComponent(model_createTime ? "" + model_createTime.toJSON() : "") + "&"; 
        if (model_createBy !== undefined)
            url_ += "model.createBy=" + encodeURIComponent("" + model_createBy) + "&"; 
        if (model_editTime !== undefined)
            url_ += "model.editTime=" + encodeURIComponent(model_editTime ? "" + model_editTime.toJSON() : "") + "&"; 
        if (model_editBy !== undefined)
            url_ += "model.editBy=" + encodeURIComponent("" + model_editBy) + "&"; 
        if (model_shortName !== undefined)
            url_ += "model.shortName=" + encodeURIComponent("" + model_shortName) + "&"; 
        if (model_usd1 !== undefined)
            url_ += "model.usd1=" + encodeURIComponent("" + model_usd1) + "&"; 
        if (model_usd2 !== undefined)
            url_ += "model.usd2=" + encodeURIComponent("" + model_usd2) + "&"; 
        if (model_usd3 !== undefined)
            url_ += "model.usd3=" + encodeURIComponent("" + model_usd3) + "&"; 
        if (model_usd4 !== undefined)
            url_ += "model.usd4=" + encodeURIComponent("" + model_usd4) + "&"; 
        if (model_usd5 !== undefined)
            url_ += "model.usd5=" + encodeURIComponent("" + model_usd5) + "&"; 
        if (model_companyOf !== undefined)
            url_ += "model.companyOf=" + encodeURIComponent("" + model_companyOf) + "&"; 
        if (model_addressEn !== undefined)
            url_ += "model.addressEn=" + encodeURIComponent("" + model_addressEn) + "&"; 
        if (model_id !== undefined)
            url_ += "model.id=" + encodeURIComponent("" + model_id) + "&"; 
        if (model_shortEnName !== undefined)
            url_ += "model.shortEnName=" + encodeURIComponent("" + model_shortEnName) + "&"; 
        if (model_email !== undefined)
            url_ += "model.email=" + encodeURIComponent("" + model_email) + "&"; 
        if (model_pageSize !== undefined)
            url_ += "model.pageSize=" + encodeURIComponent("" + model_pageSize) + "&"; 
        if (model_pageIndex !== undefined)
            url_ += "model.pageIndex=" + encodeURIComponent("" + model_pageIndex) + "&"; 
        if (model_totalCount !== undefined)
            url_ += "model.totalCount=" + encodeURIComponent("" + model_totalCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageModelByParam(_response);
        });
    }

    protected processGetPageModelByParam(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: RequestModelOfDataTable): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Customer/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取客户信息
     * @param edi 海关十位代码
     * @return OK
     */
    getCustomerByEdiCode(edi: string): Promise<any> {
        let url_ = this.baseUrl + "/Customer/GetCustomerByEdiCode?";
        if (edi === undefined || edi === null)
            throw new Error("The parameter 'edi' must be defined and cannot be null.");
        else
            url_ += "edi=" + encodeURIComponent("" + edi) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomerByEdiCode(_response);
        });
    }

    protected processGetCustomerByEdiCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Customer/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class CustomsErpPackingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(condition: EntCustomsErpPacking): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/ErpPacking/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    getList2(condition: EntCustomsErpSellerpkgdetail): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/ErpPacking/GetDetailList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList2(_response);
        });
    }

    protected processGetList2(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 保存表头
     * @return OK
     */
    save(model: EntCustomsErpPacking): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/SaveHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 保存表体
     * @return OK
     */
    save2(model: EntCustomsErpSellerpkgdetail): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/SaveDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave2(_response);
        });
    }

    protected processSave2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 保存表体List
     * @return OK
     */
    saveDetailList(models: EntCustomsErpSellerpkgdetail[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/ErpPacking/SaveDetailList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveDetailList(_response);
        });
    }

    protected processSaveDetailList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 保存表体List
     * @return OK
     */
    saveHeadList(models: EntCustomsErpPacking[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/ErpPacking/SaveHeadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveHeadList(_response);
        });
    }

    protected processSaveHeadList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 修改表头
     * @return OK
     */
    update(model: EntCustomsErpPacking): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/UpdateHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改表体
     * @return OK
     */
    update2(model: EntCustomsErpSellerpkgdetail): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/UpdateDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate2(_response);
        });
    }

    protected processUpdate2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除表头
     * @return OK
     */
    deleteHead(model: EntCustomsErpPacking): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/DeleteHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteHead(_response);
        });
    }

    protected processDeleteHead(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除表体
     * @return OK
     */
    deleteDetail(model: EntCustomsErpSellerpkgdetail): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/DeleteDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDetail(_response);
        });
    }

    protected processDeleteDetail(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    send(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/ErpPacking/Send";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSend(_response);
        });
    }

    protected processSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    sendList(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/ErpPacking/SendList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendList(_response);
        });
    }

    protected processSendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除表体
     * @return OK
     */
    updateUploadFlagList(ids: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/UploadFlagList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadFlagList(_response);
        });
    }

    protected processUpdateUploadFlagList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除表体
     * @return OK
     */
    updateUploadFlag(ids: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpPacking/UploadFlag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadFlag(_response);
        });
    }

    protected processUpdateUploadFlag(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/CustomsErpPacking/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class DataDockingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 修改
     * @return OK
     */
    updateUploadImPort(idList: EntInnerAseshJmyImportInfo[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/MaterialRelation/updateUploadImPort";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadImPort(_response);
        });
    }

    protected processUpdateUploadImPort(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUploadExPort(idList: EntInnerAseshJmyExportInfo[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/MaterialRelation/updateUploadExPort";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadExPort(_response);
        });
    }

    protected processUpdateUploadExPort(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyErpBomList(model: EntInnerAseshJmyErpBom): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyErpBomList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyErpBomList(_response);
        });
    }

    protected processGetInnerAseshJmyErpBomList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyWaferQtyList(model: EntInnerAseshJmyWaferQty): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyWaferQtyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyWaferQtyList(_response);
        });
    }

    protected processGetInnerAseshJmyWaferQtyList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyWORKBomList(model: EntInnerAseshJmyWorkBom): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyWORKBomList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyWORKBomList(_response);
        });
    }

    protected processGetInnerAseshJmyWORKBomList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    btnworkbomChuWORKBomList(model: EntInnerAseshJmyWorkBom): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/btnworkbomChuWORKBomList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBtnworkbomChuWORKBomList(_response);
        });
    }

    protected processBtnworkbomChuWORKBomList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyImPortList(model: EntInnerAseshJmyImportInfo): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyImPortList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyImPortList(_response);
        });
    }

    protected processGetInnerAseshJmyImPortList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyExPortList(model: EntInnerAseshJmyExportInfo): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyExPortList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyExPortList(_response);
        });
    }

    protected processGetInnerAseshJmyExPortList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyLogList(model: EntInnerAseshJmyLog): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyLogList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyLogList(_response);
        });
    }

    protected processGetInnerAseshJmyLogList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 判断是否更新配置
     * @return OK
     */
    saveConfigOrUpdate(model: EntInnerAseshJmyConfig[]): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/SaveConfigOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveConfigOrUpdate(_response);
        });
    }

    protected processSaveConfigOrUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyConfigList(model: EntInnerAseshJmyConfig): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyConfigList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyConfigList(_response);
        });
    }

    protected processGetInnerAseshJmyConfigList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInnerAseshJmyConfigByType(type: number): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetInnerAseshJmyConfigByType?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInnerAseshJmyConfigByType(_response);
        });
    }

    protected processGetInnerAseshJmyConfigByType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getUrl(): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GetUrl";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUrl(_response);
        });
    }

    protected processGetUrl(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    generateBom(emsNo: string, userName: string): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/GenerateBom?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined and cannot be null.");
        else
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateBom(_response);
        });
    }

    protected processGenerateBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 手动同步备案资料
     * @return OK
     */
    syncEpassInnerDataRecord(emsNo: string): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/SyncEpassInnerDataRecord?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSyncEpassInnerDataRecord(_response);
        });
    }

    protected processSyncEpassInnerDataRecord(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 定时任务数据处理
     * @return OK
     */
    epassInnerDataRecordScheduler(): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/EpassInnerDataRecordScheduler";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEpassInnerDataRecordScheduler(_response);
        });
    }

    protected processEpassInnerDataRecordScheduler(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    syncWaferQty(): Promise<any> {
        let url_ = this.baseUrl + "/DataDocking/SyncWaferQty";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSyncWaferQty(_response);
        });
    }

    protected processSyncWaferQty(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/DataDocking/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class DeclareClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询报核
     * @return OK
     */
    query(request: SearchRequest): Promise<ReturnResultOfPageListOfEntGoldenDcrHead> {
        let url_ = this.baseUrl + "/declare/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntGoldenDcrHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenDcrHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenDcrHead>(<any>null);
    }

    /**
     * 查询报核
     * @return OK
     */
    queryDataTable(mdoel: EntGoldenDcrHead): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/declare/queryDataTable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(mdoel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryDataTable(_response);
        });
    }

    protected processQueryDataTable(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 新增报核
     * @return OK
     */
    insert(model: EntGoldenDcrHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/declare/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改报核
     * @return OK
     */
    update(model: EntGoldenDcrHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/declare/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除报核
     * @return OK
     */
    delete(models: EntGoldenDcrHead[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/declare/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询报核清单
     * @return OK
     */
    queryBill(hidHeadId: number, billNo: string, ieFlag: string, dclType: string): Promise<ReturnResultOfPageListOfEntGoldenDcrBill> {
        let url_ = this.baseUrl + "/declare/QueryBill?";
        if (hidHeadId === undefined || hidHeadId === null)
            throw new Error("The parameter 'hidHeadId' must be defined and cannot be null.");
        else
            url_ += "HidHeadId=" + encodeURIComponent("" + hidHeadId) + "&"; 
        if (billNo === undefined || billNo === null)
            throw new Error("The parameter 'billNo' must be defined and cannot be null.");
        else
            url_ += "billNo=" + encodeURIComponent("" + billNo) + "&"; 
        if (ieFlag === undefined || ieFlag === null)
            throw new Error("The parameter 'ieFlag' must be defined and cannot be null.");
        else
            url_ += "IeFlag=" + encodeURIComponent("" + ieFlag) + "&"; 
        if (dclType === undefined || dclType === null)
            throw new Error("The parameter 'dclType' must be defined and cannot be null.");
        else
            url_ += "DclType=" + encodeURIComponent("" + dclType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBill(_response);
        });
    }

    protected processQueryBill(response: Response): Promise<ReturnResultOfPageListOfEntGoldenDcrBill> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenDcrBill.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenDcrBill>(<any>null);
    }

    /**
     * 新增核清单
     * @return OK
     */
    insertBill(model: EntGoldenDcrBill): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/declare/insertbill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBill(_response);
        });
    }

    protected processInsertBill(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改报核
     * @return OK
     */
    updateBill(model: EntGoldenDcrBill): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/declare/updatebill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBill(_response);
        });
    }

    protected processUpdateBill(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除报核
     * @return OK
     */
    deleteBill(models: EntGoldenDcrBill[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/declare/deletebill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBill(_response);
        });
    }

    protected processDeleteBill(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 新增报核料件
     * @return OK
     */
    insertImg(model: EntGoldenDcrImg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/declare/insertimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertImg(_response);
        });
    }

    protected processInsertImg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改报核
     * @return OK
     */
    updateImg(model: EntGoldenDcrImg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/declare/updateimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateImg(_response);
        });
    }

    protected processUpdateImg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除报核
     * @return OK
     */
    deleteImg(models: EntGoldenDcrImg[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/declare/deleteimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteImg(_response);
        });
    }

    protected processDeleteImg(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 获取预录入统一编号
     * @return OK
     */
    getSeqNo(): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/declare/getseqno";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSeqNo(_response);
        });
    }

    protected processGetSeqNo(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntGoldenDcrHead): Promise<any> {
        let url_ = this.baseUrl + "/Declare/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getDcrHead(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Declare/GetDcrHead/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDcrHead(_response);
        });
    }

    protected processGetDcrHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getBill(imgId: string): Promise<any> {
        let url_ = this.baseUrl + "/Declare/GetBill?";
        if (imgId === undefined || imgId === null)
            throw new Error("The parameter 'imgId' must be defined and cannot be null.");
        else
            url_ += "imgId=" + encodeURIComponent("" + imgId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBill(_response);
        });
    }

    protected processGetBill(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 通过账册编号获取表头数据
     * @param erpNo 查询参数
     * @return OK
     */
    getOrgHeadByEmsNo(erpNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Declare/GetOrgHeadByEmsNo?";
        if (erpNo === undefined || erpNo === null)
            throw new Error("The parameter 'erpNo' must be defined and cannot be null.");
        else
            url_ += "erpNo=" + encodeURIComponent("" + erpNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrgHeadByEmsNo(_response);
        });
    }

    protected processGetOrgHeadByEmsNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 导入表体清单
     * @return OK
     */
    billCopGNo(request: EntGoldenDcrBillImgexginnerExt): Promise<any> {
        let url_ = this.baseUrl + "/Declare/BillCopGNo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBillCopGNo(_response);
        });
    }

    protected processBillCopGNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询报核料件
     * @return OK
     */
    queryImgs(hidHeadId: number, copGNo: string, gName: string, hscode: string): Promise<ReturnResultOfPageListOfEntGoldenDcrImg> {
        let url_ = this.baseUrl + "/Declare/QueryImgs?";
        if (hidHeadId === undefined || hidHeadId === null)
            throw new Error("The parameter 'hidHeadId' must be defined and cannot be null.");
        else
            url_ += "HidHeadId=" + encodeURIComponent("" + hidHeadId) + "&"; 
        if (copGNo === undefined || copGNo === null)
            throw new Error("The parameter 'copGNo' must be defined and cannot be null.");
        else
            url_ += "CopGNo=" + encodeURIComponent("" + copGNo) + "&"; 
        if (gName === undefined || gName === null)
            throw new Error("The parameter 'gName' must be defined and cannot be null.");
        else
            url_ += "GName=" + encodeURIComponent("" + gName) + "&"; 
        if (hscode === undefined || hscode === null)
            throw new Error("The parameter 'hscode' must be defined and cannot be null.");
        else
            url_ += "Hscode=" + encodeURIComponent("" + hscode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgs(_response);
        });
    }

    protected processQueryImgs(response: Response): Promise<ReturnResultOfPageListOfEntGoldenDcrImg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenDcrImg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenDcrImg>(<any>null);
    }

    /**
     * 查询报核料件
     * @return OK
     */
    getImg(imgId: string): Promise<ReturnResultOfPageListOfEntGoldenDcrImg> {
        let url_ = this.baseUrl + "/Declare/GetImg?";
        if (imgId === undefined || imgId === null)
            throw new Error("The parameter 'imgId' must be defined and cannot be null.");
        else
            url_ += "imgId=" + encodeURIComponent("" + imgId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImg(_response);
        });
    }

    protected processGetImg(response: Response): Promise<ReturnResultOfPageListOfEntGoldenDcrImg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenDcrImg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenDcrImg>(<any>null);
    }

    /**
     * 导入表体清单
     * @return OK
     */
    impOrgBom(request: EntGoldenDcrImgexginnerExt): Promise<any> {
        let url_ = this.baseUrl + "/Declare/ImpOrgBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImpOrgBom(_response);
        });
    }

    protected processImpOrgBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class DeducCodeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getAllList(): Promise<any> {
        let url_ = this.baseUrl + "/DeducCode/GetAllList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllList(_response);
        });
    }

    protected processGetAllList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/DeducCode/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class DeptClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取所有部门
     * @return OK
     */
    getAllDeptList(): Promise<any> {
        let url_ = this.baseUrl + "/Dept/GetAllDeptList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllDeptList(_response);
        });
    }

    protected processGetAllDeptList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询部门列表
     * @return OK
     */
    getPageDeptList(model: EntSysDept): Promise<any> {
        let url_ = this.baseUrl + "/Dept/GetPageDeptList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageDeptList(_response);
        });
    }

    protected processGetPageDeptList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除部门
     * @return OK
     */
    deleteDept(model: EntSysDept): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Dept/DeleteDept";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDept(_response);
        });
    }

    protected processDeleteDept(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 编辑部门
     * @return OK
     */
    saveDept(model: EntSysDept): Promise<any> {
        let url_ = this.baseUrl + "/Dept/SaveDept";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveDept(_response);
        });
    }

    protected processSaveDept(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class DomesticSaleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    queryPrice(condition: EntGoldenNxbsPrice): Promise<ReturnResultOfPageListOfEntGoldenNxbsPrice> {
        let url_ = this.baseUrl + "/domesticsale/querypricelist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPrice(_response);
        });
    }

    protected processQueryPrice(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsPrice> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsPrice.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsPrice>(<any>null);
    }

    /**
     * 内销金额统计
     * @return OK
     */
    priceCollectList(condition: EntGoldenNxbsImgCollect): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/domesticsale/querypricecollectlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPriceCollectList(_response);
        });
    }

    protected processPriceCollectList(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    updatePrice(prices: EntGoldenNxbsPrice): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/updateprice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(prices);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePrice(_response);
        });
    }

    protected processUpdatePrice(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 更新确认价格
     * @return OK
     */
    updateConfirmPrice(prices: EntGoldenNxbsPrice[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/updateconfirmprice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(prices);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateConfirmPrice(_response);
        });
    }

    protected processUpdateConfirmPrice(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 更新单位净重
     * @return OK
     */
    updateNetWeight(prices: EntGoldenNxbsPrice[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/UpdateNetWeight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(prices);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateNetWeight(_response);
        });
    }

    protected processUpdateNetWeight(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 确认价格
     * @return OK
     */
    confirmPrice(prices: number[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/confirmprice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(prices);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirmPrice(_response);
        });
    }

    protected processConfirmPrice(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 内销价格计算
     * @return OK
     */
    calculatePrice(headId: string, createUser: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/domesticsale/calculateprice?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (createUser === undefined || createUser === null)
            throw new Error("The parameter 'createUser' must be defined and cannot be null.");
        else
            url_ += "createUser=" + encodeURIComponent("" + createUser) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCalculatePrice(_response);
        });
    }

    protected processCalculatePrice(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    queryEntry(condition: EntGoldenNxbsEntryHead): Promise<ReturnResultOfPageListOfEntGoldenNxbsEntryHead> {
        let url_ = this.baseUrl + "/domesticsale/queryentrylist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryEntry(_response);
        });
    }

    protected processQueryEntry(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsEntryHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsEntryHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsEntryHead>(<any>null);
    }

    /**
     * 提取报关单
     * @return OK
     */
    entryExtract(headId: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/domesticsale/entryextract?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEntryExtract(_response);
        });
    }

    protected processEntryExtract(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    nXBillNO(condition: EntGoldenNxbsMatch): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/domesticsale/nxbillno";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNXBillNO(_response);
        });
    }

    protected processNXBillNO(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 查询内销表头
     * @return OK
     */
    query(request: SearchRequest): Promise<ReturnResultOfPageListOfEntGoldenNxbsHead> {
        let url_ = this.baseUrl + "/domesticsale/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsHead>(<any>null);
    }

    /**
     * 新增内销
     * @return OK
     */
    insert(model: EntGoldenNxbsHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改内销
     * @return OK
     */
    update(model: EntGoldenNxbsHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除内销
     * @return OK
     */
    delete(models: EntGoldenNxbsHead[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 是否删除
     * @return OK
     */
    isDelete(id: number): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/isdelete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIsDelete(_response);
        });
    }

    protected processIsDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询内销货物
     * @param headerId 表头
     * @return OK
     */
    queryStockExgs(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenNxbsExg> {
        let url_ = this.baseUrl + "/domesticsale/queryexg/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockExgs(_response);
        });
    }

    protected processQueryStockExgs(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsExg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsExg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsExg>(<any>null);
    }

    /**
     * 查询内销货物
     * @param condition 表头
     * @return OK
     */
    queryStockExgsList(condition: EntGoldenNxbsExg): Promise<ReturnResultOfPageListOfEntGoldenNxbsExg> {
        let url_ = this.baseUrl + "/domesticsale/queryexglist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockExgsList(_response);
        });
    }

    protected processQueryStockExgsList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsExg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsExg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsExg>(<any>null);
    }

    /**
     * 新增内销货物
     * @return OK
     */
    insertStockInitial(model: EntGoldenNxbsExg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertexg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockInitial(_response);
        });
    }

    protected processInsertStockInitial(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增内销货物
     * @return OK
     */
    insertStockInitialMany(models: EntGoldenNxbsExg[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertexgmany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockInitialMany(_response);
        });
    }

    protected processInsertStockInitialMany(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改内销货物
     * @return OK
     */
    updateStockInitial(model: EntGoldenNxbsExg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/updateexg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStockInitial(_response);
        });
    }

    protected processUpdateStockInitial(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除内销货物
     * @return OK
     */
    deleteStockInitial(models: EntGoldenNxbsExg[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/deleteexg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStockInitial(_response);
        });
    }

    protected processDeleteStockInitial(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询内销料件
     * @return OK
     */
    queryImgs(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenNxbsImg> {
        let url_ = this.baseUrl + "/domesticsale/queryimg/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgs(_response);
        });
    }

    protected processQueryImgs(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsImg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsImg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsImg>(<any>null);
    }

    /**
     * 查询内销料件
     * @return OK
     */
    queryImgsList(condition: EntGoldenNxbsImg): Promise<ReturnResultOfPageListOfEntGoldenNxbsImg> {
        let url_ = this.baseUrl + "/domesticsale/queryimgslist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgsList(_response);
        });
    }

    protected processQueryImgsList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsImg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsImg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsImg>(<any>null);
    }

    /**
     * 新增内销料件
     * @return OK
     */
    insertImg(model: EntGoldenNxbsImg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertImg(_response);
        });
    }

    protected processInsertImg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增内销料件
     * @return OK
     */
    insertImg2(models: EntGoldenNxbsImg[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertimgmany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertImg2(_response);
        });
    }

    protected processInsertImg2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改内销
     * @return OK
     */
    updateImg(model: EntGoldenNxbsImg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/updateimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateImg(_response);
        });
    }

    protected processUpdateImg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除内销
     * @return OK
     */
    deleteImg(models: EntGoldenNxbsImg[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/deleteimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteImg(_response);
        });
    }

    protected processDeleteImg(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询BOM
     * @param headerId 表头
     * @return OK
     */
    queryBoms(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenNxbsBom> {
        let url_ = this.baseUrl + "/domesticsale/querybom/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBoms(_response);
        });
    }

    protected processQueryBoms(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsBom> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsBom.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsBom>(<any>null);
    }

    /**
     * 查询BOM
     * @param condition 表头
     * @return OK
     */
    queryBomsList(condition: EntGoldenNxbsBom): Promise<ReturnResultOfPageListOfEntGoldenNxbsBom> {
        let url_ = this.baseUrl + "/domesticsale/querybomlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBomsList(_response);
        });
    }

    protected processQueryBomsList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsBom> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsBom.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsBom>(<any>null);
    }

    /**
     * 新增BOM
     * @return OK
     */
    insertBom(model: EntGoldenNxbsBom): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertbom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBom(_response);
        });
    }

    protected processInsertBom(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增BOM
     * @return OK
     */
    insertBomMany(models: EntGoldenNxbsBom[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertbommany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBomMany(_response);
        });
    }

    protected processInsertBomMany(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改BOM
     * @return OK
     */
    updateBom(model: EntGoldenNxbsBom): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/updatebom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBom(_response);
        });
    }

    protected processUpdateBom(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除BOM
     * @return OK
     */
    deleteBom(models: EntGoldenNxbsBom[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/deletebom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBom(_response);
        });
    }

    protected processDeleteBom(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询内销数量统计
     * @param headerId 表头
     * @return OK
     */
    queryImgCollects(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenNxbsImgCollect> {
        let url_ = this.baseUrl + "/domesticsale/queryimgcollect/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgCollects(_response);
        });
    }

    protected processQueryImgCollects(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsImgCollect> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsImgCollect.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsImgCollect>(<any>null);
    }

    /**
     * 查询内销数量统计
     * @param condition 表头
     * @return OK
     */
    queryImgCollectsList(condition: EntGoldenNxbsImgCollect): Promise<ReturnResultOfPageListOfEntGoldenNxbsImgCollect> {
        let url_ = this.baseUrl + "/domesticsale/queryimgcollectlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgCollectsList(_response);
        });
    }

    protected processQueryImgCollectsList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsImgCollect> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsImgCollect.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsImgCollect>(<any>null);
    }

    /**
     * 新增内销数量统计
     * @return OK
     */
    insertImgCollect(model: EntGoldenNxbsImgCollect): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/insertimgcollect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertImgCollect(_response);
        });
    }

    protected processInsertImgCollect(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改内销数量统计
     * @return OK
     */
    updateImgCollect(model: EntGoldenNxbsImgCollect): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/domesticsale/updateimgcollect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateImgCollect(_response);
        });
    }

    protected processUpdateImgCollect(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除内销数量统计
     * @return OK
     */
    deleteImgCollect(models: EntGoldenNxbsImgCollect[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/deleteimgcollect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteImgCollect(_response);
        });
    }

    protected processDeleteImgCollect(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 内销统计
     * @return OK
     */
    nxbsCollect(headId: string, createUser: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/domesticsale/NxbsCollect?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (createUser === undefined || createUser === null)
            throw new Error("The parameter 'createUser' must be defined and cannot be null.");
        else
            url_ += "createUser=" + encodeURIComponent("" + createUser) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNxbsCollect(_response);
        });
    }

    protected processNxbsCollect(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 内销匹配表
     * @param condition 表头
     * @return OK
     */
    queryMatchList(condition: EntGoldenNxbsHead): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/domesticsale/querymatchlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryMatchList(_response);
        });
    }

    protected processQueryMatchList(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    insideSaleRecordQuery(condition: EntGoldenNxbsInvoiceHead): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/domesticsale/insidesalerecordquery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsideSaleRecordQuery(_response);
        });
    }

    protected processInsideSaleRecordQuery(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    getInvoiceHead(id: number): Promise<ReturnResultOfEntGoldenNxbsInvoiceHead> {
        let url_ = this.baseUrl + "/domesticsale/GetInvoiceHead?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInvoiceHead(_response);
        });
    }

    protected processGetInvoiceHead(response: Response): Promise<ReturnResultOfEntGoldenNxbsInvoiceHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntGoldenNxbsInvoiceHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntGoldenNxbsInvoiceHead>(<any>null);
    }

    /**
     * @param condition_registrationNum (optional) 
     * @param condition_matchState (optional) 
     * @param condition_copGNo (optional) 
     * @param condition_gName (optional) 
     * @param condition_id (optional) 
     * @param condition_entryId (optional) 
     * @param condition_invoiceNo (optional) 
     * @param condition_orderNo (optional) 
     * @param condition_ieFlag (optional) 
     * @param condition_emsNo (optional) 
     * @param condition_nxFlag (optional) 
     * @param condition_netWt (optional) 
     * @param condition_grossWt (optional) 
     * @param condition_dOZEN (optional) 
     * @param condition_packageType (optional) 
     * @param condition_tradeTotal (optional) 
     * @param condition_cURR (optional) 
     * @param condition_fobType (optional) 
     * @param condition_customTax (optional) 
     * @param condition_addTax (optional) 
     * @param condition_payAddTax (optional) 
     * @param condition_transMode (optional) 
     * @param condition_inDate (optional) 
     * @param condition_dataCenterId (optional) 
     * @param condition_payCustomTax (optional) 
     * @param condition_customTaxInterest (optional) 
     * @param condition_addTaxInterest (optional) 
     * @param condition_agentCode (optional) 
     * @param condition_agentCredit (optional) 
     * @param condition_agentName (optional) 
     * @param condition_tradeMode (optional) 
     * @param condition_dDate (optional) 
     * @param condition_hxRelationNo (optional) 
     * @param condition_easeInterest (optional) 
     * @param condition_tradeCode (optional) 
     * @param condition_tradeCredit (optional) 
     * @param condition_tradeName (optional) 
     * @param condition_receiveCode (optional) 
     * @param condition_receiveCredit (optional) 
     * @param condition_receiveName (optional) 
     * @param condition_headId (optional) 
     * @param condition_sendCustomDate (optional) 
     * @param condition_sendCustomFlag (optional) 
     * @param condition_createUser (optional) 
     * @param condition_createTime (optional) 
     * @param condition_updateTime (optional) 
     * @param condition_updateUser (optional) 
     * @param condition_pageSize (optional) 
     * @param condition_pageIndex (optional) 
     * @param condition_totalCount (optional) 
     * @return OK
     */
    getInvoiceBody(condition_registrationNum: string | null | undefined, condition_matchState: string | null | undefined, condition_copGNo: string | null | undefined, condition_gName: string | null | undefined, condition_id: number | null | undefined, condition_entryId: string | null | undefined, condition_invoiceNo: string | null | undefined, condition_orderNo: string | null | undefined, condition_ieFlag: string | null | undefined, condition_emsNo: string | null | undefined, condition_nxFlag: string | null | undefined, condition_netWt: number | null | undefined, condition_grossWt: number | null | undefined, condition_dOZEN: string | null | undefined, condition_packageType: string | null | undefined, condition_tradeTotal: number | null | undefined, condition_cURR: string | null | undefined, condition_fobType: string | null | undefined, condition_customTax: number | null | undefined, condition_addTax: number | null | undefined, condition_payAddTax: number | null | undefined, condition_transMode: string | null | undefined, condition_inDate: string | null | undefined, condition_dataCenterId: string | null | undefined, condition_payCustomTax: number | null | undefined, condition_customTaxInterest: number | null | undefined, condition_addTaxInterest: number | null | undefined, condition_agentCode: string | null | undefined, condition_agentCredit: string | null | undefined, condition_agentName: string | null | undefined, condition_tradeMode: string | null | undefined, condition_dDate: string | null | undefined, condition_hxRelationNo: string | null | undefined, condition_easeInterest: string | null | undefined, condition_tradeCode: string | null | undefined, condition_tradeCredit: string | null | undefined, condition_tradeName: string | null | undefined, condition_receiveCode: string | null | undefined, condition_receiveCredit: string | null | undefined, condition_receiveName: string | null | undefined, condition_headId: number | null | undefined, condition_sendCustomDate: Date | null | undefined, condition_sendCustomFlag: string | null | undefined, condition_createUser: string | null | undefined, condition_createTime: Date | null | undefined, condition_updateTime: Date | null | undefined, condition_updateUser: string | null | undefined, condition_pageSize: number | null | undefined, condition_pageIndex: number | null | undefined, condition_totalCount: number | null | undefined): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/domesticsale/QueryInvoiceBody?";
        if (condition_registrationNum !== undefined)
            url_ += "condition.registrationNum=" + encodeURIComponent("" + condition_registrationNum) + "&"; 
        if (condition_matchState !== undefined)
            url_ += "condition.matchState=" + encodeURIComponent("" + condition_matchState) + "&"; 
        if (condition_copGNo !== undefined)
            url_ += "condition.copGNo=" + encodeURIComponent("" + condition_copGNo) + "&"; 
        if (condition_gName !== undefined)
            url_ += "condition.gName=" + encodeURIComponent("" + condition_gName) + "&"; 
        if (condition_id !== undefined)
            url_ += "condition.id=" + encodeURIComponent("" + condition_id) + "&"; 
        if (condition_entryId !== undefined)
            url_ += "condition.entryId=" + encodeURIComponent("" + condition_entryId) + "&"; 
        if (condition_invoiceNo !== undefined)
            url_ += "condition.invoiceNo=" + encodeURIComponent("" + condition_invoiceNo) + "&"; 
        if (condition_orderNo !== undefined)
            url_ += "condition.orderNo=" + encodeURIComponent("" + condition_orderNo) + "&"; 
        if (condition_ieFlag !== undefined)
            url_ += "condition.ieFlag=" + encodeURIComponent("" + condition_ieFlag) + "&"; 
        if (condition_emsNo !== undefined)
            url_ += "condition.emsNo=" + encodeURIComponent("" + condition_emsNo) + "&"; 
        if (condition_nxFlag !== undefined)
            url_ += "condition.nxFlag=" + encodeURIComponent("" + condition_nxFlag) + "&"; 
        if (condition_netWt !== undefined)
            url_ += "condition.netWt=" + encodeURIComponent("" + condition_netWt) + "&"; 
        if (condition_grossWt !== undefined)
            url_ += "condition.grossWt=" + encodeURIComponent("" + condition_grossWt) + "&"; 
        if (condition_dOZEN !== undefined)
            url_ += "condition.dOZEN=" + encodeURIComponent("" + condition_dOZEN) + "&"; 
        if (condition_packageType !== undefined)
            url_ += "condition.packageType=" + encodeURIComponent("" + condition_packageType) + "&"; 
        if (condition_tradeTotal !== undefined)
            url_ += "condition.tradeTotal=" + encodeURIComponent("" + condition_tradeTotal) + "&"; 
        if (condition_cURR !== undefined)
            url_ += "condition.cURR=" + encodeURIComponent("" + condition_cURR) + "&"; 
        if (condition_fobType !== undefined)
            url_ += "condition.fobType=" + encodeURIComponent("" + condition_fobType) + "&"; 
        if (condition_customTax !== undefined)
            url_ += "condition.customTax=" + encodeURIComponent("" + condition_customTax) + "&"; 
        if (condition_addTax !== undefined)
            url_ += "condition.addTax=" + encodeURIComponent("" + condition_addTax) + "&"; 
        if (condition_payAddTax !== undefined)
            url_ += "condition.payAddTax=" + encodeURIComponent("" + condition_payAddTax) + "&"; 
        if (condition_transMode !== undefined)
            url_ += "condition.transMode=" + encodeURIComponent("" + condition_transMode) + "&"; 
        if (condition_inDate !== undefined)
            url_ += "condition.inDate=" + encodeURIComponent("" + condition_inDate) + "&"; 
        if (condition_dataCenterId !== undefined)
            url_ += "condition.dataCenterId=" + encodeURIComponent("" + condition_dataCenterId) + "&"; 
        if (condition_payCustomTax !== undefined)
            url_ += "condition.payCustomTax=" + encodeURIComponent("" + condition_payCustomTax) + "&"; 
        if (condition_customTaxInterest !== undefined)
            url_ += "condition.customTaxInterest=" + encodeURIComponent("" + condition_customTaxInterest) + "&"; 
        if (condition_addTaxInterest !== undefined)
            url_ += "condition.addTaxInterest=" + encodeURIComponent("" + condition_addTaxInterest) + "&"; 
        if (condition_agentCode !== undefined)
            url_ += "condition.agentCode=" + encodeURIComponent("" + condition_agentCode) + "&"; 
        if (condition_agentCredit !== undefined)
            url_ += "condition.agentCredit=" + encodeURIComponent("" + condition_agentCredit) + "&"; 
        if (condition_agentName !== undefined)
            url_ += "condition.agentName=" + encodeURIComponent("" + condition_agentName) + "&"; 
        if (condition_tradeMode !== undefined)
            url_ += "condition.tradeMode=" + encodeURIComponent("" + condition_tradeMode) + "&"; 
        if (condition_dDate !== undefined)
            url_ += "condition.dDate=" + encodeURIComponent("" + condition_dDate) + "&"; 
        if (condition_hxRelationNo !== undefined)
            url_ += "condition.hxRelationNo=" + encodeURIComponent("" + condition_hxRelationNo) + "&"; 
        if (condition_easeInterest !== undefined)
            url_ += "condition.easeInterest=" + encodeURIComponent("" + condition_easeInterest) + "&"; 
        if (condition_tradeCode !== undefined)
            url_ += "condition.tradeCode=" + encodeURIComponent("" + condition_tradeCode) + "&"; 
        if (condition_tradeCredit !== undefined)
            url_ += "condition.tradeCredit=" + encodeURIComponent("" + condition_tradeCredit) + "&"; 
        if (condition_tradeName !== undefined)
            url_ += "condition.tradeName=" + encodeURIComponent("" + condition_tradeName) + "&"; 
        if (condition_receiveCode !== undefined)
            url_ += "condition.receiveCode=" + encodeURIComponent("" + condition_receiveCode) + "&"; 
        if (condition_receiveCredit !== undefined)
            url_ += "condition.receiveCredit=" + encodeURIComponent("" + condition_receiveCredit) + "&"; 
        if (condition_receiveName !== undefined)
            url_ += "condition.receiveName=" + encodeURIComponent("" + condition_receiveName) + "&"; 
        if (condition_headId !== undefined)
            url_ += "condition.headId=" + encodeURIComponent("" + condition_headId) + "&"; 
        if (condition_sendCustomDate !== undefined)
            url_ += "condition.sendCustomDate=" + encodeURIComponent(condition_sendCustomDate ? "" + condition_sendCustomDate.toJSON() : "") + "&"; 
        if (condition_sendCustomFlag !== undefined)
            url_ += "condition.sendCustomFlag=" + encodeURIComponent("" + condition_sendCustomFlag) + "&"; 
        if (condition_createUser !== undefined)
            url_ += "condition.createUser=" + encodeURIComponent("" + condition_createUser) + "&"; 
        if (condition_createTime !== undefined)
            url_ += "condition.createTime=" + encodeURIComponent(condition_createTime ? "" + condition_createTime.toJSON() : "") + "&"; 
        if (condition_updateTime !== undefined)
            url_ += "condition.updateTime=" + encodeURIComponent(condition_updateTime ? "" + condition_updateTime.toJSON() : "") + "&"; 
        if (condition_updateUser !== undefined)
            url_ += "condition.updateUser=" + encodeURIComponent("" + condition_updateUser) + "&"; 
        if (condition_pageSize !== undefined)
            url_ += "condition.pageSize=" + encodeURIComponent("" + condition_pageSize) + "&"; 
        if (condition_pageIndex !== undefined)
            url_ += "condition.pageIndex=" + encodeURIComponent("" + condition_pageIndex) + "&"; 
        if (condition_totalCount !== undefined)
            url_ += "condition.totalCount=" + encodeURIComponent("" + condition_totalCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInvoiceBody(_response);
        });
    }

    protected processGetInvoiceBody(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    matchDetailQuery(condition: EntGoldenNxbsMatch): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/domesticsale/matchdetailquery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMatchDetailQuery(_response);
        });
    }

    protected processMatchDetailQuery(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    queryConvertList(condition: EntGoldenNxbsConvert): Promise<ReturnResultOfPageListOfEntGoldenNxbsConvert> {
        let url_ = this.baseUrl + "/domesticsale/queryconvertlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryConvertList(_response);
        });
    }

    protected processQueryConvertList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsConvert> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsConvert.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsConvert>(<any>null);
    }

    /**
     * 折料计算
     * @return OK
     */
    nxbsCovert(headId: string, createUser: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/domesticsale/NxbsCovert?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (createUser === undefined || createUser === null)
            throw new Error("The parameter 'createUser' must be defined and cannot be null.");
        else
            url_ += "createUser=" + encodeURIComponent("" + createUser) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNxbsCovert(_response);
        });
    }

    protected processNxbsCovert(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    queryGnoCollectList(condition: EntGoldenNxbsGnoCollect): Promise<ReturnResultOfPageListOfEntGoldenNxbsGnoCollect> {
        let url_ = this.baseUrl + "/domesticsale/querygnocollectlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryGnoCollectList(_response);
        });
    }

    protected processQueryGnoCollectList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenNxbsGnoCollect> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenNxbsGnoCollect.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenNxbsGnoCollect>(<any>null);
    }

    /**
     * @return OK
     */
    billMatch(headApiDto: EntNxbsHeadApiDto): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/billMatch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(headApiDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBillMatch(_response);
        });
    }

    protected processBillMatch(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    revokeMatch(headApiDto: EntNxbsHeadApiDto): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/domesticsale/revokeMatch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(headApiDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRevokeMatch(_response);
        });
    }

    protected processRevokeMatch(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }
}

export class EmsRecordClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取HScODE信息
     * @return OK
     */
    getHsCodeInfo(hsCode: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetHsCodeInfo?";
        if (hsCode === undefined || hsCode === null)
            throw new Error("The parameter 'hsCode' must be defined and cannot be null.");
        else
            url_ += "hsCode=" + encodeURIComponent("" + hsCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHsCodeInfo(_response);
        });
    }

    protected processGetHsCodeInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取小窗信息
     * @return OK
     */
    getTipMsg(): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetTipMsg";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTipMsg(_response);
        });
    }

    protected processGetTipMsg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询所有数据
     * @param model 查询参数
     * @return OK
     */
    queryHeadPagerDataSet(model: EntGoldenOrgHead): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取详情通过id
     * @return OK
     */
    getListById(model: EntGoldenOrgHead): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetListById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListById(_response);
        });
    }

    protected processGetListById(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存加工贸易帐册数据
     * @param model 参数
     * @return OK
     */
    saveOrgHead(model: EntGoldenOrgHead): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/SaveOrgHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveOrgHead(_response);
        });
    }

    protected processSaveOrgHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取表头数据
     * @param id 查询参数
     * @return OK
     */
    getOrgHead(id: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetOrgHead/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrgHead(_response);
        });
    }

    protected processGetOrgHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 审批异常报文处理
     * @return OK
     */
    reportExceptionHandle(type: string, seq: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/ReportExceptionHandle?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        if (seq === undefined || seq === null)
            throw new Error("The parameter 'seq' must be defined and cannot be null.");
        else
            url_ += "seq=" + encodeURIComponent("" + seq) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReportExceptionHandle(_response);
        });
    }

    protected processReportExceptionHandle(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 通过企业内部编号获取表头数据
     * @param erpNo 查询参数
     * @return OK
     */
    getOrgHeadByErpNo(erpNo: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetOrgHeadByErpNo?";
        if (erpNo === undefined || erpNo === null)
            throw new Error("The parameter 'erpNo' must be defined and cannot be null.");
        else
            url_ += "erpNo=" + encodeURIComponent("" + erpNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrgHeadByErpNo(_response);
        });
    }

    protected processGetOrgHeadByErpNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取备案电子账册数据
     * @param emsNo 账册号
     * @param org 企业代码
     * @return OK
     */
    getRecordedHead(emsNo: string, org: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetRecordedHead?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecordedHead(_response);
        });
    }

    protected processGetRecordedHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 通过企业内部编号获取IT info
     * @param erpNo 查询参数
     * @return OK
     */
    getOrgItInfo(erpNo: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetOrgItInfo?";
        if (erpNo === undefined || erpNo === null)
            throw new Error("The parameter 'erpNo' must be defined and cannot be null.");
        else
            url_ += "erpNo=" + encodeURIComponent("" + erpNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrgItInfo(_response);
        });
    }

    protected processGetOrgItInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除新增备案信息
     * @param id List<id></id>
     * @return OK
     */
    delOrgHead(id: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/DelOrgHead/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelOrgHead(_response);
        });
    }

    protected processDelOrgHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增料件数据
     * @param model 查询参数
     * @return OK
     */
    queryImgDataSet(model: EntGoldenOrgImg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryImgDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgDataSet(_response);
        });
    }

    protected processQueryImgDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询已备案料件数据
     * @param model 查询参数
     * @return OK
     */
    queryImgRecordData(model: EntGoldenOrgImgHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryImgRecordData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryImgRecordData(_response);
        });
    }

    protected processQueryImgRecordData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增料件数据
     * @param model 查询参数
     * @return OK
     */
    getImgExtractData(model: EntGoldenOrgImg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetImgExtractData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImgExtractData(_response);
        });
    }

    protected processGetImgExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增成品数据
     * @param model 查询参数
     * @return OK
     */
    queryExgDataSet(model: EntGoldenOrgExg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryExgDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryExgDataSet(_response);
        });
    }

    protected processQueryExgDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询已备案成品数据
     * @param model 查询参数
     * @return OK
     */
    queryExgRecordData(model: EntGoldenOrgExgHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryExgRecordData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryExgRecordData(_response);
        });
    }

    protected processQueryExgRecordData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增成品数据
     * @param model 查询参数
     * @return OK
     */
    getExgExtractData(model: EntGoldenOrgExg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetExgExtractData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExgExtractData(_response);
        });
    }

    protected processGetExgExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增成品数据
     * @param model 查询参数
     * @return OK
     */
    queryBomDataSet(model: EntGoldenOrgBom): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryBomDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBomDataSet(_response);
        });
    }

    protected processQueryBomDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询BOM备案数据
     * @param model 查询参数
     * @return OK
     */
    queryBomRecordData(model: EntGoldenOrgBomHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryBomRecordData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBomRecordData(_response);
        });
    }

    protected processQueryBomRecordData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 手动提取BOM
     * @return OK
     */
    getBomExtractData(model: EntGoldenOrgBom): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetBomExtractData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBomExtractData(_response);
        });
    }

    protected processGetBomExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 手动抽取数据保存
     * @return OK
     */
    saveExtractData(img: EntGoldenOrgImg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/SaveExtractData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(img);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveExtractData(_response);
        });
    }

    protected processSaveExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除加工贸易帐册料件
     * @return OK
     */
    delImg(delList: EntGoldenOrgImg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/DelImg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(delList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelImg(_response);
        });
    }

    protected processDelImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除加工贸易帐册成品
     * @return OK
     */
    delExg(delList: EntGoldenOrgExg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/DelExg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(delList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelExg(_response);
        });
    }

    protected processDelExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除加工贸易帐册单耗
     * @return OK
     */
    delBom(delList: EntGoldenOrgBom): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/DelBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(delList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelBom(_response);
        });
    }

    protected processDelBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存加工贸易帐册料件数据
     * @param model 参数
     * @return OK
     */
    saveOrgImg(model: EntGoldenOrgImg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/SaveOrgImg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveOrgImg(_response);
        });
    }

    protected processSaveOrgImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取加工贸易帐册料件信息
     * @param imgId 料件主键
     * @return OK
     */
    getImgEnt(imgId: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetImgEnt?";
        if (imgId === undefined || imgId === null)
            throw new Error("The parameter 'imgId' must be defined and cannot be null.");
        else
            url_ += "imgId=" + encodeURIComponent("" + imgId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImgEnt(_response);
        });
    }

    protected processGetImgEnt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存加工贸易帐册成品数据
     * @param model 成品数据参数
     * @return OK
     */
    saveOrgExg(model: EntGoldenOrgExg): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/SaveOrgExg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveOrgExg(_response);
        });
    }

    protected processSaveOrgExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取加工贸易帐册成品信息
     * @param exgId 成品主键
     * @return OK
     */
    getExgEnt(exgId: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetExgEnt?";
        if (exgId === undefined || exgId === null)
            throw new Error("The parameter 'exgId' must be defined and cannot be null.");
        else
            url_ += "exgId=" + encodeURIComponent("" + exgId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExgEnt(_response);
        });
    }

    protected processGetExgEnt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除加工贸易帐册BOM
     * @return OK
     */
    delOrgBom(bomId: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/DelOrgBom?";
        if (bomId === undefined || bomId === null)
            throw new Error("The parameter 'bomId' must be defined and cannot be null.");
        else
            url_ += "bomId=" + encodeURIComponent("" + bomId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelOrgBom(_response);
        });
    }

    protected processDelOrgBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存加工贸易帐册BOM数据
     * @param model BOM数据参数
     * @return OK
     */
    saveOrgBom(model: EntGoldenOrgBom): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/SaveOrgBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveOrgBom(_response);
        });
    }

    protected processSaveOrgBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取加工贸易帐册成品信息
     * @param bomId 成品主键
     * @return OK
     */
    getBomEnt(bomId: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetBomEnt?";
        if (bomId === undefined || bomId === null)
            throw new Error("The parameter 'bomId' must be defined and cannot be null.");
        else
            url_ += "bomId=" + encodeURIComponent("" + bomId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBomEnt(_response);
        });
    }

    protected processGetBomEnt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询经营范围成品备案
     * @param model 查询参数
     * @return OK
     */
    queryTradeImgHis(model: EntGoldenTradeImgHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryTradeImgHis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTradeImgHis(_response);
        });
    }

    protected processQueryTradeImgHis(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询经营范围料件备案
     * @param model 查询参数
     * @return OK
     */
    queryTradeExgHis(model: EntGoldenTradeExgHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryTradeExgHis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTradeExgHis(_response);
        });
    }

    protected processQueryTradeExgHis(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增料件数据
     * @param model 查询参数
     * @return OK
     */
    queryOrgImgHis(model: EntGoldenOrgImgHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryOrgImgHis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryOrgImgHis(_response);
        });
    }

    protected processQueryOrgImgHis(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询新增料件数据
     * @param model 查询参数
     * @return OK
     */
    queryOrgBomHis(model: EntGoldenOrgBomHistory): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/QueryOrgBomHis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryOrgBomHis(_response);
        });
    }

    protected processQueryOrgBomHis(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 导入料件成品
     * @return OK
     */
    impCopGNo(request: EntGoldenOrgImgexginnerExt): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/ImpCopGNo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImpCopGNo(_response);
        });
    }

    protected processImpCopGNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 导入料件成品
     * @return OK
     */
    impOrgBom(request: EntGoldenOrgBomInnerExt): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/ImpOrgBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImpOrgBom(_response);
        });
    }

    protected processImpOrgBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 自动提取备案数据
     * @param id 表头主键
     * @param user 操作人
     * @return OK
     */
    autoExtract(id: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/AutoExtract/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAutoExtract(_response);
        });
    }

    protected processAutoExtract(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 审核表头
     * @param id 表头主键
     * @param user 操作人
     * @return OK
     */
    checkOrgHead(id: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/CheckOrgHead/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckOrgHead(_response);
        });
    }

    protected processCheckOrgHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送加贸帐册报文
     * @param id 表头主键
     * @param user 操作人
     * @return OK
     */
    sendOrgHead(id: string, user: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/SendOrgHead/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendOrgHead(_response);
        });
    }

    protected processSendOrgHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 校验数据
     * @param id 表头主键
     * @return OK
     */
    validateInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/ValidateInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidateInfo(_response);
        });
    }

    protected processValidateInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 回填数据
     * @param id 表头主键
     * @return OK
     */
    backInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/BackInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBackInfo(_response);
        });
    }

    protected processBackInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取物料备案数据
     * @return OK
     */
    getInfoByImgNo(sku: string, headId: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetInfoByImgNo?";
        if (sku === undefined || sku === null)
            throw new Error("The parameter 'sku' must be defined and cannot be null.");
        else
            url_ += "sku=" + encodeURIComponent("" + sku) + "&"; 
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInfoByImgNo(_response);
        });
    }

    protected processGetInfoByImgNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取成品备案数据
     * @return OK
     */
    getInfoByExgNo(sku: string, headId: string): Promise<any> {
        let url_ = this.baseUrl + "/EmsRecord/GetInfoByExgNo?";
        if (sku === undefined || sku === null)
            throw new Error("The parameter 'sku' must be defined and cannot be null.");
        else
            url_ += "sku=" + encodeURIComponent("" + sku) + "&"; 
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInfoByExgNo(_response);
        });
    }

    protected processGetInfoByExgNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/EmsRecord/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class EnterpriseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 插入实体并返回主键值
     * @return OK
     */
    insert(entity: Category): Promise<number> {
        let url_ = this.baseUrl + "/Enterprise/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 更新实体
     * @return OK
     */
    update(entity: Category): Promise<number> {
        let url_ = this.baseUrl + "/Enterprise/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Enterprise/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class EntryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    delCopLimit(guids: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/DelCopLimit?";
        if (guids === undefined || guids === null)
            throw new Error("The parameter 'guids' must be defined and cannot be null.");
        else
            url_ += "guids=" + encodeURIComponent("" + guids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelCopLimit(_response);
        });
    }

    protected processDelCopLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 企业承诺事项查询
     * @return OK
     */
    copCommitment(flag: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/CopCommitment?";
        if (flag === undefined || flag === null)
            throw new Error("The parameter 'flag' must be defined and cannot be null.");
        else
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCopCommitment(_response);
        });
    }

    protected processCopCommitment(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 企业承诺事项查询
     * @return OK
     */
    getCopCommitmentByGuid(guid: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCopCommitmentByGuid?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCopCommitmentByGuid(_response);
        });
    }

    protected processGetCopCommitmentByGuid(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 企业承诺事项查询
     * @return OK
     */
    updateCoplimitMent(commitment: string, guid: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/UpdateCoplimitMent?";
        if (commitment === undefined || commitment === null)
            throw new Error("The parameter 'commitment' must be defined and cannot be null.");
        else
            url_ += "commitment=" + encodeURIComponent("" + commitment) + "&"; 
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCoplimitMent(_response);
        });
    }

    protected processUpdateCoplimitMent(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getOtherPackageData(guid: string, entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetOtherPackageData?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOtherPackageData(_response);
        });
    }

    protected processGetOtherPackageData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增其他包装信息
     * @return OK
     */
    addOtherPackage(model: EntTgBusinessOtherpack): Promise<any> {
        let url_ = this.baseUrl + "/Entry/AddOtherPackage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddOtherPackage(_response);
        });
    }

    protected processAddOtherPackage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 修改其他包装信息
     * @return OK
     */
    updOtherPackage(model: EntTgBusinessOtherpack): Promise<any> {
        let url_ = this.baseUrl + "/Entry/UpdOtherPackage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdOtherPackage(_response);
        });
    }

    protected processUpdOtherPackage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delOtherPackage(guid: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/DelOtherPackage?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelOtherPackage(_response);
        });
    }

    protected processDelOtherPackage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    auditEntry(model: EntTgBusinessHead): Promise<any> {
        let url_ = this.baseUrl + "/Entry/AuditEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuditEntry(_response);
        });
    }

    protected processAuditEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 报关单审核开关获取
     * @param ieFlag 进出口标志
     * @return OK
     */
    auditEntryFlag(ieFlag: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/AuditEntryFlag?";
        if (ieFlag === undefined || ieFlag === null)
            throw new Error("The parameter 'ieFlag' must be defined and cannot be null.");
        else
            url_ += "ieFlag=" + encodeURIComponent("" + ieFlag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuditEntryFlag(_response);
        });
    }

    protected processAuditEntryFlag(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :
    创建人  :Ny6000
    创建时间:2019-06-20 11:02
     * @return OK
     */
    getCiqInfoForEntry(ciqName: string, hsCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCiqInfoForEntry?";
        if (ciqName === undefined || ciqName === null)
            throw new Error("The parameter 'ciqName' must be defined and cannot be null.");
        else
            url_ += "CiqName=" + encodeURIComponent("" + ciqName) + "&"; 
        if (hsCode === undefined || hsCode === null)
            throw new Error("The parameter 'hsCode' must be defined and cannot be null.");
        else
            url_ += "HsCode=" + encodeURIComponent("" + hsCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCiqInfoForEntry(_response);
        });
    }

    protected processGetCiqInfoForEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询报关单表头对象
     * @param entryId 报关单号
     * @return OK
     */
    getEntryHeadByEntryId(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetEntryHeadByEntryId?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryHeadByEntryId(_response);
        });
    }

    protected processGetEntryHeadByEntryId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询报关单表头分页数据
     * @param model 查询参数
     * @return OK
     */
    queryEntryHead(model: EntTgBusinessHead): Promise<any> {
        let url_ = this.baseUrl + "/Entry/QueryEntryHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryEntryHead(_response);
        });
    }

    protected processQueryEntryHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 内销强制匹配报关单数据查询列表
     * @return OK
     */
    queryEntryList(model: EntTgBusinessHead): Promise<any> {
        let url_ = this.baseUrl + "/Entry/QueryEntryList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryEntryList(_response);
        });
    }

    protected processQueryEntryList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 内销强制匹配报关单
     * @return OK
     */
    forcMatchEntry(item: any): Promise<any> {
        let url_ = this.baseUrl + "/Entry/ForcMatchEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processForcMatchEntry(_response);
        });
    }

    protected processForcMatchEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存报关单
     * @return OK
     */
    saveEntry(model: TgBusinessHeadDto): Promise<any> {
        let url_ = this.baseUrl + "/Entry/SaveEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveEntry(_response);
        });
    }

    protected processSaveEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 更新报关信息
     * @return OK
     */
    updateBGData(model: EntTgBusinessHead): Promise<any> {
        let url_ = this.baseUrl + "/Entry/UpdateBGData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBGData(_response);
        });
    }

    protected processUpdateBGData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除报关单
     * @param entryId 报关单号
     * @return OK
     */
    delEntry(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/DelEntry?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelEntry(_response);
        });
    }

    protected processDelEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取经营单位收货单位等信息
     * @param emsNo 帐册号
     * @return OK
     */
    getEntryTradeInfo(emsNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetEntryTradeInfo?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryTradeInfo(_response);
        });
    }

    protected processGetEntryTradeInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取报关单表体数据
     * @param entryId 报关单号
     * @return OK
     */
    getListByEntryId(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetListByEntryId?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListByEntryId(_response);
        });
    }

    protected processGetListByEntryId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取报关单对应业务单信息
     * @param entryId 报关单号
     * @param entryType 进/出口报关单类型
     * @return OK
     */
    getBusinessInfoByEntryId(entryId: string, entryType: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetBusinessInfoByEntryId?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (entryType === undefined || entryType === null)
            throw new Error("The parameter 'entryType' must be defined and cannot be null.");
        else
            url_ += "entryType=" + encodeURIComponent("" + entryType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBusinessInfoByEntryId(_response);
        });
    }

    protected processGetBusinessInfoByEntryId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getIeBillHeadByBillNoToEntry(billNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetIeBillHeadByBillNoToEntry?";
        if (billNo === undefined || billNo === null)
            throw new Error("The parameter 'billNo' must be defined and cannot be null.");
        else
            url_ += "billNo=" + encodeURIComponent("" + billNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIeBillHeadByBillNoToEntry(_response);
        });
    }

    protected processGetIeBillHeadByBillNoToEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getIeBillBodyByBillNoToEntry(billNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetIeBillBodyByBillNoToEntry?";
        if (billNo === undefined || billNo === null)
            throw new Error("The parameter 'billNo' must be defined and cannot be null.");
        else
            url_ += "billNo=" + encodeURIComponent("" + billNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIeBillBodyByBillNoToEntry(_response);
        });
    }

    protected processGetIeBillBodyByBillNoToEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getAllList(entryId: string, ieFlag: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetAllList?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (ieFlag === undefined || ieFlag === null)
            throw new Error("The parameter 'ieFlag' must be defined and cannot be null.");
        else
            url_ += "ieFlag=" + encodeURIComponent("" + ieFlag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllList(_response);
        });
    }

    protected processGetAllList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getEntryStatus(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetEntryStatus?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryStatus(_response);
        });
    }

    protected processGetEntryStatus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    validateEntryListQty(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/ValidateEntryListQty?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidateEntryListQty(_response);
        });
    }

    protected processValidateEntryListQty(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updateDistrictCodeToOther(guid: string, entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/UpdateDistrictCodeToOther?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateDistrictCodeToOther(_response);
        });
    }

    protected processUpdateDistrictCodeToOther(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getContainerByEntryId(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetContainerByEntryId?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetContainerByEntryId(_response);
        });
    }

    protected processGetContainerByEntryId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getExsourceByEntryId(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetExsourceByEntryId?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExsourceByEntryId(_response);
        });
    }

    protected processGetExsourceByEntryId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getManualIEInfo(manualNo: string, gNo: string, imEx: string, argCopGNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetManualIEInfo?";
        if (manualNo === undefined || manualNo === null)
            throw new Error("The parameter 'manualNo' must be defined and cannot be null.");
        else
            url_ += "manualNo=" + encodeURIComponent("" + manualNo) + "&"; 
        if (gNo === undefined || gNo === null)
            throw new Error("The parameter 'gNo' must be defined and cannot be null.");
        else
            url_ += "gNo=" + encodeURIComponent("" + gNo) + "&"; 
        if (imEx === undefined || imEx === null)
            throw new Error("The parameter 'imEx' must be defined and cannot be null.");
        else
            url_ += "imEx=" + encodeURIComponent("" + imEx) + "&"; 
        if (argCopGNo === undefined || argCopGNo === null)
            throw new Error("The parameter 'argCopGNo' must be defined and cannot be null.");
        else
            url_ += "argCopGNo=" + encodeURIComponent("" + argCopGNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetManualIEInfo(_response);
        });
    }

    protected processGetManualIEInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getInfoByManualNo(manualNo: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetInfoByManualNo?";
        if (manualNo === undefined || manualNo === null)
            throw new Error("The parameter 'manualNo' must be defined and cannot be null.");
        else
            url_ += "manualNo=" + encodeURIComponent("" + manualNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInfoByManualNo(_response);
        });
    }

    protected processGetInfoByManualNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    fillbackCiqInfo(entryId: string, custom: string, loginName: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/FillbackCiqInfo?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (custom === undefined || custom === null)
            throw new Error("The parameter 'custom' must be defined and cannot be null.");
        else
            url_ += "custom=" + encodeURIComponent("" + custom) + "&"; 
        if (loginName === undefined || loginName === null)
            throw new Error("The parameter 'loginName' must be defined and cannot be null.");
        else
            url_ += "loginName=" + encodeURIComponent("" + loginName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFillbackCiqInfo(_response);
        });
    }

    protected processFillbackCiqInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkHeadListForCiq(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/CheckHeadListForCiq?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckHeadListForCiq(_response);
        });
    }

    protected processCheckHeadListForCiq(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkListForCiq(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/CheckListForCiq?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckListForCiq(_response);
        });
    }

    protected processCheckListForCiq(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkCountryForCiq(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/CheckCountryForCiq?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckCountryForCiq(_response);
        });
    }

    protected processCheckCountryForCiq(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkPackageTypeForCiq(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/CheckPackageTypeForCiq?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckPackageTypeForCiq(_response);
        });
    }

    protected processCheckPackageTypeForCiq(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getTgBusinessCopLimit(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetTgBusinessCopLimit?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTgBusinessCopLimit(_response);
        });
    }

    protected processGetTgBusinessCopLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getGoodAttr(): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetGoodAttr";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGoodAttr(_response);
        });
    }

    protected processGetGoodAttr(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getNoOtherPackFlag(entryId: string, headId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetNoOtherPackFlag?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNoOtherPackFlag(_response);
        });
    }

    protected processGetNoOtherPackFlag(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getCompanyList(): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCompanyList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompanyList(_response);
        });
    }

    protected processGetCompanyList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkIsExists(argCodeOrName: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/CheckIsExists?";
        if (argCodeOrName === undefined || argCodeOrName === null)
            throw new Error("The parameter 'argCodeOrName' must be defined and cannot be null.");
        else
            url_ += "argCodeOrName=" + encodeURIComponent("" + argCodeOrName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckIsExists(_response);
        });
    }

    protected processCheckIsExists(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getCompanySingle(argCodeOrName: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCompanySingle?";
        if (argCodeOrName === undefined || argCodeOrName === null)
            throw new Error("The parameter 'argCodeOrName' must be defined and cannot be null.");
        else
            url_ += "argCodeOrName=" + encodeURIComponent("" + argCodeOrName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompanySingle(_response);
        });
    }

    protected processGetCompanySingle(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    hsCodeSelect(model: HsCodeSelectDto): Promise<any> {
        let url_ = this.baseUrl + "/Entry/HsCodeSelect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHsCodeSelect(_response);
        });
    }

    protected processHsCodeSelect(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    hsCodeSelectBond(model: HsCodeSelectDto): Promise<any> {
        let url_ = this.baseUrl + "/Entry/HsCodeSelectBond";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHsCodeSelectBond(_response);
        });
    }

    protected processHsCodeSelectBond(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getPopUserInfo(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetPopUserInfo?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPopUserInfo(_response);
        });
    }

    protected processGetPopUserInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    popUserInfoSave(model: EntTgBusinessUser): Promise<any> {
        let url_ = this.baseUrl + "/Entry/PopUserInfoSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPopUserInfoSave(_response);
        });
    }

    protected processPopUserInfoSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    popUserInfoUpdate(model: EntTgBusinessUser): Promise<any> {
        let url_ = this.baseUrl + "/Entry/PopUserInfoUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPopUserInfoUpdate(_response);
        });
    }

    protected processPopUserInfoUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delPopUserInfo(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/DelPopUserInfo?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelPopUserInfo(_response);
        });
    }

    protected processDelPopUserInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    popCiqDeclareUpdate(model: EntTgBusinessHead): Promise<any> {
        let url_ = this.baseUrl + "/Entry/PopCiqDeclareUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPopCiqDeclareUpdate(_response);
        });
    }

    protected processPopCiqDeclareUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getPopCiqDeclare(entryId: string, headId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetPopCiqDeclare?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPopCiqDeclare(_response);
        });
    }

    protected processGetPopCiqDeclare(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    hsCodeInputQuery(codet: string, codes: string, type: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/HsCodeInputQuery?";
        if (codet === undefined || codet === null)
            throw new Error("The parameter 'codet' must be defined and cannot be null.");
        else
            url_ += "codet=" + encodeURIComponent("" + codet) + "&"; 
        if (codes === undefined || codes === null)
            throw new Error("The parameter 'codes' must be defined and cannot be null.");
        else
            url_ += "codes=" + encodeURIComponent("" + codes) + "&"; 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHsCodeInputQuery(_response);
        });
    }

    protected processHsCodeInputQuery(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getEmsBondByHscode(entrustNo: string, emsNo: string, codeT: string, codeS: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetEmsBondByHscode?";
        if (entrustNo === undefined || entrustNo === null)
            throw new Error("The parameter 'entrustNo' must be defined and cannot be null.");
        else
            url_ += "entrustNo=" + encodeURIComponent("" + entrustNo) + "&"; 
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        if (codeT === undefined || codeT === null)
            throw new Error("The parameter 'codeT' must be defined and cannot be null.");
        else
            url_ += "codeT=" + encodeURIComponent("" + codeT) + "&"; 
        if (codeS === undefined || codeS === null)
            throw new Error("The parameter 'codeS' must be defined and cannot be null.");
        else
            url_ += "codeS=" + encodeURIComponent("" + codeS) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmsBondByHscode(_response);
        });
    }

    protected processGetEmsBondByHscode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getCodeSDataByCodeT(codeT: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCodeSDataByCodeT?";
        if (codeT === undefined || codeT === null)
            throw new Error("The parameter 'codeT' must be defined and cannot be null.");
        else
            url_ += "codeT=" + encodeURIComponent("" + codeT) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCodeSDataByCodeT(_response);
        });
    }

    protected processGetCodeSDataByCodeT(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getEntryInfoByCodeTS(tradeCo: string, codeT: string, codeS: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetEntryInfoByCodeTS?";
        if (tradeCo === undefined || tradeCo === null)
            throw new Error("The parameter 'tradeCo' must be defined and cannot be null.");
        else
            url_ += "tradeCo=" + encodeURIComponent("" + tradeCo) + "&"; 
        if (codeT === undefined || codeT === null)
            throw new Error("The parameter 'codeT' must be defined and cannot be null.");
        else
            url_ += "codeT=" + encodeURIComponent("" + codeT) + "&"; 
        if (codeS === undefined || codeS === null)
            throw new Error("The parameter 'codeS' must be defined and cannot be null.");
        else
            url_ += "codeS=" + encodeURIComponent("" + codeS) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryInfoByCodeTS(_response);
        });
    }

    protected processGetEntryInfoByCodeTS(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getDefaultSplitCount(): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetDefaultSplitCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDefaultSplitCount(_response);
        });
    }

    protected processGetDefaultSplitCount(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查找替换报关单
     * @return OK
     */
    searchReplaceEntry(oldEntryId: string, newEntryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/SearchReplaceEntry?";
        if (oldEntryId === undefined || oldEntryId === null)
            throw new Error("The parameter 'oldEntryId' must be defined and cannot be null.");
        else
            url_ += "oldEntryId=" + encodeURIComponent("" + oldEntryId) + "&"; 
        if (newEntryId === undefined || newEntryId === null)
            throw new Error("The parameter 'newEntryId' must be defined and cannot be null.");
        else
            url_ += "newEntryId=" + encodeURIComponent("" + newEntryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchReplaceEntry(_response);
        });
    }

    protected processSearchReplaceEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getEntryPrintData(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetEntryPrintData?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryPrintData(_response);
        });
    }

    protected processGetEntryPrintData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取单一窗口对接数据
     * @return OK
     */
    queryWindowPageList(model: EntTgBusinessHead): Promise<any> {
        let url_ = this.baseUrl + "/Entry/QueryWindowPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryWindowPageList(_response);
        });
    }

    protected processQueryWindowPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    addPopLicenseFile(model: EntTgBusinessMarklob): Promise<any> {
        let url_ = this.baseUrl + "/Entry/AddPopLicenseFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPopLicenseFile(_response);
        });
    }

    protected processAddPopLicenseFile(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updatePopLicenseFile(model: EntTgBusinessMarklob): Promise<any> {
        let url_ = this.baseUrl + "/Entry/UpdatePopLicenseFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePopLicenseFile(_response);
        });
    }

    protected processUpdatePopLicenseFile(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getPopLicenseFileData(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetPopLicenseFileData?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPopLicenseFileData(_response);
        });
    }

    protected processGetPopLicenseFileData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getLicenseFileEnt(guid: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetLicenseFileEnt?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLicenseFileEnt(_response);
        });
    }

    protected processGetLicenseFileEnt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delLicenseFile(guids: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/DelLicenseFile?";
        if (guids === undefined || guids === null)
            throw new Error("The parameter 'guids' must be defined and cannot be null.");
        else
            url_ += "guids=" + encodeURIComponent("" + guids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelLicenseFile(_response);
        });
    }

    protected processDelLicenseFile(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增企业资质信息
     * @return OK
     */
    addCopLimit(model: EntTgBusinessCoplimit): Promise<any> {
        let url_ = this.baseUrl + "/Entry/AddCopLimit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddCopLimit(_response);
        });
    }

    protected processAddCopLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 修改企业资质信息
     * @return OK
     */
    updateCopLimit(model: EntTgBusinessCoplimit): Promise<any> {
        let url_ = this.baseUrl + "/Entry/UpdateCopLimit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCopLimit(_response);
        });
    }

    protected processUpdateCopLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 企业资质下拉绑定
     * @return OK
     */
    getCopLimitType(): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCopLimitType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCopLimitType(_response);
        });
    }

    protected processGetCopLimitType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 企业资质数据查询
     * @return OK
     */
    getCopLimitData(guid: string, entryId: string, ieFlag: string): Promise<any> {
        let url_ = this.baseUrl + "/Entry/GetCopLimitData?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (ieFlag === undefined || ieFlag === null)
            throw new Error("The parameter 'ieFlag' must be defined and cannot be null.");
        else
            url_ += "ieFlag=" + encodeURIComponent("" + ieFlag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCopLimitData(_response);
        });
    }

    protected processGetCopLimitData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Entry/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class EntryPopClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询报关单归并结果
     * @param entryId 报关单号
     * @param itemNo 归并序号
     * @return OK
     */
    mergerListByItemNo(entryId: string, itemNo: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/MergerListByItemNo?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "EntryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (itemNo === undefined || itemNo === null)
            throw new Error("The parameter 'itemNo' must be defined and cannot be null.");
        else
            url_ += "ItemNo=" + encodeURIComponent("" + itemNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMergerListByItemNo(_response);
        });
    }

    protected processMergerListByItemNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :更新报关单表体归并结果
    创建人  :Ny6000
    创建时间:2019-03-21 16:17
     * @return OK
     */
    updateMergerListByItemNo(entryId: string, itemNo: string, gName: string, gModel: string, qty2: number, country: string, destinationCountry: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/UpdateMergerListByItemNo?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "EntryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (itemNo === undefined || itemNo === null)
            throw new Error("The parameter 'itemNo' must be defined and cannot be null.");
        else
            url_ += "ItemNo=" + encodeURIComponent("" + itemNo) + "&"; 
        if (gName === undefined || gName === null)
            throw new Error("The parameter 'gName' must be defined and cannot be null.");
        else
            url_ += "GName=" + encodeURIComponent("" + gName) + "&"; 
        if (gModel === undefined || gModel === null)
            throw new Error("The parameter 'gModel' must be defined and cannot be null.");
        else
            url_ += "GModel=" + encodeURIComponent("" + gModel) + "&"; 
        if (qty2 === undefined || qty2 === null)
            throw new Error("The parameter 'qty2' must be defined and cannot be null.");
        else
            url_ += "Qty2=" + encodeURIComponent("" + qty2) + "&"; 
        if (country === undefined || country === null)
            throw new Error("The parameter 'country' must be defined and cannot be null.");
        else
            url_ += "Country=" + encodeURIComponent("" + country) + "&"; 
        if (destinationCountry === undefined || destinationCountry === null)
            throw new Error("The parameter 'destinationCountry' must be defined and cannot be null.");
        else
            url_ += "DestinationCountry=" + encodeURIComponent("" + destinationCountry) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMergerListByItemNo(_response);
        });
    }

    protected processUpdateMergerListByItemNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取
     * @return OK
     */
    getGoodLimit(guid: number): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetGoodLimit?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGoodLimit(_response);
        });
    }

    protected processGetGoodLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 增加
     * @return OK
     */
    addGoodLimit(model: EntTgBusinessGoodslimit): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/AddGoodLimit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddGoodLimit(_response);
        });
    }

    protected processAddGoodLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 增加
     * @return OK
     */
    updateGoodLimit(model: EntTgBusinessGoodslimit): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/UpdateGoodLimit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateGoodLimit(_response);
        });
    }

    protected processUpdateGoodLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteGoodLimit(guid: number): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/DeleteGoodLimit?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteGoodLimit(_response);
        });
    }

    protected processDeleteGoodLimit(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteGoodLimitByGuids(guids: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/DeleteGoodLimitByGuids?";
        if (guids === undefined || guids === null)
            throw new Error("The parameter 'guids' must be defined and cannot be null.");
        else
            url_ += "guids=" + encodeURIComponent("" + guids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteGoodLimitByGuids(_response);
        });
    }

    protected processDeleteGoodLimitByGuids(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 判断是否存在
     * @return OK
     */
    checkGoodLimitIsExits(model: EntTgBusinessGoodslimit): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/CheckGoodLimitIsExits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckGoodLimitIsExits(_response);
        });
    }

    protected processCheckGoodLimitIsExits(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取列表数据
     * @return OK
     */
    getGoodLimitPageDataTable(entryId: string, entryListId: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetGoodLimitPageDataTable?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (entryListId === undefined || entryListId === null)
            throw new Error("The parameter 'entryListId' must be defined and cannot be null.");
        else
            url_ += "entryListId=" + encodeURIComponent("" + entryListId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGoodLimitPageDataTable(_response);
        });
    }

    protected processGetGoodLimitPageDataTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取
     * @return OK
     */
    getGoodLimitVin(guid: number): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetGoodLimitVin?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGoodLimitVin(_response);
        });
    }

    protected processGetGoodLimitVin(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 增加
     * @return OK
     */
    addGoodLimitVin(model: EntTgBusinessGoodslimitvin): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/AddGoodLimitVin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddGoodLimitVin(_response);
        });
    }

    protected processAddGoodLimitVin(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateGoodLimitVin(model: EntTgBusinessGoodslimitvin): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/UpdateGoodLimitVin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateGoodLimitVin(_response);
        });
    }

    protected processUpdateGoodLimitVin(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteGoodLimitVin(guid: number): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/DeleteGoodLimitVin?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteGoodLimitVin(_response);
        });
    }

    protected processDeleteGoodLimitVin(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteGoodLimitVinByGuids(guids: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/DeleteGoodLimitVinByGuids?";
        if (guids === undefined || guids === null)
            throw new Error("The parameter 'guids' must be defined and cannot be null.");
        else
            url_ += "guids=" + encodeURIComponent("" + guids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteGoodLimitVinByGuids(_response);
        });
    }

    protected processDeleteGoodLimitVinByGuids(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取列表数据
     * @return OK
     */
    getGoodLimitVinPageDataTable(entryId: string, headGuid: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetGoodLimitVinPageDataTable?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        if (headGuid === undefined || headGuid === null)
            throw new Error("The parameter 'headGuid' must be defined and cannot be null.");
        else
            url_ += "headGuid=" + encodeURIComponent("" + headGuid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGoodLimitVinPageDataTable(_response);
        });
    }

    protected processGetGoodLimitVinPageDataTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取报关单表体
     * @return OK
     */
    getEntryListByGuid(guid: number): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetEntryListByGuid?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEntryListByGuid(_response);
        });
    }

    protected processGetEntryListByGuid(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取弹出框数据
     * @return OK
     */
    getPopDataTableByCategoryOfSysParaData(category: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetPopDataTableByCategoryOfSysParaData?";
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined and cannot be null.");
        else
            url_ += "category=" + encodeURIComponent("" + category) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPopDataTableByCategoryOfSysParaData(_response);
        });
    }

    protected processGetPopDataTableByCategoryOfSysParaData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据类别获取带RowIndex的列表
     * @return OK
     */
    getDataTableByCategoryOfSysParaData(category: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetDataTableByCategoryOfSysParaData?";
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined and cannot be null.");
        else
            url_ += "category=" + encodeURIComponent("" + category) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDataTableByCategoryOfSysParaData(_response);
        });
    }

    protected processGetDataTableByCategoryOfSysParaData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取弹出框数据
     * @return OK
     */
    getPopCodeDataTableOfSysProductQual(): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetPopCodeDataTableOfSysProductQual";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPopCodeDataTableOfSysProductQual(_response);
        });
    }

    protected processGetPopCodeDataTableOfSysProductQual(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取
     * @return OK
     */
    getBusinessRequestcert(guid: number): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetBusinessRequestcert?";
        if (guid === undefined || guid === null)
            throw new Error("The parameter 'guid' must be defined and cannot be null.");
        else
            url_ += "guid=" + encodeURIComponent("" + guid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBusinessRequestcert(_response);
        });
    }

    protected processGetBusinessRequestcert(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存
     * @return OK
     */
    saveBusinessRequestcert(model: EntTgBusinessRequestcert): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/SaveBusinessRequestcert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveBusinessRequestcert(_response);
        });
    }

    protected processSaveBusinessRequestcert(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteBusinessRequestcertByGuids(guids: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/DeleteBusinessRequestcertByGuids?";
        if (guids === undefined || guids === null)
            throw new Error("The parameter 'guids' must be defined and cannot be null.");
        else
            url_ += "guids=" + encodeURIComponent("" + guids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBusinessRequestcertByGuids(_response);
        });
    }

    protected processDeleteBusinessRequestcertByGuids(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取弹出框数据
     * @return OK
     */
    getPopBusinessRequestcertDataTable(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetPopBusinessRequestcertDataTable?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPopBusinessRequestcertDataTable(_response);
        });
    }

    protected processGetPopBusinessRequestcertDataTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    saveLicenseFile(list: EntTgBusinessFile[]): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/SaveLicenseFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveLicenseFile(_response);
        });
    }

    protected processSaveLicenseFile(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getLinceFileListByEntryId(entryId: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/GetLinceFileListByEntryId?";
        if (entryId === undefined || entryId === null)
            throw new Error("The parameter 'entryId' must be defined and cannot be null.");
        else
            url_ += "entryId=" + encodeURIComponent("" + entryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLinceFileListByEntryId(_response);
        });
    }

    protected processGetLinceFileListByEntryId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据文件记录ID删除文件
    创建人  :Ny6000
    创建时间:2019-08-05 11:39
     * @return OK
     */
    businessFileDeleteByIds(ids: string): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/BusinessFileDeleteByIds?";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined and cannot be null.");
        else
            url_ += "ids=" + encodeURIComponent("" + ids) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBusinessFileDeleteByIds(_response);
        });
    }

    protected processBusinessFileDeleteByIds(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :报关单数据导入
    创建人  :Ny6000
    创建时间:2019-04-22 18:16
     * @return OK
     */
    entryDataImport(list: TgBusinessHeadDto[]): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/EntryDataImport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEntryDataImport(_response);
        });
    }

    protected processEntryDataImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    existEntry(list: string[]): Promise<any> {
        let url_ = this.baseUrl + "/EntryPop/ExistEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExistEntry(_response);
        });
    }

    protected processExistEntry(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/EntryPop/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class ErpSalesInvoicesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 导入主表关系数据
     * @return OK
     */
    datasInsertList(models: EntCustomsErpSalesinvoice[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsertList(_response);
        });
    }

    protected processDatasInsertList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 导入子表关系数据
     * @return OK
     */
    datasInsertList2(models: EntCustomsErpSalesinvoicelist[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/DatasInsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsertList2(_response);
        });
    }

    protected processDatasInsertList2(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 修改上传状态
     * @return OK
     */
    updateUploadList(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/UpdateUploadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadList(_response);
        });
    }

    protected processUpdateUploadList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 查询所有数据
     * @param model 查询参数
     * @return OK
     */
    getHeadList(model: EntCustomsErpSalesinvoice): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/GetHeadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadList(_response);
        });
    }

    protected processGetHeadList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取外方发票表头信息
     * @return OK
     */
    getHeadInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/GetHeadInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadInfo(_response);
        });
    }

    protected processGetHeadInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取外方发票表体数据
     * @param invNo 发票号
     * @return OK
     */
    getListData(invNo: string): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/GetListData?";
        if (invNo === undefined || invNo === null)
            throw new Error("The parameter 'invNo' must be defined and cannot be null.");
        else
            url_ += "invNo=" + encodeURIComponent("" + invNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListData(_response);
        });
    }

    protected processGetListData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除发票表头数据
     * @param it 发票号
     * @return OK
     */
    delHead(it: any): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/DelHead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(it);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelHead(_response);
        });
    }

    protected processDelHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除发票表体
     * @param list 发票号
     * @return OK
     */
    delDetails(list: any): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/DelDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelDetails(_response);
        });
    }

    protected processDelDetails(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取外方发票表体数据
     * @param id 发票号
     * @return OK
     */
    getListInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/GetListInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListInfo(_response);
        });
    }

    protected processGetListInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送发票数据到海关
     * @param idList 发票号
     * @return OK
     */
    updateStatus(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/UpdateStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStatus(_response);
        });
    }

    protected processUpdateStatus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存大数据接口发票表头数据
     * @param model 参数
     * @return OK
     */
    saveHeadInfo(model: EntCustomsErpSalesinvoice): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/SaveHeadInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveHeadInfo(_response);
        });
    }

    protected processSaveHeadInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存大数据接口发票表体数据
     * @param model 参数
     * @return OK
     */
    saveDetailInfo(model: EntCustomsErpSalesinvoicelist): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/SaveDetailInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveDetailInfo(_response);
        });
    }

    protected processSaveDetailInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送发票表头信息
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSendList(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/QueryHeadPagerDataSetSendList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSendList(_response);
        });
    }

    protected processQueryHeadPagerDataSetSendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/ErpSalesInvoices/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class FileClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 从默认路径（路径示例：~/App_Data/downs/201801/20180101/）下载文件
    文件名必须符合格式（示例）：20180307_10593212_文件名
     * @param f 文件名
     * @param p 文件路径
     * @return OK
     */
    downFile(f: string, p: string): Promise<any> {
        let url_ = this.baseUrl + "/File/DownFile?";
        if (f === undefined || f === null)
            throw new Error("The parameter 'f' must be defined and cannot be null.");
        else
            url_ += "f=" + encodeURIComponent("" + f) + "&"; 
        if (p === undefined || p === null)
            throw new Error("The parameter 'p' must be defined and cannot be null.");
        else
            url_ += "p=" + encodeURIComponent("" + p) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDownFile(_response);
        });
    }

    protected processDownFile(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 上传文件
     * @return OK
     */
    upload(): Promise<OperFileModel[]> {
        let url_ = this.baseUrl + "/File/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpload(_response);
        });
    }

    protected processUpload(response: Response): Promise<OperFileModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OperFileModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperFileModel[]>(<any>null);
    }

    /**
     * 上传回执报文
     * @return OK
     */
    uploadReceiptMessage(): Promise<OperFileModel[]> {
        let url_ = this.baseUrl + "/File/UploadReceiptMessage";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadReceiptMessage(_response);
        });
    }

    protected processUploadReceiptMessage(response: Response): Promise<OperFileModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OperFileModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperFileModel[]>(<any>null);
    }

    /**
     * 上传文件
     * @return OK
     */
    delete(fileFullName: string): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/File/Delete?";
        if (fileFullName === undefined || fileFullName === null)
            throw new Error("The parameter 'fileFullName' must be defined and cannot be null.");
        else
            url_ += "fileFullName=" + encodeURIComponent("" + fileFullName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/File/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class FileLibraryNoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getEmsNo(): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/GetEmsNo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmsNo(_response);
        });
    }

    protected processGetEmsNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListPaged(parameters: ParameterMgr): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/GetListPaged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListPaged(_response);
        });
    }

    protected processGetListPaged(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryTablePaged(model: EntBasCustomerEmsno): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/QueryTablePaged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTablePaged(_response);
        });
    }

    protected processQueryTablePaged(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntBasCustomerEmsno): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/FileLibraryNo/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    delete(model: EntBasCustomerEmsno): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/FileLibraryNo/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取海关编号
     * @param type 1-经营范围档案库编号,2-电子帐册档案库编号
     * @param org 企业代码
     * @return OK
     */
    getFileLibDropdownList(type: string, org: string): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/GetFileLibDropdownList?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFileLibDropdownList(_response);
        });
    }

    protected processGetFileLibDropdownList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取海关编号
     * @param type 1-经营范围档案库编号,2-电子帐册档案库编号
     * @param org 企业代码
     * @return OK
     */
    getFileLibDropdownList1(type: string, org: string): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/GetFileLibDropdownList1?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFileLibDropdownList1(_response);
        });
    }

    protected processGetFileLibDropdownList1(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取海关编号
     * @param type 1-经营范围档案库编号,2-电子帐册档案库编号
     * @param org 企业代码
     * @return OK
     */
    getEmsNoList(type: string, org: string): Promise<any> {
        let url_ = this.baseUrl + "/FileLibraryNo/GetEmsNoList?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmsNoList(_response);
        });
    }

    protected processGetEmsNoList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/FileLibraryNo/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class FreeTemplateClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(condition: EntGoldenBusFeeTemplate): Promise<ReturnResultOfPageListOfEntGoldenBusFeeTemplate> {
        let url_ = this.baseUrl + "/FreeTemplate/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<ReturnResultOfPageListOfEntGoldenBusFeeTemplate> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenBusFeeTemplate.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenBusFeeTemplate>(<any>null);
    }

    /**
     * @return OK
     */
    insert(model: EntGoldenBusFeeTemplate): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/FreeTemplate/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    insertMany(models: EntGoldenBusFeeTemplate[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/FreeTemplate/InsertMany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertMany(_response);
        });
    }

    protected processInsertMany(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    update(model: EntGoldenBusFeeTemplate): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/FreeTemplate/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    delete(id: number): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/FreeTemplate/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/FreeTemplate/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class GoldenBusTurnClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 根据业务单获取信息
     * @return OK
     */
    getListByBusNo(bus_no: string): Promise<any> {
        let url_ = this.baseUrl + "/GoldenBusTurn/GetListByBusNo?";
        if (bus_no === undefined || bus_no === null)
            throw new Error("The parameter 'bus_no' must be defined and cannot be null.");
        else
            url_ += "bus_no=" + encodeURIComponent("" + bus_no) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListByBusNo(_response);
        });
    }

    protected processGetListByBusNo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 更新
     * @return OK
     */
    update(model: EntGoldenBusTurn): Promise<any> {
        let url_ = this.baseUrl + "/GoldenBusTurn/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/GoldenBusTurn/Get/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 更新流转状态
     * @return OK
     */
    updateBusTurn(busNo: string, handleCode: string, handleDate: Date): Promise<any> {
        let url_ = this.baseUrl + "/GoldenBusTurn/UpdateBusTurn?";
        if (busNo === undefined || busNo === null)
            throw new Error("The parameter 'busNo' must be defined and cannot be null.");
        else
            url_ += "busNo=" + encodeURIComponent("" + busNo) + "&"; 
        if (handleCode === undefined || handleCode === null)
            throw new Error("The parameter 'handleCode' must be defined and cannot be null.");
        else
            url_ += "handleCode=" + encodeURIComponent("" + handleCode) + "&"; 
        if (handleDate === undefined || handleDate === null)
            throw new Error("The parameter 'handleDate' must be defined and cannot be null.");
        else
            url_ += "handleDate=" + encodeURIComponent(handleDate ? "" + handleDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBusTurn(_response);
        });
    }

    protected processUpdateBusTurn(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 更新流转状态
     * @return OK
     */
    updateBusTurn2(model: EntGoldenBusTurn): Promise<any> {
        let url_ = this.baseUrl + "/GoldenBusTurn/UpdateBusTurn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBusTurn2(_response);
        });
    }

    protected processUpdateBusTurn2(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/GoldenBusTurn/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class HscodeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(model: EntHscodes): Promise<any> {
        let url_ = this.baseUrl + "/Hscode/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getAll(model: EntHscodes): Promise<any> {
        let url_ = this.baseUrl + "/Hscode/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getList1(model: EntHscodes): Promise<any> {
        let url_ = this.baseUrl + "/Hscode/GetList1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList1(_response);
        });
    }

    protected processGetList1(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getAll1(model: EntHscodes): Promise<any> {
        let url_ = this.baseUrl + "/Hscode/GetAll1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll1(_response);
        });
    }

    protected processGetAll1(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class InboundDeliveryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 新增
     * @return OK
     */
    insert(model: EntCustomsErpInbound): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    update(model: EntCustomsErpInbound): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(model: EntCustomsErpInbound): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同主表协议关系数据
     * @return OK
     */
    datasInsert(models: EntCustomsErpInbound[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/InboundDelivery/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsert(_response);
        });
    }

    protected processDatasInsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 新增
     * @return OK
     */
    insertList(model: EntCustomsErpInbounddetail): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/insertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertList(_response);
        });
    }

    protected processInsertList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateList(model: EntCustomsErpInbounddetail): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/updateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateList(_response);
        });
    }

    protected processUpdateList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteList(model: EntCustomsErpInbounddetail): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/deleteList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUploadList(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/InboundDelivery/updateUploadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadList(_response);
        });
    }

    protected processUpdateUploadList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同子表协议关系数据
     * @return OK
     */
    datasInsertList(models: EntCustomsErpInbounddetail[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/InboundDelivery/DatasInsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsertList(_response);
        });
    }

    protected processDatasInsertList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntCustomsErpInbound): Promise<any> {
        let url_ = this.baseUrl + "/InboundDelivery/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetByID(model: EntCustomsErpInbound): Promise<any> {
        let url_ = this.baseUrl + "/InboundDelivery/QueryHeadPagerDataSetByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetList(model: EntCustomsErpInbounddetail): Promise<any> {
        let url_ = this.baseUrl + "/InboundDelivery/QueryHeadPagerDataSetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetList(_response);
        });
    }

    protected processQueryHeadPagerDataSetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetListByID(model: EntCustomsErpInbounddetail): Promise<any> {
        let url_ = this.baseUrl + "/InboundDelivery/QueryHeadPagerDataSetListByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetListByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetListByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/InboundDelivery/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSendList(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/InboundDelivery/QueryHeadPagerDataSetSendList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSendList(_response);
        });
    }

    protected processQueryHeadPagerDataSetSendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class InvoiceOrWriteOffClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询发票管理明细
     * @return OK
     */
    getInvoiceReceiveList(model: EntTgBusinessInvoice): Promise<any> {
        let url_ = this.baseUrl + "/InvoiceOrWriteOff/GetInvoiceReceiveList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInvoiceReceiveList(_response);
        });
    }

    protected processGetInvoiceReceiveList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 维护
     * @return OK
     */
    updateJsD(modelList: EntTgBusinessInvoice[]): Promise<any> {
        let url_ = this.baseUrl + "/InvoiceOrWriteOff/UpdateJsD";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateJsD(_response);
        });
    }

    protected processUpdateJsD(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询销账管理
     * @return OK
     */
    getWriteOffList(model: EntTgBusinessInvoice): Promise<any> {
        let url_ = this.baseUrl + "/InvoiceOrWriteOff/GetWriteOffList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWriteOffList(_response);
        });
    }

    protected processGetWriteOffList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 注销账目
     * @return OK
     */
    updateWriteOff(modelList: EntTgBusinessWriteOff[]): Promise<any> {
        let url_ = this.baseUrl + "/InvoiceOrWriteOff/UpdateWriteOff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateWriteOff(_response);
        });
    }

    protected processUpdateWriteOff(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 注销账目
     * @return OK
     */
    updateWriteON(modelList: EntTgBusinessWriteOff[]): Promise<any> {
        let url_ = this.baseUrl + "/InvoiceOrWriteOff/UpdateWriteON";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateWriteON(_response);
        });
    }

    protected processUpdateWriteON(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class ItRecordClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(model: EntGoldenTradeHead): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getSingle(id: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetSingle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingle(_response);
        });
    }

    protected processGetSingle(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getItRecordedHead(emsNo: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetItRecordedHead?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetItRecordedHead(_response);
        });
    }

    protected processGetItRecordedHead(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :删除资质备案表头数据
    创建人  :Ny6000
    创建时间:2019-03-15 13:19
     * @return OK
     */
    delete(id: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntGoldenTradeHead): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :报文生成前数据完整性校验
    创建人  :Ny6000
    创建时间:2019-03-14 19:48
     * @return OK
     */
    dataCheck(id: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/DataCheck/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDataCheck(_response);
        });
    }

    protected processDataCheck(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListExg(model: EntGoldenTradeExg): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetListExg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListExg(_response);
        });
    }

    protected processGetListExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListExg2(emsId: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetListExg2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(emsId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListExg2(_response);
        });
    }

    protected processGetListExg2(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :资质备案成品数据删除
    创建人  :Ny6000
    创建时间:2019-03-15 11:40
     * @return OK
     */
    deleteExg(id: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/DeleteExg/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteExg(_response);
        });
    }

    protected processDeleteExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :成品表体批量删除
    创建人  :Ny6000
    创建时间:2019-03-15 13:42
     * @return OK
     */
    deleteExgList(argIdList: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/DeleteExgList?";
        if (argIdList === undefined || argIdList === null)
            throw new Error("The parameter 'argIdList' must be defined and cannot be null.");
        else
            url_ += "argIdList=" + encodeURIComponent("" + argIdList) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteExgList(_response);
        });
    }

    protected processDeleteExgList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :资质备案成品数据保存
    创建人  :Ny6000
    创建时间:2019-03-15 10:16
     * @return OK
     */
    saveExg(model: EntGoldenTradeExg): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/SaveExg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveExg(_response);
        });
    }

    protected processSaveExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    saveExgList(listModel: EntGoldenTradeExg[]): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/SaveExgList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveExgList(_response);
        });
    }

    protected processSaveExgList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListImg(model: EntGoldenTradeImg): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetListImg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListImg(_response);
        });
    }

    protected processGetListImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListById(model: EntGoldenTradeImg): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetListById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListById(_response);
        });
    }

    protected processGetListById(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListImg2(emsId: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetListImg2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(emsId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListImg2(_response);
        });
    }

    protected processGetListImg2(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getSingleImg(id: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetSingleImg/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleImg(_response);
        });
    }

    protected processGetSingleImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getSingleExg(id: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetSingleExg/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleExg(_response);
        });
    }

    protected processGetSingleExg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :资质备案料件数据删除
    创建人  :Ny6000
    创建时间:2019-03-15 11:40
     * @return OK
     */
    deleteImg(id: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/DeleteImg/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteImg(_response);
        });
    }

    protected processDeleteImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :料件表体批量删除
    创建人  :Ny6000
    创建时间:2019-03-15 13:56
     * @return OK
     */
    deleteImgList(argIdList: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/DeleteImgList?";
        if (argIdList === undefined || argIdList === null)
            throw new Error("The parameter 'argIdList' must be defined and cannot be null.");
        else
            url_ += "argIdList=" + encodeURIComponent("" + argIdList) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteImgList(_response);
        });
    }

    protected processDeleteImgList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    ::资质备案料件数据保存
    创建人  :Ny6000
    创建时间:2019-03-15 10:35
     * @return OK
     */
    saveImg(model: EntGoldenTradeImg): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/SaveImg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveImg(_response);
        });
    }

    protected processSaveImg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    saveImgList(listModel: EntGoldenTradeImg[]): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/SaveImgList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveImgList(_response);
        });
    }

    protected processSaveImgList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :资质备案成品/料件修改标志更新
    创建人  :Ny6000
    创建时间:2019-03-15 15:45
     * @return OK
     */
    modifyUpdate(headId: number, category: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/ModifyUpdate?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined and cannot be null.");
        else
            url_ += "Category=" + encodeURIComponent("" + category) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processModifyUpdate(_response);
        });
    }

    protected processModifyUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :更新指定资质备案明细数据修改标志值为3,即新增
    创建人  :Ny6000
    创建时间:2019-03-29 14:12
     * @return OK
     */
    updateListModifyMark(headId: number): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/UpdateListModifyMark?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "HeadId=" + encodeURIComponent("" + headId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateListModifyMark(_response);
        });
    }

    protected processUpdateListModifyMark(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :料件-获取数据提取查询结果集
    创建人  :Ny6000
    创建时间:2019-04-10 13:05
     * @return OK
     */
    getImgExtractData(model: EntBasGoods): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetImgExtractData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImgExtractData(_response);
        });
    }

    protected processGetImgExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :成品-获取数据提取查询结果集
    创建人  :Ny6000
    创建时间:2019-04-10 13:15
     * @return OK
     */
    getExgExtractData(model: EntBasGoods): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/GetExgExtractData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExgExtractData(_response);
        });
    }

    protected processGetExgExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :保存所选手工提取待备案料件/成品记录
    创建人  :Ny6000
    创建时间:2019-04-10 13:26
     * @return OK
     */
    saveExtractData(str: string, flag: string, user: string, head: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/SaveExtractData?";
        if (str === undefined || str === null)
            throw new Error("The parameter 'str' must be defined and cannot be null.");
        else
            url_ += "str=" + encodeURIComponent("" + str) + "&"; 
        if (flag === undefined || flag === null)
            throw new Error("The parameter 'flag' must be defined and cannot be null.");
        else
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        if (head === undefined || head === null)
            throw new Error("The parameter 'head' must be defined and cannot be null.");
        else
            url_ += "head=" + encodeURIComponent("" + head) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveExtractData(_response);
        });
    }

    protected processSaveExtractData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :自动抽取数据插入资质备案料件/成品数据表
    创建人  :Ny6000
    创建时间:2019-04-10 13:57
     * @return OK
     */
    autoExtract(id: string, userName: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/AutoExtract/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined and cannot be null.");
        else
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAutoExtract(_response);
        });
    }

    protected processAutoExtract(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :根据所选编号获得最近已备案表头信息
    创建人  :Ny6000
    创建时间:2019-04-15 19:54
     * @return OK
     */
    headInfo(id: string): Promise<any> {
        let url_ = this.baseUrl + "/ItRecord/HeadInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadInfo(_response);
        });
    }

    protected processHeadInfo(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/ItRecord/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class LogOnClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    authLogin(name: string, pwd: string): Promise<any> {
        let url_ = this.baseUrl + "/LogOn/AuthLogin?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (pwd === undefined || pwd === null)
            throw new Error("The parameter 'pwd' must be defined and cannot be null.");
        else
            url_ += "pwd=" + encodeURIComponent("" + pwd) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthLogin(_response);
        });
    }

    protected processAuthLogin(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getAuthMenus(userId: string): Promise<any> {
        let url_ = this.baseUrl + "/LogOn/GetAuthMenus?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAuthMenus(_response);
        });
    }

    protected processGetAuthMenus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class MaterialRelationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    delete(model: EntCustomsCompanyMaterialParaCode): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/MaterialRelation/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 功能    :保存or新增
     * @return OK
     */
    headSave(model: EntCustomsCompanyMaterialParaCode): Promise<any> {
        let url_ = this.baseUrl + "/MaterialRelation/HeadSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadSave(_response);
        });
    }

    protected processHeadSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 导入物料关系数据
     * @return OK
     */
    datasInsert(models: EntCustomsCompanyMaterialParaCode[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/MaterialRelation/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsert(_response);
        });
    }

    protected processDatasInsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/MaterialRelation/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    getList(model: EntCustomsCompanyMaterialParaCode): Promise<any> {
        let url_ = this.baseUrl + "/MaterialRelation/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/MaterialRelation/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/MaterialRelation/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class MessageDockClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 发送报文EMS101
     * @param messgeId 主键
     * @param level (optional) 优先级，默认最低
     * @return OK
     */
    sendEMS101Message(messgeId: number, level: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/SendEMS101Message?";
        if (messgeId === undefined || messgeId === null)
            throw new Error("The parameter 'messgeId' must be defined and cannot be null.");
        else
            url_ += "messgeId=" + encodeURIComponent("" + messgeId) + "&"; 
        if (level !== undefined)
            url_ += "level=" + encodeURIComponent("" + level) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendEMS101Message(_response);
        });
    }

    protected processSendEMS101Message(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送报文EMS111
     * @param messgeID 主键
     * @param level (optional) 优先级，默认最低
     * @return OK
     */
    sendEMS111Message(messgeID: number, level: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/SendEMS111Message?";
        if (messgeID === undefined || messgeID === null)
            throw new Error("The parameter 'messgeID' must be defined and cannot be null.");
        else
            url_ += "messgeID=" + encodeURIComponent("" + messgeID) + "&"; 
        if (level !== undefined)
            url_ += "level=" + encodeURIComponent("" + level) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendEMS111Message(_response);
        });
    }

    protected processSendEMS111Message(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送报文INV101
     * @param messgeID 主键
     * @param level (optional) 优先级，默认最低
     * @return OK
     */
    sendINV101Message(messgeID: number, level: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/SendINV101Message?";
        if (messgeID === undefined || messgeID === null)
            throw new Error("The parameter 'messgeID' must be defined and cannot be null.");
        else
            url_ += "messgeID=" + encodeURIComponent("" + messgeID) + "&"; 
        if (level !== undefined)
            url_ += "level=" + encodeURIComponent("" + level) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendINV101Message(_response);
        });
    }

    protected processSendINV101Message(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 发送单一窗口报文
     * @return OK
     */
    sendSingleWindow(sendMessage: SendMessage): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/SendSingleWindow";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sendMessage);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendSingleWindow(_response);
        });
    }

    protected processSendSingleWindow(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 解析单一窗口
     * @return OK
     */
    recepitSingleWindow(dockSetting: DockSetting): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/RecepitSingleWindow";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dockSetting);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecepitSingleWindow(_response);
        });
    }

    protected processRecepitSingleWindow(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取单一窗口报文发送列表
     * @return OK
     */
    queryPagerOneWindowsList(request: SearchRequest): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/QueryPagerOneWindowsList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPagerOneWindowsList(_response);
        });
    }

    protected processQueryPagerOneWindowsList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获得报文类型列表
    创建人  :Ny6000
    创建时间:2019-04-17 15:27
     * @return OK
     */
    messageType(): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/MessageType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMessageType(_response);
        });
    }

    protected processMessageType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 功能    :获得报文操作标记列表
    创建人  :Ny6000
    创建时间:2019-04-17 15:27
     * @return OK
     */
    messageFlag(id: string): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/MessageFlag/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMessageFlag(_response);
        });
    }

    protected processMessageFlag(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取EMS101报文发送列表
     * @return OK
     */
    queryPagerEMS101InfoList(request: SearchRequest): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/QueryPagerEMS101InfoList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPagerEMS101InfoList(_response);
        });
    }

    protected processQueryPagerEMS101InfoList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取EMS111报文发送列表
     * @return OK
     */
    queryPagerEMS111InfoList(request: SearchRequest): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/QueryPagerEMS111InfoList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPagerEMS111InfoList(_response);
        });
    }

    protected processQueryPagerEMS111InfoList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取INV101报文发送列表
     * @return OK
     */
    queryPagerINV101InfoList(request: SearchRequest): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/QueryPagerINV101InfoList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPagerINV101InfoList(_response);
        });
    }

    protected processQueryPagerINV101InfoList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据ID生成报文
     * @return OK
     */
    sendMessage(sendMessage: SendMessage): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/SendMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sendMessage);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendMessage(_response);
        });
    }

    protected processSendMessage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 自动生成报文
     * @return OK
     */
    sendQueueMessage(dockSetting: DockSetting): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/SendQueueMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dockSetting);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendQueueMessage(_response);
        });
    }

    protected processSendQueueMessage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 解析报文
     * @param dockSetting 解析包文设置
     * @return OK
     */
    recepitMessage(dockSetting: DockSetting): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/RecepitMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dockSetting);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecepitMessage(_response);
        });
    }

    protected processRecepitMessage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 重置报文发送状态
     * @param type 报文类型
     * @param workflow 流水号
     * @return OK
     */
    resetSendStatus(type: string, workflow: string): Promise<any> {
        let url_ = this.baseUrl + "/MessageDock/ResetSendStatus?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        if (workflow === undefined || workflow === null)
            throw new Error("The parameter 'workflow' must be defined and cannot be null.");
        else
            url_ += "workflow=" + encodeURIComponent("" + workflow) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetSendStatus(_response);
        });
    }

    protected processResetSendStatus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/MessageDock/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class OrgClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取机构
     * @return OK
     */
    getOrgList(orgCode: string, orgName: string): Promise<any> {
        let url_ = this.baseUrl + "/Org/GetOrgList?";
        if (orgCode === undefined || orgCode === null)
            throw new Error("The parameter 'orgCode' must be defined and cannot be null.");
        else
            url_ += "orgCode=" + encodeURIComponent("" + orgCode) + "&"; 
        if (orgName === undefined || orgName === null)
            throw new Error("The parameter 'orgName' must be defined and cannot be null.");
        else
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrgList(_response);
        });
    }

    protected processGetOrgList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取机构
     * @return OK
     */
    getOrgListPager(model: EntSysOrganization): Promise<any> {
        let url_ = this.baseUrl + "/Org/GetOrgListPager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrgListPager(_response);
        });
    }

    protected processGetOrgListPager(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 添加/修改机构
     * @return OK
     */
    updateOrg(org: EntSysOrganization): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Org/UpdateOrg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(org);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateOrg(_response);
        });
    }

    protected processUpdateOrg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除机构
     * @return OK
     */
    deleteOrg(org: EntSysOrganization): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Org/DeleteOrg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(org);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOrg(_response);
        });
    }

    protected processDeleteOrg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }
}

export class PidDummyContrastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(model: EntPiddummycontrast): Promise<ReturnResultOfPageListOfEntPiddummycontrast> {
        let url_ = this.baseUrl + "/PidDummyContrast/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<ReturnResultOfPageListOfEntPiddummycontrast> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntPiddummycontrast.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntPiddummycontrast>(<any>null);
    }

    /**
     * @return OK
     */
    insertMany(models: EntPiddummycontrast[]): Promise<any> {
        let url_ = this.baseUrl + "/PidDummyContrast/InsertMany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertMany(_response);
        });
    }

    protected processInsertMany(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    update(models: EntPiddummycontrast[]): Promise<any> {
        let url_ = this.baseUrl + "/PidDummyContrast/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    exists(list: string[]): Promise<any> {
        let url_ = this.baseUrl + "/PidDummyContrast/Exists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExists(_response);
        });
    }

    protected processExists(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    dummyList(): Promise<ReturnResultOfListOfString> {
        let url_ = this.baseUrl + "/PidDummyContrast/DummyList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDummyList(_response);
        });
    }

    protected processDummyList(response: Response): Promise<ReturnResultOfListOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfListOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfListOfString>(<any>null);
    }

    /**
     * @return OK
     */
    insertDummy(m: EntInnerAseshJmyDummy): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/PidDummyContrast/InsertDummy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(m);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertDummy(_response);
        });
    }

    protected processInsertDummy(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/PidDummyContrast/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class PriceAlarmClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    queryTablePaged(model: EntSysPriceAlarm): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/pricealarm/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTablePaged(_response);
        });
    }

    protected processQueryTablePaged(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntSysPriceAlarm): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/pricealarm/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    save2(modelList: EntSysPriceAlarm[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/pricealarm/savemany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave2(_response);
        });
    }

    protected processSave2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    update(model: EntSysPriceAlarm): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/pricealarm/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    delete(model: EntSysPriceAlarm): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/pricealarm/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/PriceAlarm/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class PublisherClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 关联查询分页
     * @param request {Sql:"SELECT A.name,b.* FROM publisher AS A INNER JOIN book AS B ON A.Id = B.PublisherId where A.id=@id",Parameter:{id:3}
     * @return OK
     */
    queryPage(pageNumber: number, rowsPerPage: number, request: SqlParameterPair): Promise<any> {
        let url_ = this.baseUrl + "/api/publisher/querypage?";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (rowsPerPage === undefined || rowsPerPage === null)
            throw new Error("The parameter 'rowsPerPage' must be defined and cannot be null.");
        else
            url_ += "rowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPage(_response);
        });
    }

    protected processQueryPage(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 主子表实体查询
     * @param request {Sql:"SELECT * FROM publisher AS A INNER JOIN book AS B ON A.Id = B.PublisherId where A.id=@id;",Parameter:{id:1}}
     * @return OK
     */
    queryOntToManyRelation(request: SqlParameterPair): Promise<Publisher[]> {
        let url_ = this.baseUrl + "/api/publisher/queryonetomany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryOntToManyRelation(_response);
        });
    }

    protected processQueryOntToManyRelation(response: Response): Promise<Publisher[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Publisher.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Publisher[]>(<any>null);
    }

    /**
     * 同时查询多个实体
     * @param request {Sql:"select * from publisher;select * from book;"})
     * @return OK
     */
    queryMultiple(request: SqlParameterPair): Promise<TupleOfListOfPublisherAndListOfBook> {
        let url_ = this.baseUrl + "/api/publisher/querymultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryMultiple(_response);
        });
    }

    protected processQueryMultiple(response: Response): Promise<TupleOfListOfPublisherAndListOfBook> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TupleOfListOfPublisherAndListOfBook.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TupleOfListOfPublisherAndListOfBook>(<any>null);
    }

    /**
     * 主子表实体批量插入
     * @return No Content
     */
    insertOneToManyRelation(publishers: Publisher[]): Promise<void> {
        let url_ = this.baseUrl + "/api/publisher/insertonetomany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(publishers);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertOneToManyRelation(_response);
        });
    }

    protected processInsertOneToManyRelation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 主子表实体批量更新
     * @return No Content
     */
    updateOneToManyRelation(publishers: Publisher[]): Promise<void> {
        let url_ = this.baseUrl + "/api/publisher/updateonetomany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(publishers);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateOneToManyRelation(_response);
        });
    }

    protected processUpdateOneToManyRelation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 主子表实体批量删除
     * @return No Content
     */
    deleteOneToManyRelation(publishers: Publisher[]): Promise<void> {
        let url_ = this.baseUrl + "/api/publisher/deleteonetomany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(publishers);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOneToManyRelation(_response);
        });
    }

    protected processDeleteOneToManyRelation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 主子表实体批量合并
     * @return No Content
     */
    mergeOneToManyRelation(publishers: Publisher[]): Promise<void> {
        let url_ = this.baseUrl + "/api/publisher/mergeonetomany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(publishers);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMergeOneToManyRelation(_response);
        });
    }

    protected processMergeOneToManyRelation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Publisher/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class PurchaseOrderClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 新增
     * @return OK
     */
    insert(model: EntCustomsErpPurchaseorder): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    update(model: EntCustomsErpPurchaseorder): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(model: EntCustomsErpPurchaseorder): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同主表协议关系数据
     * @return OK
     */
    datasInsert(models: EntCustomsErpPurchaseorder[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/PurchaseOrder/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsert(_response);
        });
    }

    protected processDatasInsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 新增
     * @return OK
     */
    insertList(model: EntCustomsErpPurchaseorderlist): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/insertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertList(_response);
        });
    }

    protected processInsertList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateList(model: EntCustomsErpPurchaseorderlist): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/updateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateList(_response);
        });
    }

    protected processUpdateList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteList(model: EntCustomsErpPurchaseorderlist): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/deleteList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUploadList(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/PurchaseOrder/updateUploadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadList(_response);
        });
    }

    protected processUpdateUploadList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同子表协议关系数据
     * @return OK
     */
    datasInsertList(models: EntCustomsErpPurchaseorderlist[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/PurchaseOrder/DatasInsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsertList(_response);
        });
    }

    protected processDatasInsertList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntCustomsErpPurchaseorder): Promise<any> {
        let url_ = this.baseUrl + "/PurchaseOrder/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetByID(model: EntCustomsErpPurchaseorder): Promise<any> {
        let url_ = this.baseUrl + "/PurchaseOrder/QueryHeadPagerDataSetByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetList(model: EntCustomsErpPurchaseorderlist): Promise<any> {
        let url_ = this.baseUrl + "/PurchaseOrder/QueryHeadPagerDataSetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetList(_response);
        });
    }

    protected processQueryHeadPagerDataSetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetListByID(model: EntCustomsErpPurchaseorderlist): Promise<any> {
        let url_ = this.baseUrl + "/PurchaseOrder/QueryHeadPagerDataSetListByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetListByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetListByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/PurchaseOrder/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSendList(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/PurchaseOrder/QueryHeadPagerDataSetSendList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSendList(_response);
        });
    }

    protected processQueryHeadPagerDataSetSendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class ReceiptsPaymentsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(condition: EntTgBusinessRp): Promise<ReturnResultOfPageListOfEntTgBusinessRp> {
        let url_ = this.baseUrl + "/ReceiptsPayments/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<ReturnResultOfPageListOfEntTgBusinessRp> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntTgBusinessRp.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntTgBusinessRp>(<any>null);
    }

    /**
     * 同步报关单数据
     * @return OK
     */
    sysnBusinessRp(condition: EntTgBusinessRp): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ReceiptsPayments/SysnBusinessRp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSysnBusinessRp(_response);
        });
    }

    protected processSysnBusinessRp(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增数据
     * @return OK
     */
    insert(condition: EntTgBusinessRp): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ReceiptsPayments/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增数据
     * @return OK
     */
    insert2(list: EntTgBusinessRp[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ReceiptsPayments/InsertMany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert2(_response);
        });
    }

    protected processInsert2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增数据
     * @return OK
     */
    update(condition: EntTgBusinessRp): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ReceiptsPayments/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 批量修改数据
     * @return OK
     */
    updateMany(list: EntTgBusinessRp[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ReceiptsPayments/UpdateMany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMany(_response);
        });
    }

    protected processUpdateMany(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(id: number): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/ReceiptsPayments/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/ReceiptsPayments/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class RightClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getSysList(): Promise<any> {
        let url_ = this.baseUrl + "/Right/GetSysList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSysList(_response);
        });
    }

    protected processGetSysList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListByParentMenu(parentMenuCode: string, subSystemId: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/GetListByParentMenu?";
        if (parentMenuCode === undefined || parentMenuCode === null)
            throw new Error("The parameter 'parentMenuCode' must be defined and cannot be null.");
        else
            url_ += "ParentMenuCode=" + encodeURIComponent("" + parentMenuCode) + "&"; 
        if (subSystemId === undefined || subSystemId === null)
            throw new Error("The parameter 'subSystemId' must be defined and cannot be null.");
        else
            url_ += "SubSystemId=" + encodeURIComponent("" + subSystemId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListByParentMenu(_response);
        });
    }

    protected processGetListByParentMenu(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 菜单列表查询
     * @return OK
     */
    getList(model: EntSysMenu): Promise<any> {
        let url_ = this.baseUrl + "/Right/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getPanelListByMenuCode(menuCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/GetPanelListByMenuCode?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPanelListByMenuCode(_response);
        });
    }

    protected processGetPanelListByMenuCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getButtonListByMenuCode(menuCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/GetButtonListByMenuCode?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "menuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetButtonListByMenuCode(_response);
        });
    }

    protected processGetButtonListByMenuCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存菜单权限信息
     * @return OK
     */
    saveMenu(value: EntSysMenu): Promise<any> {
        let url_ = this.baseUrl + "/Right/SaveMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveMenu(_response);
        });
    }

    protected processSaveMenu(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Updates the menu.
     * @param value The value.
     * @return OK
     */
    updateMenu(value: EntSysMenu): Promise<any> {
        let url_ = this.baseUrl + "/Right/UpdateMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMenu(_response);
        });
    }

    protected processUpdateMenu(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除指定菜单代码记录
     * @return OK
     */
    deleteMenu(menuCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/DeleteMenu?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "menuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMenu(_response);
        });
    }

    protected processDeleteMenu(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkPanelExists(menuCode: string, menuPanelId: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/CheckPanelExists?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        if (menuPanelId === undefined || menuPanelId === null)
            throw new Error("The parameter 'menuPanelId' must be defined and cannot be null.");
        else
            url_ += "MenuPanelId=" + encodeURIComponent("" + menuPanelId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckPanelExists(_response);
        });
    }

    protected processCheckPanelExists(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存Panel信息
     * @return OK
     */
    savePanel(value: EntSysPanel): Promise<any> {
        let url_ = this.baseUrl + "/Right/SavePanel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSavePanel(_response);
        });
    }

    protected processSavePanel(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    deletePanel(menuCode: string, menuPanelId: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/DeletePanel?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        if (menuPanelId === undefined || menuPanelId === null)
            throw new Error("The parameter 'menuPanelId' must be defined and cannot be null.");
        else
            url_ += "MenuPanelId=" + encodeURIComponent("" + menuPanelId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePanel(_response);
        });
    }

    protected processDeletePanel(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    checkPanelButtonExists(menuCode: string, menuPanelId: string, menuPanelOpId: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/CheckPanelButtonExists?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        if (menuPanelId === undefined || menuPanelId === null)
            throw new Error("The parameter 'menuPanelId' must be defined and cannot be null.");
        else
            url_ += "MenuPanelId=" + encodeURIComponent("" + menuPanelId) + "&"; 
        if (menuPanelOpId === undefined || menuPanelOpId === null)
            throw new Error("The parameter 'menuPanelOpId' must be defined and cannot be null.");
        else
            url_ += "MenuPanelOpId=" + encodeURIComponent("" + menuPanelOpId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckPanelButtonExists(_response);
        });
    }

    protected processCheckPanelButtonExists(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存Panel信息
     * @return OK
     */
    savePanelButton(value: EntSysPanelOperation): Promise<any> {
        let url_ = this.baseUrl + "/Right/SavePanelButton";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSavePanelButton(_response);
        });
    }

    protected processSavePanelButton(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除指定菜单代码,PanelId,ButtonId记录
     * @return OK
     */
    deletePanelButton(menuCode: string, menuPanelId: string, menuPanelOpId: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/DeletePanelButton?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        if (menuPanelId === undefined || menuPanelId === null)
            throw new Error("The parameter 'menuPanelId' must be defined and cannot be null.");
        else
            url_ += "MenuPanelId=" + encodeURIComponent("" + menuPanelId) + "&"; 
        if (menuPanelOpId === undefined || menuPanelOpId === null)
            throw new Error("The parameter 'menuPanelOpId' must be defined and cannot be null.");
        else
            url_ += "MenuPanelOpId=" + encodeURIComponent("" + menuPanelOpId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePanelButton(_response);
        });
    }

    protected processDeletePanelButton(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getList2019(model: EntSysMenu): Promise<any> {
        let url_ = this.baseUrl + "/Right/GetList2019";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList2019(_response);
        });
    }

    protected processGetList2019(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    menuOperList2019(menuCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/MenuOperList2019?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMenuOperList2019(_response);
        });
    }

    protected processMenuOperList2019(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    menuOperCheck(menuCode: string, operId: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/MenuOperCheck?";
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "MenuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        if (operId === undefined || operId === null)
            throw new Error("The parameter 'operId' must be defined and cannot be null.");
        else
            url_ += "OperId=" + encodeURIComponent("" + operId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMenuOperCheck(_response);
        });
    }

    protected processMenuOperCheck(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    menuOperSave(model: EntSysOperation): Promise<any> {
        let url_ = this.baseUrl + "/Right/MenuOperSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMenuOperSave(_response);
        });
    }

    protected processMenuOperSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    menuOperDelete(id: string): Promise<any> {
        let url_ = this.baseUrl + "/Right/MenuOperDelete/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMenuOperDelete(_response);
        });
    }

    protected processMenuOperDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class RoleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取用户角色分页列表
     * @param model_id (optional) 
     * @param model_roleId (optional) 
     * @param model_roleNameCn (optional) 
     * @param model_status (optional) 
     * @param model_createBy (optional) 
     * @param model_createTime (optional) 
     * @param model_descr (optional) 
     * @param model_usd1 (optional) 
     * @param model_roleNameEn (optional) 
     * @param model_pageSize (optional) 
     * @param model_pageIndex (optional) 
     * @param model_totalCount (optional) 
     * @return OK
     */
    getRoleListPager(model_id: number | null | undefined, model_roleId: string | null | undefined, model_roleNameCn: string | null | undefined, model_status: string | null | undefined, model_createBy: string | null | undefined, model_createTime: Date | null | undefined, model_descr: string | null | undefined, model_usd1: string | null | undefined, model_roleNameEn: string | null | undefined, model_pageSize: number | null | undefined, model_pageIndex: number | null | undefined, model_totalCount: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Role/GetRoleListPager/{Id}?";
        if (model_id !== undefined)
            url_ += "model.id=" + encodeURIComponent("" + model_id) + "&"; 
        if (model_roleId !== undefined)
            url_ += "model.roleId=" + encodeURIComponent("" + model_roleId) + "&"; 
        if (model_roleNameCn !== undefined)
            url_ += "model.roleNameCn=" + encodeURIComponent("" + model_roleNameCn) + "&"; 
        if (model_status !== undefined)
            url_ += "model.status=" + encodeURIComponent("" + model_status) + "&"; 
        if (model_createBy !== undefined)
            url_ += "model.createBy=" + encodeURIComponent("" + model_createBy) + "&"; 
        if (model_createTime !== undefined)
            url_ += "model.createTime=" + encodeURIComponent(model_createTime ? "" + model_createTime.toJSON() : "") + "&"; 
        if (model_descr !== undefined)
            url_ += "model.descr=" + encodeURIComponent("" + model_descr) + "&"; 
        if (model_usd1 !== undefined)
            url_ += "model.usd1=" + encodeURIComponent("" + model_usd1) + "&"; 
        if (model_roleNameEn !== undefined)
            url_ += "model.roleNameEn=" + encodeURIComponent("" + model_roleNameEn) + "&"; 
        if (model_pageSize !== undefined)
            url_ += "model.pageSize=" + encodeURIComponent("" + model_pageSize) + "&"; 
        if (model_pageIndex !== undefined)
            url_ += "model.pageIndex=" + encodeURIComponent("" + model_pageIndex) + "&"; 
        if (model_totalCount !== undefined)
            url_ += "model.totalCount=" + encodeURIComponent("" + model_totalCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRoleListPager(_response);
        });
    }

    protected processGetRoleListPager(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 添加角色
     * @return OK
     */
    addRole(role: EntSysRole): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Role/AddRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(role);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddRole(_response);
        });
    }

    protected processAddRole(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改角色
     * @return OK
     */
    updateRole(role: EntSysRole): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Role/UpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(role);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateRole(_response);
        });
    }

    protected processUpdateRole(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除角色
     * @return OK
     */
    deleteRole(role: EntSysRole): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Role/DeleteRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(role);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRole(_response);
        });
    }

    protected processDeleteRole(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取平台注册企业列表
     * @return OK
     */
    getOrganizationsList(): Promise<any> {
        let url_ = this.baseUrl + "/Role/GetOrganizationsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganizationsList(_response);
        });
    }

    protected processGetOrganizationsList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取平台企业的系统列表
     * @param orgCode 企业代码
     * @return OK
     */
    getSubSystems(orgCode: string): Promise<any> {
        let url_ = this.baseUrl + "/Role/GetSubSystems?";
        if (orgCode === undefined || orgCode === null)
            throw new Error("The parameter 'orgCode' must be defined and cannot be null.");
        else
            url_ += "orgCode=" + encodeURIComponent("" + orgCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSubSystems(_response);
        });
    }

    protected processGetSubSystems(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询子系统的所有菜单列表
     * @param subId 子系统ID
     * @return OK
     */
    getMenusBySubId(subId: string): Promise<any> {
        let url_ = this.baseUrl + "/Role/GetMenusBySubId?";
        if (subId === undefined || subId === null)
            throw new Error("The parameter 'subId' must be defined and cannot be null.");
        else
            url_ += "subId=" + encodeURIComponent("" + subId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMenusBySubId(_response);
        });
    }

    protected processGetMenusBySubId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 返回角色对应菜单
     * @param roleId 角色ID
     * @return OK
     */
    getRoleMenus(roleId: string): Promise<any> {
        let url_ = this.baseUrl + "/Role/GetRoleMenus?";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined and cannot be null.");
        else
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRoleMenus(_response);
        });
    }

    protected processGetRoleMenus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存角色权限
     * @param model 角色参数
     * @return OK
     */
    saveRoleMenus(model: EntSysRoleInMenu): Promise<any> {
        let url_ = this.baseUrl + "/Role/SaveRoleMenus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveRoleMenus(_response);
        });
    }

    protected processSaveRoleMenus(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 绑定角色下拉使用
     * @return OK
     */
    getAllRoleTable(): Promise<any> {
        let url_ = this.baseUrl + "/Role/GetAllRoleTable";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllRoleTable(_response);
        });
    }

    protected processGetAllRoleTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class RpCustomClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getAllDefine(): Promise<any> {
        let url_ = this.baseUrl + "/RpCustom/GetAllDefine";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllDefine(_response);
        });
    }

    protected processGetAllDefine(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryByPager(model: EntRpCustom): Promise<any> {
        let url_ = this.baseUrl + "/RpCustom/QueryByPager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryByPager(_response);
        });
    }

    protected processQueryByPager(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    query(model: EntRpCustom): Promise<any> {
        let url_ = this.baseUrl + "/RpCustom/Query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class RulPropertyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getPager(pageIndex: number, pageSize: number, lotID: string, descr: string): Promise<any> {
        let url_ = this.baseUrl + "/RulProperty/GetPager?";
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (lotID === undefined || lotID === null)
            throw new Error("The parameter 'lotID' must be defined and cannot be null.");
        else
            url_ += "lotID=" + encodeURIComponent("" + lotID) + "&"; 
        if (descr === undefined || descr === null)
            throw new Error("The parameter 'descr' must be defined and cannot be null.");
        else
            url_ += "descr=" + encodeURIComponent("" + descr) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPager(_response);
        });
    }

    protected processGetPager(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 添加批次属性
     * @return OK
     */
    insert(rulProperty: EntRulProperty): Promise<any> {
        let url_ = this.baseUrl + "/RulProperty/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rulProperty);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 更新批次属性
     * @return OK
     */
    update(runProperty: EntRulProperty): Promise<any> {
        let url_ = this.baseUrl + "/RulProperty/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(runProperty);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(lotID: string): Promise<any> {
        let url_ = this.baseUrl + "/RulProperty/Delete?";
        if (lotID === undefined || lotID === null)
            throw new Error("The parameter 'lotID' must be defined and cannot be null.");
        else
            url_ += "lotID=" + encodeURIComponent("" + lotID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/RulProperty/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SapInvoiceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 分页获取数据
     * @return OK
     */
    queryTablePaged(model: EntSapInvoice): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/SapInvoice/QueryTablePaged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTablePaged(_response);
        });
    }

    protected processQueryTablePaged(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/SapInvoice/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class ScheduleagreementClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 导入框架协议关系数据
     * @return OK
     */
    datasInsert(models: EntCustomsErpScheduleagreement[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/Scheduleagreement/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsert(_response);
        });
    }

    protected processDatasInsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 新增
     * @return OK
     */
    insert(model: EntCustomsErpScheduleagreement): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Scheduleagreement/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    update(model: EntCustomsErpScheduleagreement): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Scheduleagreement/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Scheduleagreement/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(model: EntCustomsErpScheduleagreement): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Scheduleagreement/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntCustomsErpScheduleagreement): Promise<any> {
        let url_ = this.baseUrl + "/Scheduleagreement/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/Scheduleagreement/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取海关大数据接口URL
     * @return OK
     */
    getHgUri(): Promise<any> {
        let url_ = this.baseUrl + "/Scheduleagreement/GetHgUri";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHgUri(_response);
        });
    }

    protected processGetHgUri(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetByID(model: EntCustomsErpScheduleagreement): Promise<any> {
        let url_ = this.baseUrl + "/Scheduleagreement/QueryHeadPagerDataSetByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Scheduleagreement/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SecurityUserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询用户列表
     * @return OK
     */
    getUserList(model: EntSysUser): Promise<any> {
        let url_ = this.baseUrl + "/SecurityUser/GetUserList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserList(_response);
        });
    }

    protected processGetUserList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存用户信息
     * @return OK
     */
    saveSysUser(value: EntSysUser): Promise<any> {
        let url_ = this.baseUrl + "/SecurityUser/SaveSysUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveSysUser(_response);
        });
    }

    protected processSaveSysUser(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取用户信息
     * @return OK
     */
    getSysUserByUserId(userId: number): Promise<any> {
        let url_ = this.baseUrl + "/SecurityUser/GetSysUserByUserId?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSysUserByUserId(_response);
        });
    }

    protected processGetSysUserByUserId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除用户信息
     * @return OK
     */
    deleteSysUserByUserId(userId: number): Promise<any> {
        let url_ = this.baseUrl + "/SecurityUser/DeleteSysUserByUserId?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSysUserByUserId(_response);
        });
    }

    protected processDeleteSysUserByUserId(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class SellerOrderClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 新增
     * @return OK
     */
    insert(model: EntCustomsErpSellerorder): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    update(model: EntCustomsErpSellerorder): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(model: EntCustomsErpSellerorder): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUpload(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/updateUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUpload(_response);
        });
    }

    protected processUpdateUpload(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同主表协议关系数据
     * @return OK
     */
    datasInsert(models: EntCustomsErpSellerorder[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/SellerOrder/DatasInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsert(_response);
        });
    }

    protected processDatasInsert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 新增
     * @return OK
     */
    insertList(model: EntCustomsErpSellerorderlist): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/insertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertList(_response);
        });
    }

    protected processInsertList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateList(model: EntCustomsErpSellerorderlist): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/updateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateList(_response);
        });
    }

    protected processUpdateList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    deleteList(model: EntCustomsErpSellerorderlist): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/deleteList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteList(_response);
        });
    }

    protected processDeleteList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改
     * @return OK
     */
    updateUploadList(idList: string[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/SellerOrder/updateUploadList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUploadList(_response);
        });
    }

    protected processUpdateUploadList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 导入合同子表协议关系数据
     * @return OK
     */
    datasInsertList(models: EntCustomsErpSellerorderlist[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/SellerOrder/DatasInsertList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDatasInsertList(_response);
        });
    }

    protected processDatasInsertList(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntCustomsErpSellerorder): Promise<any> {
        let url_ = this.baseUrl + "/SellerOrder/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetByID(model: EntCustomsErpSellerorder): Promise<any> {
        let url_ = this.baseUrl + "/SellerOrder/QueryHeadPagerDataSetByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetList(model: EntCustomsErpSellerorderlist): Promise<any> {
        let url_ = this.baseUrl + "/SellerOrder/QueryHeadPagerDataSetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetList(_response);
        });
    }

    protected processQueryHeadPagerDataSetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetListByID(model: EntCustomsErpSellerorderlist): Promise<any> {
        let url_ = this.baseUrl + "/SellerOrder/QueryHeadPagerDataSetListByID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetListByID(_response);
        });
    }

    protected processQueryHeadPagerDataSetListByID(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSend(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/SellerOrder/QueryHeadPagerDataSetSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSend(_response);
        });
    }

    protected processQueryHeadPagerDataSetSend(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSetSendList(idList: string[]): Promise<any> {
        let url_ = this.baseUrl + "/SellerOrder/QueryHeadPagerDataSetSendList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSetSendList(_response);
        });
    }

    protected processQueryHeadPagerDataSetSendList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class StockAnalysisClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询库存
     * @return OK
     */
    query(request: SearchRequest): Promise<ReturnResultOfPageListOfEntGoldenStockHead> {
        let url_ = this.baseUrl + "/stock/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockHead> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockHead.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockHead>(<any>null);
    }

    /**
     * 新增库存
     * @return OK
     */
    insert(model: EntGoldenStockHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改库存
     * @return OK
     */
    update(model: EntGoldenStockHead): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除库存
     * @return OK
     */
    delete(models: EntGoldenStockHead[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/stock/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询库存期初数
     * @param headerId 表头
     * @return OK
     */
    queryStockInitials(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenStockInitial> {
        let url_ = this.baseUrl + "/stock/queryinitial/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockInitials(_response);
        });
    }

    protected processQueryStockInitials(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockInitial> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockInitial.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockInitial>(<any>null);
    }

    /**
     * 查询库存期初数
     * @param condition 表头
     * @return OK
     */
    queryStockInitials2(condition: EntGoldenStockInitial): Promise<ReturnResultOfPageListOfEntGoldenStockInitial> {
        let url_ = this.baseUrl + "/stock/queryinitial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockInitials2(_response);
        });
    }

    protected processQueryStockInitials2(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockInitial> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockInitial.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockInitial>(<any>null);
    }

    /**
     * 新增核期初数
     * @return OK
     */
    insertStockInitial(model: EntGoldenStockInitial): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insertinitial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockInitial(_response);
        });
    }

    protected processInsertStockInitial(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增核期初数
     * @return OK
     */
    insertStockInitial2(list: EntGoldenStockInitial[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insertinitiallist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockInitial2(_response);
        });
    }

    protected processInsertStockInitial2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增核实际数
     * @return OK
     */
    insertStockInitial3(model: EntGoldenStockActual): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insertactual";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockInitial3(_response);
        });
    }

    protected processInsertStockInitial3(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改期初数
     * @return OK
     */
    updateStockInitial(model: EntGoldenStockInitial): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/updateinitial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStockInitial(_response);
        });
    }

    protected processUpdateStockInitial(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除期初数
     * @return OK
     */
    deleteStockInitial(models: EntGoldenStockInitial[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/stock/deleteinitial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStockInitial(_response);
        });
    }

    protected processDeleteStockInitial(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询库存实际数
     * @param headerId 表头
     * @return OK
     */
    queryStockActual(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenStockActual> {
        let url_ = this.baseUrl + "/stock/queryactual/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockActual(_response);
        });
    }

    protected processQueryStockActual(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockActual> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockActual.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockActual>(<any>null);
    }

    /**
     * 查询库存实际数
     * @param condition 表头
     * @return OK
     */
    queryStockActual2(condition: EntGoldenStockActual): Promise<ReturnResultOfPageListOfEntGoldenStockActual> {
        let url_ = this.baseUrl + "/stock/queryactual";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockActual2(_response);
        });
    }

    protected processQueryStockActual2(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockActual> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockActual.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockActual>(<any>null);
    }

    /**
     * 验证料号
     * @param model 表头
     * @return OK
     */
    validateImgNo(model: EntGoldenStockActual): Promise<ReturnResultOfEntGoldenOrgImgHistory> {
        let url_ = this.baseUrl + "/stock/validateimgno";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidateImgNo(_response);
        });
    }

    protected processValidateImgNo(response: Response): Promise<ReturnResultOfEntGoldenOrgImgHistory> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfEntGoldenOrgImgHistory.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfEntGoldenOrgImgHistory>(<any>null);
    }

    /**
     * 新增核实际数
     * @return OK
     */
    insertStockActual(list: EntGoldenStockActual[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insertactuallist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockActual(_response);
        });
    }

    protected processInsertStockActual(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改实际数
     * @return OK
     */
    updateStockActual(model: EntGoldenStockActual): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/updateactual";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStockActual(_response);
        });
    }

    protected processUpdateStockActual(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除实际数
     * @return OK
     */
    deleteStockActual(models: EntGoldenStockActual[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/stock/deleteactual";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStockActual(_response);
        });
    }

    protected processDeleteStockActual(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询库存清单
     * @return OK
     */
    queryBills(ieFlag: string, headerId: number): Promise<ReturnResultOfPageListOfEntGoldenStockBill> {
        let url_ = this.baseUrl + "/stock/querybill/{ieFlag}/{headerId}";
        if (ieFlag === undefined || ieFlag === null)
            throw new Error("The parameter 'ieFlag' must be defined.");
        url_ = url_.replace("{ieFlag}", encodeURIComponent("" + ieFlag)); 
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBills(_response);
        });
    }

    protected processQueryBills(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockBill> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockBill.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockBill>(<any>null);
    }

    /**
     * 预核查汇总表计算
     * @param headId 预核查ID
     * @return OK
     */
    calcCollect(headId: string): Promise<any> {
        let url_ = this.baseUrl + "/stock/calccollect/{headId}";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined.");
        url_ = url_.replace("{headId}", encodeURIComponent("" + headId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCalcCollect(_response);
        });
    }

    protected processCalcCollect(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增库存清单
     * @return OK
     */
    insertBill(model: EntGoldenStockBill): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insertbill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBill(_response);
        });
    }

    protected processInsertBill(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改库存
     * @return OK
     */
    updateBill(model: EntGoldenStockBill): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/updatebill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBill(_response);
        });
    }

    protected processUpdateBill(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除库存
     * @return OK
     */
    deleteBill(models: EntGoldenStockBill[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/stock/deletebill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBill(_response);
        });
    }

    protected processDeleteBill(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询库折料汇总
     * @param headerId 表头
     * @return OK
     */
    queryStockConverts(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenStockConvert> {
        let url_ = this.baseUrl + "/stock/queryconvert/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockConverts(_response);
        });
    }

    protected processQueryStockConverts(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockConvert> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockConvert.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockConvert>(<any>null);
    }

    /**
     * 查询库折料汇总
     * @return OK
     */
    queryStockConverts2(condition: EntGoldenStockConvert): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/stock/queryconvert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockConverts2(_response);
        });
    }

    protected processQueryStockConverts2(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * 折料汇总
     * @return OK
     */
    convertImg(head: EntGoldenStockHead): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/stock/convertimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(head);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConvertImg(_response);
        });
    }

    protected processConvertImg(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 预核查汇总表查询
     * @param head 表头
     * @return OK
     */
    collection(head: EntGoldenStockHead): Promise<any> {
        let url_ = this.baseUrl + "/stock/collection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(head);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCollection(_response);
        });
    }

    protected processCollection(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 预核查汇总表导出
     * @param head 表头
     * @return OK
     */
    collectionExp(head: EntGoldenStockHead): Promise<any> {
        let url_ = this.baseUrl + "/stock/collectionexp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(head);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCollectionExp(_response);
        });
    }

    protected processCollectionExp(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 新增折料汇总
     * @return OK
     */
    insertStockConvert(model: EntGoldenStockConvert): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/insertconvert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockConvert(_response);
        });
    }

    protected processInsertStockConvert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改折料汇总
     * @return OK
     */
    updateStockConvert(model: EntGoldenStockConvert): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/updateconvert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStockConvert(_response);
        });
    }

    protected processUpdateStockConvert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除折料汇总
     * @return OK
     */
    deleteStockConvert(models: EntGoldenStockConvert[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/stock/deleteconvert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStockConvert(_response);
        });
    }

    protected processDeleteStockConvert(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 查询库料件汇总
     * @param headerId 表头
     * @return OK
     */
    queryStockTheoryImgs(headerId: number): Promise<ReturnResultOfPageListOfEntGoldenStockTheoryImg> {
        let url_ = this.baseUrl + "/stock/querytheoryimg/{headerId}";
        if (headerId === undefined || headerId === null)
            throw new Error("The parameter 'headerId' must be defined.");
        url_ = url_.replace("{headerId}", encodeURIComponent("" + headerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryStockTheoryImgs(_response);
        });
    }

    protected processQueryStockTheoryImgs(response: Response): Promise<ReturnResultOfPageListOfEntGoldenStockTheoryImg> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntGoldenStockTheoryImg.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntGoldenStockTheoryImg>(<any>null);
    }

    /**
     * 新增料件汇总
     * @return OK
     */
    insertStockTheoryImg(model: EntGoldenStockTheoryImg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/inserttheoryimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertStockTheoryImg(_response);
        });
    }

    protected processInsertStockTheoryImg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 修改料件汇总
     * @return OK
     */
    updateStockTheoryImg(model: EntGoldenStockTheoryImg): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/stock/updatetheoryimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStockTheoryImg(_response);
        });
    }

    protected processUpdateStockTheoryImg(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除料件汇总
     * @return OK
     */
    deleteStockTheoryImg(models: EntGoldenStockTheoryImg[]): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/stock/deletetheoryimg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(models);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStockTheoryImg(_response);
        });
    }

    protected processDeleteStockTheoryImg(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/StockAnalysis/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class StockBillClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    queryPageList(model: EntGoldenStockBill): Promise<any> {
        let url_ = this.baseUrl + "/StockBill/QueryPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPageList(_response);
        });
    }

    protected processQueryPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryBillPageList(model: EntGoldenStockBill): Promise<any> {
        let url_ = this.baseUrl + "/StockBill/QueryBillPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryBillPageList(_response);
        });
    }

    protected processQueryBillPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    addStockBill(headId: number, billIds: string): Promise<any> {
        let url_ = this.baseUrl + "/StockBill/AddStockBill?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (billIds === undefined || billIds === null)
            throw new Error("The parameter 'billIds' must be defined and cannot be null.");
        else
            url_ += "billIds=" + encodeURIComponent("" + billIds) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddStockBill(_response);
        });
    }

    protected processAddStockBill(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    autoCollect(headId: number, iEFlag: string): Promise<any> {
        let url_ = this.baseUrl + "/StockBill/AutoCollect?";
        if (headId === undefined || headId === null)
            throw new Error("The parameter 'headId' must be defined and cannot be null.");
        else
            url_ += "headId=" + encodeURIComponent("" + headId) + "&"; 
        if (iEFlag === undefined || iEFlag === null)
            throw new Error("The parameter 'iEFlag' must be defined and cannot be null.");
        else
            url_ += "IEFlag=" + encodeURIComponent("" + iEFlag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAutoCollect(_response);
        });
    }

    protected processAutoCollect(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    deleteStockBill(billIds: string): Promise<any> {
        let url_ = this.baseUrl + "/StockBill/DeleteStockBill?";
        if (billIds === undefined || billIds === null)
            throw new Error("The parameter 'billIds' must be defined and cannot be null.");
        else
            url_ += "billIds=" + encodeURIComponent("" + billIds) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStockBill(_response);
        });
    }

    protected processDeleteStockBill(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/StockBill/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SubSystemClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 获取所有子系统列表
     * @return OK
     */
    getSubList(): Promise<any> {
        let url_ = this.baseUrl + "/SubSystem/GetSubList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSubList(_response);
        });
    }

    protected processGetSubList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 分页查询
     * @return OK
     */
    getTablePager(model: EntSysSubsystem): Promise<any> {
        let url_ = this.baseUrl + "/SubSystem/GetTablePager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTablePager(_response);
        });
    }

    protected processGetTablePager(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 添加子系统
     * @return OK
     */
    insert(subSystem: EntSysSubsystem): Promise<any> {
        let url_ = this.baseUrl + "/SubSystem/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(subSystem);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 修改子系统
     * @return OK
     */
    update(subSystem: EntSysSubsystem): Promise<any> {
        let url_ = this.baseUrl + "/SubSystem/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(subSystem);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除子系统
     * @return OK
     */
    delete(id: string): Promise<any> {
        let url_ = this.baseUrl + "/SubSystem/Delete/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class SupplierClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    queryTablePaged(model: EntTgSysSupplier): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/Supplier/QueryTablePaged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTablePaged(_response);
        });
    }

    protected processQueryTablePaged(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    getRecordNoPager(model: EntTgSysSupplier): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/Supplier/GetRecordNoPager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecordNoPager(_response);
        });
    }

    protected processGetRecordNoPager(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntTgSysSupplier): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Supplier/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: RequestModelOfDataTable): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Supplier/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    delete(model: EntTgSysSupplier): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Supplier/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    bulkDelete(ids: number[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/Supplier/BulkDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBulkDelete(_response);
        });
    }

    protected processBulkDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/Supplier/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SyncTableClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 同步云环境数据
     * @return OK
     */
    aysnComplex(yundata: EntTgSysComplex[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/sync/complex";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(yundata);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAysnComplex(_response);
        });
    }

    protected processAysnComplex(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    importComplex(inportcomplex: EntTgSysComplex[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/sync/importcomplex";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inportcomplex);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportComplex(_response);
        });
    }

    protected processImportComplex(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 同步云环境数据
     * @return OK
     */
    aysnCiq(yundata: EntTgSysCiq[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/sync/ciq";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(yundata);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAysnCiq(_response);
        });
    }

    protected processAysnCiq(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 同步云环境数据
     * @return OK
     */
    aysnCustoms(yundata: EntTgSysCustoms[]): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/sync/customs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(yundata);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAysnCustoms(_response);
        });
    }

    protected processAysnCustoms(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/SyncTable/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SysAppSetupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getSysAppSetupList(key: string): Promise<any> {
        let url_ = this.baseUrl + "/SysAppSetup/GetSysAppSetupList?";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSysAppSetupList(_response);
        });
    }

    protected processGetSysAppSetupList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getSysAppSetupByKey(key: string): Promise<any> {
        let url_ = this.baseUrl + "/SysAppSetup/GetSysAppSetupByKey?";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined and cannot be null.");
        else
            url_ += "key=" + encodeURIComponent("" + key) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSysAppSetupByKey(_response);
        });
    }

    protected processGetSysAppSetupByKey(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/SysAppSetup/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 查询系统设置
     * @return OK
     */
    getPageList(entity: EntSysAppSetup): Promise<any> {
        let url_ = this.baseUrl + "/SysAppSetup/GetPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageList(_response);
        });
    }

    protected processGetPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除系统设置
     * @return OK
     */
    delete(entity: EntSysAppSetup): Promise<any> {
        let url_ = this.baseUrl + "/SysAppSetup/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 编辑系统设置
     * @return OK
     */
    save(entity: EntSysAppSetup): Promise<any> {
        let url_ = this.baseUrl + "/SysAppSetup/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/SysAppSetup/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SysAppVersionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getUpdatedVersions(it: any): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/GetUpdatedVersions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(it);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUpdatedVersions(_response);
        });
    }

    protected processGetUpdatedVersions(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    insertDBVersion(dbVersion: EntDbVersion): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/InsertDBVersion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dbVersion);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertDBVersion(_response);
        });
    }

    protected processInsertDBVersion(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    executeInSecurityDB(it: any): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/ExecuteInSecurityDB";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(it);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExecuteInSecurityDB(_response);
        });
    }

    protected processExecuteInSecurityDB(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    executeInWMSDB(it: any): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/ExecuteInWMSDB";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(it);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExecuteInWMSDB(_response);
        });
    }

    protected processExecuteInWMSDB(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    createUpdateVersionTable(): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/CreateUpdateVersionTable";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUpdateVersionTable(_response);
        });
    }

    protected processCreateUpdateVersionTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    dBBackup(isSecurityDB: boolean): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/DBBackup?";
        if (isSecurityDB === undefined || isSecurityDB === null)
            throw new Error("The parameter 'isSecurityDB' must be defined and cannot be null.");
        else
            url_ += "isSecurityDB=" + encodeURIComponent("" + isSecurityDB) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDBBackup(_response);
        });
    }

    protected processDBBackup(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getLatestVersion(): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/GetLatestVersion";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLatestVersion(_response);
        });
    }

    protected processGetLatestVersion(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取版本信息
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryPageList(model: EntSysAppVersion): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/QueryPageList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryPageList(_response);
        });
    }

    protected processQueryPageList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    saveSysAppVersion(model: EntSysAppVersion): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/SaveSysAppVersion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveSysAppVersion(_response);
        });
    }

    protected processSaveSysAppVersion(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 删除版本信息
     * @return OK
     */
    delete(id: number): Promise<any> {
        let url_ = this.baseUrl + "/SysAppVersion/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/SysAppVersion/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SysAuthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 系统授权
     * @return OK
     */
    registeSys(model: EntLicenseInfo): Promise<any> {
        let url_ = this.baseUrl + "/SysAuth/RegisteSys";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisteSys(_response);
        });
    }

    protected processRegisteSys(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取当前用户公司仓库列表
     * @param u 用户名
     * @return OK
     */
    getSystems(u: string, s: string): Promise<any> {
        let url_ = this.baseUrl + "/SysAuth/GetSystems?";
        if (u === undefined || u === null)
            throw new Error("The parameter 'u' must be defined and cannot be null.");
        else
            url_ += "u=" + encodeURIComponent("" + u) + "&"; 
        if (s === undefined || s === null)
            throw new Error("The parameter 's' must be defined and cannot be null.");
        else
            url_ += "s=" + encodeURIComponent("" + s) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSystems(_response);
        });
    }

    protected processGetSystems(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取所有登录名
     * @return OK
     */
    getUserLoginNameList(organization_Code: string): Promise<any> {
        let url_ = this.baseUrl + "/SysAuth/GetUserLoginNameList?";
        if (organization_Code === undefined || organization_Code === null)
            throw new Error("The parameter 'organization_Code' must be defined and cannot be null.");
        else
            url_ += "Organization_Code=" + encodeURIComponent("" + organization_Code) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserLoginNameList(_response);
        });
    }

    protected processGetUserLoginNameList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class SysImportClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getAllOperType(): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/GetAllOperType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllOperType(_response);
        });
    }

    protected processGetAllOperType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getSysImportHeadTable(pageIndex: number, pageSize: number, impCode: string, customerCode: string, impType: string): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/GetSysImportHeadTable?";
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (impCode === undefined || impCode === null)
            throw new Error("The parameter 'impCode' must be defined and cannot be null.");
        else
            url_ += "impCode=" + encodeURIComponent("" + impCode) + "&"; 
        if (customerCode === undefined || customerCode === null)
            throw new Error("The parameter 'customerCode' must be defined and cannot be null.");
        else
            url_ += "customerCode=" + encodeURIComponent("" + customerCode) + "&"; 
        if (impType === undefined || impType === null)
            throw new Error("The parameter 'impType' must be defined and cannot be null.");
        else
            url_ += "impType=" + encodeURIComponent("" + impType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSysImportHeadTable(_response);
        });
    }

    protected processGetSysImportHeadTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getSysDetailsTable(impCode: string, impType: string): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/GetSysDetailsTable?";
        if (impCode === undefined || impCode === null)
            throw new Error("The parameter 'impCode' must be defined and cannot be null.");
        else
            url_ += "impCode=" + encodeURIComponent("" + impCode) + "&"; 
        if (impType === undefined || impType === null)
            throw new Error("The parameter 'impType' must be defined and cannot be null.");
        else
            url_ += "impType=" + encodeURIComponent("" + impType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSysDetailsTable(_response);
        });
    }

    protected processGetSysDetailsTable(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updateSysImport(model: EntSysImport): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/UpdateSysImport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSysImport(_response);
        });
    }

    protected processUpdateSysImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    insertSysImport(model: EntSysImport): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/InsertSysImport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertSysImport(_response);
        });
    }

    protected processInsertSysImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updateSysImportAll(model: EntSysImport): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/UpdateSysImportAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSysImportAll(_response);
        });
    }

    protected processUpdateSysImportAll(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    deleteSysImport(impCode: string, impType: string): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/DeleteSysImport?";
        if (impCode === undefined || impCode === null)
            throw new Error("The parameter 'impCode' must be defined and cannot be null.");
        else
            url_ += "impCode=" + encodeURIComponent("" + impCode) + "&"; 
        if (impType === undefined || impType === null)
            throw new Error("The parameter 'impType' must be defined and cannot be null.");
        else
            url_ += "impType=" + encodeURIComponent("" + impType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSysImport(_response);
        });
    }

    protected processDeleteSysImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 生成模板文件
     * @return OK
     */
    createFileByUse(model: EntSysImport): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/CreateFileByUse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateFileByUse(_response);
        });
    }

    protected processCreateFileByUse(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据类别获取导入模板
     * @return OK
     */
    queryByImpType(impType: string): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/QueryByImpType?";
        if (impType === undefined || impType === null)
            throw new Error("The parameter 'impType' must be defined and cannot be null.");
        else
            url_ += "impType=" + encodeURIComponent("" + impType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryByImpType(_response);
        });
    }

    protected processQueryByImpType(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据类别获取导入模板
     * @param impType 文件导入格式类型
     * @param org 客户代码
     * @return OK
     */
    queryByImpTypeAndOrg(impType: string, org: string): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/QueryByImpTypeAndOrg?";
        if (impType === undefined || impType === null)
            throw new Error("The parameter 'impType' must be defined and cannot be null.");
        else
            url_ += "impType=" + encodeURIComponent("" + impType) + "&"; 
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryByImpTypeAndOrg(_response);
        });
    }

    protected processQueryByImpTypeAndOrg(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 根据code获取导入模板
     * @return OK
     */
    queryByImpCode(impCode: string): Promise<any> {
        let url_ = this.baseUrl + "/SysImport/QueryByImpCode?";
        if (impCode === undefined || impCode === null)
            throw new Error("The parameter 'impCode' must be defined and cannot be null.");
        else
            url_ += "impCode=" + encodeURIComponent("" + impCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryByImpCode(_response);
        });
    }

    protected processQueryByImpCode(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/SysImport/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class SysSequenceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    get(id: number): Promise<any> {
        let url_ = this.baseUrl + "/SysSequence/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    query(request: EntSysSequence): Promise<any> {
        let url_ = this.baseUrl + "/SysSequence/Query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 保存
     * @return OK
     */
    save(request: EntSysSequence): Promise<any> {
        let url_ = this.baseUrl + "/SysSequence/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    delete(model: EntSysSequence): Promise<any> {
        let url_ = this.baseUrl + "/SysSequence/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/SysSequence/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class TaxReimbursementClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(condition: EntTgBusinessTaxreimbursement): Promise<ReturnResultOfPageListOfEntTgBusinessTaxreimbursement> {
        let url_ = this.baseUrl + "/TaxReimbursement/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<ReturnResultOfPageListOfEntTgBusinessTaxreimbursement> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntTgBusinessTaxreimbursement.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntTgBusinessTaxreimbursement>(<any>null);
    }

    /**
     * 同步报关单数据
     * @return OK
     */
    sysnBusinessTaxreimbursement(condition: EntTgBusinessTaxreimbursement): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/SysnBusinessTaxreimbursement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSysnBusinessTaxreimbursement(_response);
        });
    }

    protected processSysnBusinessTaxreimbursement(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增数据
     * @return OK
     */
    insert(condition: EntTgBusinessTaxreimbursement): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert(_response);
        });
    }

    protected processInsert(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增数据
     * @return OK
     */
    insert2(list: EntTgBusinessTaxreimbursement[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/InsertMany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsert2(_response);
        });
    }

    protected processInsert2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 新增数据
     * @return OK
     */
    update(condition: EntTgBusinessTaxreimbursement): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 批量修改数据
     * @return OK
     */
    updateMany(list: EntTgBusinessTaxreimbursement[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/UpdateMany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMany(_response);
        });
    }

    protected processUpdateMany(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除
     * @return OK
     */
    delete(id: number): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 查询文件
     * @return OK
     */
    getListFile(condition: EntTgBusinessTaxreimbursementFile): Promise<ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile> {
        let url_ = this.baseUrl + "/TaxReimbursement/GetListFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListFile(_response);
        });
    }

    protected processGetListFile(response: Response): Promise<ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile>(<any>null);
    }

    /**
     * 新增文件
     * @return OK
     */
    insertFile(condition: EntTgBusinessTaxreimbursementFile): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/InsertFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertFile(_response);
        });
    }

    protected processInsertFile(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 删除文件
     * @return OK
     */
    deleteFile(id: number): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TaxReimbursement/DeleteFile?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteFile(_response);
        });
    }

    protected processDeleteFile(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/TaxReimbursement/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class TextAttrClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @param model_id (optional) 
     * @param model_customerCode (optional) 
     * @param model_customerNameCn (optional) 
     * @param model_menuCode (optional) 
     * @param model_menuCodeCn (optional) 
     * @param model_controlName (optional) 
     * @param model_controlText (optional) 
     * @param model_createUser (optional) 
     * @param model_createTime (optional) 
     * @param model_updateUser (optional) 
     * @param model_updateTime (optional) 
     * @param model_pageSize (optional) 
     * @param model_pageIndex (optional) 
     * @param model_totalCount (optional) 
     * @return OK
     */
    getPageTextAttrList(model_id: number | null | undefined, model_customerCode: string | null | undefined, model_customerNameCn: string | null | undefined, model_menuCode: string | null | undefined, model_menuCodeCn: string | null | undefined, model_controlName: string | null | undefined, model_controlText: string | null | undefined, model_createUser: string | null | undefined, model_createTime: Date | null | undefined, model_updateUser: string | null | undefined, model_updateTime: Date | null | undefined, model_pageSize: number | null | undefined, model_pageIndex: number | null | undefined, model_totalCount: number | null | undefined): Promise<any> {
        let url_ = this.baseUrl + "/TextAttr/GetPageTextAttrList/{Id}?";
        if (model_id !== undefined)
            url_ += "model.id=" + encodeURIComponent("" + model_id) + "&"; 
        if (model_customerCode !== undefined)
            url_ += "model.customerCode=" + encodeURIComponent("" + model_customerCode) + "&"; 
        if (model_customerNameCn !== undefined)
            url_ += "model.customerNameCn=" + encodeURIComponent("" + model_customerNameCn) + "&"; 
        if (model_menuCode !== undefined)
            url_ += "model.menuCode=" + encodeURIComponent("" + model_menuCode) + "&"; 
        if (model_menuCodeCn !== undefined)
            url_ += "model.menuCodeCn=" + encodeURIComponent("" + model_menuCodeCn) + "&"; 
        if (model_controlName !== undefined)
            url_ += "model.controlName=" + encodeURIComponent("" + model_controlName) + "&"; 
        if (model_controlText !== undefined)
            url_ += "model.controlText=" + encodeURIComponent("" + model_controlText) + "&"; 
        if (model_createUser !== undefined)
            url_ += "model.createUser=" + encodeURIComponent("" + model_createUser) + "&"; 
        if (model_createTime !== undefined)
            url_ += "model.createTime=" + encodeURIComponent(model_createTime ? "" + model_createTime.toJSON() : "") + "&"; 
        if (model_updateUser !== undefined)
            url_ += "model.updateUser=" + encodeURIComponent("" + model_updateUser) + "&"; 
        if (model_updateTime !== undefined)
            url_ += "model.updateTime=" + encodeURIComponent(model_updateTime ? "" + model_updateTime.toJSON() : "") + "&"; 
        if (model_pageSize !== undefined)
            url_ += "model.pageSize=" + encodeURIComponent("" + model_pageSize) + "&"; 
        if (model_pageIndex !== undefined)
            url_ += "model.pageIndex=" + encodeURIComponent("" + model_pageIndex) + "&"; 
        if (model_totalCount !== undefined)
            url_ += "model.totalCount=" + encodeURIComponent("" + model_totalCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageTextAttrList(_response);
        });
    }

    protected processGetPageTextAttrList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getPageTextAttrList2(org: string, menuCode: string): Promise<any> {
        let url_ = this.baseUrl + "/TextAttr/GetPageTextAttrList?";
        if (org === undefined || org === null)
            throw new Error("The parameter 'org' must be defined and cannot be null.");
        else
            url_ += "org=" + encodeURIComponent("" + org) + "&"; 
        if (menuCode === undefined || menuCode === null)
            throw new Error("The parameter 'menuCode' must be defined and cannot be null.");
        else
            url_ += "menuCode=" + encodeURIComponent("" + menuCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPageTextAttrList2(_response);
        });
    }

    protected processGetPageTextAttrList2(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    deleteTextAttr(model: EntSysPageText): Promise<any> {
        let url_ = this.baseUrl + "/TextAttr/DeleteTextAttr";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTextAttr(_response);
        });
    }

    protected processDeleteTextAttr(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    saveTextAttr(model: EntSysPageText): Promise<any> {
        let url_ = this.baseUrl + "/TextAttr/SaveTextAttr";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveTextAttr(_response);
        });
    }

    protected processSaveTextAttr(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    batch(list: EntSysPageText[]): Promise<any> {
        let url_ = this.baseUrl + "/TextAttr/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(list);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatch(_response);
        });
    }

    protected processBatch(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/TextAttr/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class TgSysComplexClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    query(hscode: string): Promise<ReturnResultOfDataTable> {
        let url_ = this.baseUrl + "/tgsyscomplex/queryfirst/{hscode}";
        if (hscode === undefined || hscode === null)
            throw new Error("The parameter 'hscode' must be defined.");
        url_ = url_.replace("{hscode}", encodeURIComponent("" + hscode)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<ReturnResultOfDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfDataTable>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/TgSysComplex/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class TgSysParaClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 查询所有参数
     * @return OK
     */
    getTgSysParas(): Promise<any> {
        let url_ = this.baseUrl + "/TgSysPara/GetTgSysParas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTgSysParas(_response);
        });
    }

    protected processGetTgSysParas(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取操作权限
     * @return OK
     */
    pullCtrlHandle(it: any): Promise<any> {
        let url_ = this.baseUrl + "/TgSysPara/PullCtrlHandle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(it);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPullCtrlHandle(_response);
        });
    }

    protected processPullCtrlHandle(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/TgSysPara/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class TraceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    getList(model: EntBasBom): Promise<any> {
        let url_ = this.baseUrl + "/Trace/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class TransferTypeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    delete(model: EntGoldenBusTurnConfig): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/TransferType/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 功能    :保存or新增
     * @return OK
     */
    headSave(model: EntGoldenBusTurnConfig): Promise<any> {
        let url_ = this.baseUrl + "/TransferType/HeadSave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeadSave(_response);
        });
    }

    protected processHeadSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    queryHeadPagerDataSet(model: EntGoldenBusTurnConfig): Promise<any> {
        let url_ = this.baseUrl + "/TransferType/QueryHeadPagerDataSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryHeadPagerDataSet(_response);
        });
    }

    protected processQueryHeadPagerDataSet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/TransferType/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class UserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * 登录
     * @return OK
     */
    login(reqUser: EntSysUser): Promise<ReturnResultOfSevCurrentUser> {
        let url_ = this.baseUrl + "/User/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(reqUser);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<ReturnResultOfSevCurrentUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfSevCurrentUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfSevCurrentUser>(<any>null);
    }

    /**
     * 获取系统登陆使用菜单信息
     * @param loginName 登陆用户名
     * @param subId 子系统
     * @return OK
     */
    getAppSetupData(loginName: string, subId: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/User/GetAppSetupData?";
        if (loginName === undefined || loginName === null)
            throw new Error("The parameter 'loginName' must be defined and cannot be null.");
        else
            url_ += "loginName=" + encodeURIComponent("" + loginName) + "&"; 
        if (subId === undefined || subId === null)
            throw new Error("The parameter 'subId' must be defined and cannot be null.");
        else
            url_ += "subId=" + encodeURIComponent("" + subId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppSetupData(_response);
        });
    }

    protected processGetAppSetupData(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * 修改密码
     * @return OK
     */
    changePwd(sysUser: any): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/User/ChangePwd";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sysUser);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangePwd(_response);
        });
    }

    protected processChangePwd(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }

    /**
     * 注销
     * @return OK
     */
    loginOut(): Promise<ReturnResultOfBoolean> {
        let url_ = this.baseUrl + "/User/LoginOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginOut(_response);
        });
    }

    protected processLoginOut(response: Response): Promise<ReturnResultOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfBoolean.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfBoolean>(<any>null);
    }
}

export class WarnManagementClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    queryTablePaged(condition: EntAppTailorWarn): Promise<ReturnResultOfPageDataTable> {
        let url_ = this.baseUrl + "/tailorwarn/query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQueryTablePaged(_response);
        });
    }

    protected processQueryTablePaged(response: Response): Promise<ReturnResultOfPageDataTable> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfPageDataTable.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfPageDataTable>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntAppTailorWarn): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/tailorwarn/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    save2(modelList: EntAppTailorWarn[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/tailorwarn/savemany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave2(_response);
        });
    }

    protected processSave2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    update(model: EntAppTailorWarn): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/tailorwarn/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    delete(id: number): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/tailorwarn/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    delete2(ids: number[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/tailorwarn/deletelist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * 获取登录的用户信息
     * @return OK
     */
    getCurrentUser(): Promise<EntSysUser> {
        let url_ = this.baseUrl + "/WarnManagement/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<EntSysUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntSysUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EntSysUser>(<any>null);
    }
}

export class WordBomClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:12328";
    }

    /**
     * @return OK
     */
    delete(model: EntEpassBomInner): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/WordBom/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }

    /**
     * @return OK
     */
    getData(model: EntEpassBomInner): Promise<any> {
        let url_ = this.baseUrl + "/WordBom/GetData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetData(_response);
        });
    }

    protected processGetData(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    save(model: EntEpassBomInner): Promise<any> {
        let url_ = this.baseUrl + "/WordBom/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    updateBom(model: EntEpassBomInner): Promise<any> {
        let url_ = this.baseUrl + "/WordBom/UpdateBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBom(_response);
        });
    }

    protected processUpdateBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getList(model: EntEpassBomInner): Promise<any> {
        let url_ = this.baseUrl + "/WordBom/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    getListBom(model: EntEpassBomInner): Promise<any> {
        let url_ = this.baseUrl + "/WordBom/GetListBom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListBom(_response);
        });
    }

    protected processGetListBom(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @return OK
     */
    import(model: RequestModelOfDataTable): Promise<any> {
        let url_ = this.baseUrl + "/WordBom/Import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImport(_response);
        });
    }

    protected processImport(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * 通过企业料号查询备案料号
     * @return OK
     */
    getImgNOBom(emsNo: string, img_no_new: string): Promise<ReturnResultOfString> {
        let url_ = this.baseUrl + "/WordBom/GetImgNOBom?";
        if (emsNo === undefined || emsNo === null)
            throw new Error("The parameter 'emsNo' must be defined and cannot be null.");
        else
            url_ += "emsNo=" + encodeURIComponent("" + emsNo) + "&"; 
        if (img_no_new === undefined || img_no_new === null)
            throw new Error("The parameter 'img_no_new' must be defined and cannot be null.");
        else
            url_ += "img_no_new=" + encodeURIComponent("" + img_no_new) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetImgNOBom(_response);
        });
    }

    protected processGetImgNOBom(response: Response): Promise<ReturnResultOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfString>(<any>null);
    }

    /**
     * @return OK
     */
    deleteByIdList(idList: EntEpassBomInner[]): Promise<ReturnResultOfInt32> {
        let url_ = this.baseUrl + "/WordBom/deleteByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(idList);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIdList(_response);
        });
    }

    protected processDeleteByIdList(response: Response): Promise<ReturnResultOfInt32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReturnResultOfInt32.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReturnResultOfInt32>(<any>null);
    }
}

export class EntSysUser implements IEntSysUser {
    roleId?: string | undefined;
    applicationName?: string | undefined;
    subId?: string | undefined;
    listRole?: EntSysUserInRole[] | undefined;
    userId?: number | undefined;
    organizationCode?: string | undefined;
    loginName?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    status?: string | undefined;
    telephone?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    email?: string | undefined;
    deptCode?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    descr?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    allDataPermission?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["RoleId"];
            this.applicationName = data["ApplicationName"];
            this.subId = data["SubId"];
            if (Array.isArray(data["ListRole"])) {
                this.listRole = [] as any;
                for (let item of data["ListRole"])
                    this.listRole!.push(EntSysUserInRole.fromJS(item));
            }
            this.userId = data["UserId"];
            this.organizationCode = data["OrganizationCode"];
            this.loginName = data["LoginName"];
            this.userName = data["UserName"];
            this.password = data["Password"];
            this.status = data["Status"];
            this.telephone = data["Telephone"];
            this.phone = data["Phone"];
            this.address = data["Address"];
            this.email = data["Email"];
            this.deptCode = data["DeptCode"];
            this.createBy = data["CreateBy"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.descr = data["Descr"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.allDataPermission = data["AllDataPermission"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysUser {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RoleId"] = this.roleId;
        data["ApplicationName"] = this.applicationName;
        data["SubId"] = this.subId;
        if (Array.isArray(this.listRole)) {
            data["ListRole"] = [];
            for (let item of this.listRole)
                data["ListRole"].push(item.toJSON());
        }
        data["UserId"] = this.userId;
        data["OrganizationCode"] = this.organizationCode;
        data["LoginName"] = this.loginName;
        data["UserName"] = this.userName;
        data["Password"] = this.password;
        data["Status"] = this.status;
        data["Telephone"] = this.telephone;
        data["Phone"] = this.phone;
        data["Address"] = this.address;
        data["Email"] = this.email;
        data["DeptCode"] = this.deptCode;
        data["CreateBy"] = this.createBy;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["Descr"] = this.descr;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["AllDataPermission"] = this.allDataPermission;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysUser {
    roleId?: string | undefined;
    applicationName?: string | undefined;
    subId?: string | undefined;
    listRole?: EntSysUserInRole[] | undefined;
    userId?: number | undefined;
    organizationCode?: string | undefined;
    loginName?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    status?: string | undefined;
    telephone?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    email?: string | undefined;
    deptCode?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    descr?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    allDataPermission?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysUserInRole implements IEntSysUserInRole {
    id?: number | undefined;
    userId?: number | undefined;
    roleId?: string | undefined;
    status?: string | undefined;
    descr?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysUserInRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.userId = data["UserId"];
            this.roleId = data["RoleId"];
            this.status = data["Status"];
            this.descr = data["Descr"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.usd3 = data["Usd3"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysUserInRole {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysUserInRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["UserId"] = this.userId;
        data["RoleId"] = this.roleId;
        data["Status"] = this.status;
        data["Descr"] = this.descr;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["Usd3"] = this.usd3;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysUserInRole {
    id?: number | undefined;
    userId?: number | undefined;
    roleId?: string | undefined;
    status?: string | undefined;
    descr?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppArchiveAttachment implements IEntAppArchiveAttachment {
    createTimeBegin?: Date | undefined;
    createTimeEnd?: Date | undefined;
    id?: number | undefined;
    billNo?: string | undefined;
    splitNo?: string | undefined;
    sku?: string | undefined;
    contractNo?: string | undefined;
    entryId?: string | undefined;
    clearanceNo?: string | undefined;
    archiveStatus?: number | undefined;
    archivePath?: string | undefined;
    iEDate?: Date | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    archiveTime?: Date | undefined;
    archiveUser?: string | undefined;
    invoiceNo?: string | undefined;
    organizationCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppArchiveAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createTimeBegin = data["CreateTimeBegin"] ? new Date(data["CreateTimeBegin"].toString()) : <any>undefined;
            this.createTimeEnd = data["CreateTimeEnd"] ? new Date(data["CreateTimeEnd"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.billNo = data["BillNo"];
            this.splitNo = data["SplitNo"];
            this.sku = data["Sku"];
            this.contractNo = data["ContractNo"];
            this.entryId = data["EntryId"];
            this.clearanceNo = data["ClearanceNo"];
            this.archiveStatus = data["ArchiveStatus"];
            this.archivePath = data["ArchivePath"];
            this.iEDate = data["IEDate"] ? new Date(data["IEDate"].toString()) : <any>undefined;
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.archiveTime = data["ArchiveTime"] ? new Date(data["ArchiveTime"].toString()) : <any>undefined;
            this.archiveUser = data["ArchiveUser"];
            this.invoiceNo = data["InvoiceNo"];
            this.organizationCode = data["OrganizationCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppArchiveAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppArchiveAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreateTimeBegin"] = this.createTimeBegin ? this.createTimeBegin.toISOString() : <any>undefined;
        data["CreateTimeEnd"] = this.createTimeEnd ? this.createTimeEnd.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["BillNo"] = this.billNo;
        data["SplitNo"] = this.splitNo;
        data["Sku"] = this.sku;
        data["ContractNo"] = this.contractNo;
        data["EntryId"] = this.entryId;
        data["ClearanceNo"] = this.clearanceNo;
        data["ArchiveStatus"] = this.archiveStatus;
        data["ArchivePath"] = this.archivePath;
        data["IEDate"] = this.iEDate ? this.iEDate.toISOString() : <any>undefined;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["ArchiveTime"] = this.archiveTime ? this.archiveTime.toISOString() : <any>undefined;
        data["ArchiveUser"] = this.archiveUser;
        data["InvoiceNo"] = this.invoiceNo;
        data["OrganizationCode"] = this.organizationCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppArchiveAttachment {
    createTimeBegin?: Date | undefined;
    createTimeEnd?: Date | undefined;
    id?: number | undefined;
    billNo?: string | undefined;
    splitNo?: string | undefined;
    sku?: string | undefined;
    contractNo?: string | undefined;
    entryId?: string | undefined;
    clearanceNo?: string | undefined;
    archiveStatus?: number | undefined;
    archivePath?: string | undefined;
    iEDate?: Date | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    archiveTime?: Date | undefined;
    archiveUser?: string | undefined;
    invoiceNo?: string | undefined;
    organizationCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppSysAttachment implements IEntAppSysAttachment {
    isDelete?: boolean | undefined;
    isUpdate?: boolean | undefined;
    id?: number | undefined;
    sourceID?: number | undefined;
    businessId?: string | undefined;
    bussinessFileType?: string | undefined;
    fileName?: string | undefined;
    fileExtension?: string | undefined;
    filePath?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    deleteTime?: Date | undefined;
    deleteBy?: string | undefined;
    status?: number | undefined;
    copErpCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppSysAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isDelete = data["IsDelete"];
            this.isUpdate = data["IsUpdate"];
            this.id = data["Id"];
            this.sourceID = data["SourceID"];
            this.businessId = data["BusinessId"];
            this.bussinessFileType = data["BussinessFileType"];
            this.fileName = data["FileName"];
            this.fileExtension = data["FileExtension"];
            this.filePath = data["FilePath"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.deleteTime = data["DeleteTime"] ? new Date(data["DeleteTime"].toString()) : <any>undefined;
            this.deleteBy = data["DeleteBy"];
            this.status = data["Status"];
            this.copErpCode = data["CopErpCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppSysAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppSysAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsDelete"] = this.isDelete;
        data["IsUpdate"] = this.isUpdate;
        data["Id"] = this.id;
        data["SourceID"] = this.sourceID;
        data["BusinessId"] = this.businessId;
        data["BussinessFileType"] = this.bussinessFileType;
        data["FileName"] = this.fileName;
        data["FileExtension"] = this.fileExtension;
        data["FilePath"] = this.filePath;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["DeleteTime"] = this.deleteTime ? this.deleteTime.toISOString() : <any>undefined;
        data["DeleteBy"] = this.deleteBy;
        data["Status"] = this.status;
        data["CopErpCode"] = this.copErpCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppSysAttachment {
    isDelete?: boolean | undefined;
    isUpdate?: boolean | undefined;
    id?: number | undefined;
    sourceID?: number | undefined;
    businessId?: string | undefined;
    bussinessFileType?: string | undefined;
    fileName?: string | undefined;
    fileExtension?: string | undefined;
    filePath?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    deleteTime?: Date | undefined;
    deleteBy?: string | undefined;
    status?: number | undefined;
    copErpCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppEffectiveDate implements IEntAppEffectiveDate {
    haveEffect?: string | undefined;
    haveAttachment?: string | undefined;
    id?: number | undefined;
    copGNo?: string | undefined;
    copType?: string | undefined;
    effectDate?: Date | undefined;
    lincenseNo?: string | undefined;
    attachmentUri?: string | undefined;
    qty?: number | undefined;
    emsNo?: string | undefined;
    entryId?: string | undefined;
    billNo?: string | undefined;
    customerCode?: string | undefined;
    endUser?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppEffectiveDate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.haveEffect = data["HaveEffect"];
            this.haveAttachment = data["HaveAttachment"];
            this.id = data["Id"];
            this.copGNo = data["CopGNo"];
            this.copType = data["CopType"];
            this.effectDate = data["EffectDate"] ? new Date(data["EffectDate"].toString()) : <any>undefined;
            this.lincenseNo = data["LincenseNo"];
            this.attachmentUri = data["AttachmentUri"];
            this.qty = data["Qty"];
            this.emsNo = data["EmsNo"];
            this.entryId = data["EntryId"];
            this.billNo = data["BillNo"];
            this.customerCode = data["CustomerCode"];
            this.endUser = data["EndUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppEffectiveDate {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppEffectiveDate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HaveEffect"] = this.haveEffect;
        data["HaveAttachment"] = this.haveAttachment;
        data["Id"] = this.id;
        data["CopGNo"] = this.copGNo;
        data["CopType"] = this.copType;
        data["EffectDate"] = this.effectDate ? this.effectDate.toISOString() : <any>undefined;
        data["LincenseNo"] = this.lincenseNo;
        data["AttachmentUri"] = this.attachmentUri;
        data["Qty"] = this.qty;
        data["EmsNo"] = this.emsNo;
        data["EntryId"] = this.entryId;
        data["BillNo"] = this.billNo;
        data["CustomerCode"] = this.customerCode;
        data["EndUser"] = this.endUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppEffectiveDate {
    haveEffect?: string | undefined;
    haveAttachment?: string | undefined;
    id?: number | undefined;
    copGNo?: string | undefined;
    copType?: string | undefined;
    effectDate?: Date | undefined;
    lincenseNo?: string | undefined;
    attachmentUri?: string | undefined;
    qty?: number | undefined;
    emsNo?: string | undefined;
    entryId?: string | undefined;
    billNo?: string | undefined;
    customerCode?: string | undefined;
    endUser?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyErpBom implements IEntInnerAseshJmyErpBom {
    throwDate?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    decCm?: number | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    bondMark?: string | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    id?: number | undefined;
    imdDateEnd?: Date | undefined;
    emsNo?: string | undefined;
    groupFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyErpBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.throwDate = data["ThrowDate"];
            this.exgNo = data["ExgNo"];
            this.imgNo = data["ImgNo"];
            this.decCm = data["DecCm"];
            this.modifyFlag = data["ModifyFlag"];
            this.imdDate = data["ImdDate"] ? new Date(data["ImdDate"].toString()) : <any>undefined;
            this.bondMark = data["BondMark"];
            this.tgblLossRate = data["TgblLossRate"];
            this.intgbLossRate = data["IntgbLossRate"];
            this.bondMtpckPrpr = data["BondMtpckPrpr"];
            this.id = data["Id"];
            this.imdDateEnd = data["ImdDateEnd"] ? new Date(data["ImdDateEnd"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.groupFlag = data["GroupFlag"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyErpBom {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyErpBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ThrowDate"] = this.throwDate;
        data["ExgNo"] = this.exgNo;
        data["ImgNo"] = this.imgNo;
        data["DecCm"] = this.decCm;
        data["ModifyFlag"] = this.modifyFlag;
        data["ImdDate"] = this.imdDate ? this.imdDate.toISOString() : <any>undefined;
        data["BondMark"] = this.bondMark;
        data["TgblLossRate"] = this.tgblLossRate;
        data["IntgbLossRate"] = this.intgbLossRate;
        data["BondMtpckPrpr"] = this.bondMtpckPrpr;
        data["Id"] = this.id;
        data["ImdDateEnd"] = this.imdDateEnd ? this.imdDateEnd.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["GroupFlag"] = this.groupFlag;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyErpBom {
    throwDate?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    decCm?: number | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    bondMark?: string | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    id?: number | undefined;
    imdDateEnd?: Date | undefined;
    emsNo?: string | undefined;
    groupFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyWaferQty implements IEntInnerAseshJmyWaferQty {
    exgNo?: string | undefined;
    waferNoQty?: number | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    emsNo?: string | undefined;
    id?: number | undefined;
    imdDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyWaferQty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exgNo = data["ExgNo"];
            this.waferNoQty = data["WaferNoQty"];
            this.modifyFlag = data["ModifyFlag"];
            this.imdDate = data["ImdDate"] ? new Date(data["ImdDate"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.id = data["Id"];
            this.imdDateEnd = data["ImdDateEnd"] ? new Date(data["ImdDateEnd"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyWaferQty {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyWaferQty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ExgNo"] = this.exgNo;
        data["WaferNoQty"] = this.waferNoQty;
        data["ModifyFlag"] = this.modifyFlag;
        data["ImdDate"] = this.imdDate ? this.imdDate.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["Id"] = this.id;
        data["ImdDateEnd"] = this.imdDateEnd ? this.imdDateEnd.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyWaferQty {
    exgNo?: string | undefined;
    waferNoQty?: number | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    emsNo?: string | undefined;
    id?: number | undefined;
    imdDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyWorkBom implements IEntInnerAseshJmyWorkBom {
    controlNo?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    waferNo?: string | undefined;
    decCm?: number | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    emsNo?: string | undefined;
    id?: number | undefined;
    imdDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyWorkBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.controlNo = data["ControlNo"];
            this.exgNo = data["ExgNo"];
            this.imgNo = data["ImgNo"];
            this.waferNo = data["WaferNo"];
            this.decCm = data["DecCm"];
            this.modifyFlag = data["ModifyFlag"];
            this.imdDate = data["ImdDate"] ? new Date(data["ImdDate"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.id = data["Id"];
            this.imdDateEnd = data["ImdDateEnd"] ? new Date(data["ImdDateEnd"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyWorkBom {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyWorkBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ControlNo"] = this.controlNo;
        data["ExgNo"] = this.exgNo;
        data["ImgNo"] = this.imgNo;
        data["WaferNo"] = this.waferNo;
        data["DecCm"] = this.decCm;
        data["ModifyFlag"] = this.modifyFlag;
        data["ImdDate"] = this.imdDate ? this.imdDate.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["Id"] = this.id;
        data["ImdDateEnd"] = this.imdDateEnd ? this.imdDateEnd.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyWorkBom {
    controlNo?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    waferNo?: string | undefined;
    decCm?: number | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    emsNo?: string | undefined;
    id?: number | undefined;
    imdDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyExportInfo implements IEntInnerAseshJmyExportInfo {
    dnNo?: string | undefined;
    gNo?: string | undefined;
    cURR?: string | undefined;
    tOTAL?: number | undefined;
    qTY?: number | undefined;
    qty2?: number | undefined;
    controlNo?: string | undefined;
    invoiceNo?: string | undefined;
    orginCountry?: string | undefined;
    shiptoCountry?: string | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    id?: number | undefined;
    exportDate?: Date | undefined;
    exportFlag?: string | undefined;
    modyDate?: Date | undefined;
    operationUser?: string | undefined;
    imdDateEnd?: Date | undefined;
    modyDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyExportInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dnNo = data["DnNo"];
            this.gNo = data["GNo"];
            this.cURR = data["CURR"];
            this.tOTAL = data["TOTAL"];
            this.qTY = data["QTY"];
            this.qty2 = data["Qty2"];
            this.controlNo = data["ControlNo"];
            this.invoiceNo = data["InvoiceNo"];
            this.orginCountry = data["OrginCountry"];
            this.shiptoCountry = data["ShiptoCountry"];
            this.modifyFlag = data["ModifyFlag"];
            this.imdDate = data["ImdDate"] ? new Date(data["ImdDate"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.exportDate = data["ExportDate"] ? new Date(data["ExportDate"].toString()) : <any>undefined;
            this.exportFlag = data["ExportFlag"];
            this.modyDate = data["ModyDate"] ? new Date(data["ModyDate"].toString()) : <any>undefined;
            this.operationUser = data["OperationUser"];
            this.imdDateEnd = data["ImdDateEnd"] ? new Date(data["ImdDateEnd"].toString()) : <any>undefined;
            this.modyDateEnd = data["ModyDateEnd"] ? new Date(data["ModyDateEnd"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyExportInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyExportInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DnNo"] = this.dnNo;
        data["GNo"] = this.gNo;
        data["CURR"] = this.cURR;
        data["TOTAL"] = this.tOTAL;
        data["QTY"] = this.qTY;
        data["Qty2"] = this.qty2;
        data["ControlNo"] = this.controlNo;
        data["InvoiceNo"] = this.invoiceNo;
        data["OrginCountry"] = this.orginCountry;
        data["ShiptoCountry"] = this.shiptoCountry;
        data["ModifyFlag"] = this.modifyFlag;
        data["ImdDate"] = this.imdDate ? this.imdDate.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["ExportDate"] = this.exportDate ? this.exportDate.toISOString() : <any>undefined;
        data["ExportFlag"] = this.exportFlag;
        data["ModyDate"] = this.modyDate ? this.modyDate.toISOString() : <any>undefined;
        data["OperationUser"] = this.operationUser;
        data["ImdDateEnd"] = this.imdDateEnd ? this.imdDateEnd.toISOString() : <any>undefined;
        data["ModyDateEnd"] = this.modyDateEnd ? this.modyDateEnd.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyExportInfo {
    dnNo?: string | undefined;
    gNo?: string | undefined;
    cURR?: string | undefined;
    tOTAL?: number | undefined;
    qTY?: number | undefined;
    qty2?: number | undefined;
    controlNo?: string | undefined;
    invoiceNo?: string | undefined;
    orginCountry?: string | undefined;
    shiptoCountry?: string | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    id?: number | undefined;
    exportDate?: Date | undefined;
    exportFlag?: string | undefined;
    modyDate?: Date | undefined;
    operationUser?: string | undefined;
    imdDateEnd?: Date | undefined;
    modyDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyImportInfo implements IEntInnerAseshJmyImportInfo {
    gNo?: string | undefined;
    cURR?: string | undefined;
    tOTAL?: number | undefined;
    qTY?: number | undefined;
    qty2?: number | undefined;
    invoiceNo?: string | undefined;
    orginCountry?: string | undefined;
    shiptoCountry?: string | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    id?: number | undefined;
    exportDate?: Date | undefined;
    exportFlag?: string | undefined;
    operationUser?: string | undefined;
    exportDateEnd?: Date | undefined;
    imdDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyImportInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gNo = data["GNo"];
            this.cURR = data["CURR"];
            this.tOTAL = data["TOTAL"];
            this.qTY = data["QTY"];
            this.qty2 = data["Qty2"];
            this.invoiceNo = data["InvoiceNo"];
            this.orginCountry = data["OrginCountry"];
            this.shiptoCountry = data["ShiptoCountry"];
            this.modifyFlag = data["ModifyFlag"];
            this.imdDate = data["ImdDate"] ? new Date(data["ImdDate"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.exportDate = data["ExportDate"] ? new Date(data["ExportDate"].toString()) : <any>undefined;
            this.exportFlag = data["ExportFlag"];
            this.operationUser = data["OperationUser"];
            this.exportDateEnd = data["ExportDateEnd"] ? new Date(data["ExportDateEnd"].toString()) : <any>undefined;
            this.imdDateEnd = data["ImdDateEnd"] ? new Date(data["ImdDateEnd"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyImportInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyImportInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["GNo"] = this.gNo;
        data["CURR"] = this.cURR;
        data["TOTAL"] = this.tOTAL;
        data["QTY"] = this.qTY;
        data["Qty2"] = this.qty2;
        data["InvoiceNo"] = this.invoiceNo;
        data["OrginCountry"] = this.orginCountry;
        data["ShiptoCountry"] = this.shiptoCountry;
        data["ModifyFlag"] = this.modifyFlag;
        data["ImdDate"] = this.imdDate ? this.imdDate.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["ExportDate"] = this.exportDate ? this.exportDate.toISOString() : <any>undefined;
        data["ExportFlag"] = this.exportFlag;
        data["OperationUser"] = this.operationUser;
        data["ExportDateEnd"] = this.exportDateEnd ? this.exportDateEnd.toISOString() : <any>undefined;
        data["ImdDateEnd"] = this.imdDateEnd ? this.imdDateEnd.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyImportInfo {
    gNo?: string | undefined;
    cURR?: string | undefined;
    tOTAL?: number | undefined;
    qTY?: number | undefined;
    qty2?: number | undefined;
    invoiceNo?: string | undefined;
    orginCountry?: string | undefined;
    shiptoCountry?: string | undefined;
    modifyFlag?: string | undefined;
    imdDate?: Date | undefined;
    id?: number | undefined;
    exportDate?: Date | undefined;
    exportFlag?: string | undefined;
    operationUser?: string | undefined;
    exportDateEnd?: Date | undefined;
    imdDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyLog implements IEntInnerAseshJmyLog {
    id?: number | undefined;
    businessType?: number | undefined;
    handleType?: string | undefined;
    handStatus?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    timeConsuming?: number | undefined;
    remark?: string | undefined;
    createDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.businessType = data["BusinessType"];
            this.handleType = data["HandleType"];
            this.handStatus = data["HandStatus"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.timeConsuming = data["TimeConsuming"];
            this.remark = data["Remark"];
            this.createDateEnd = data["CreateDateEnd"] ? new Date(data["CreateDateEnd"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyLog {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["BusinessType"] = this.businessType;
        data["HandleType"] = this.handleType;
        data["HandStatus"] = this.handStatus;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["TimeConsuming"] = this.timeConsuming;
        data["Remark"] = this.remark;
        data["CreateDateEnd"] = this.createDateEnd ? this.createDateEnd.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyLog {
    id?: number | undefined;
    businessType?: number | undefined;
    handleType?: string | undefined;
    handStatus?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    timeConsuming?: number | undefined;
    remark?: string | undefined;
    createDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppAsnAttachment implements IEntAppAsnAttachment {
    id?: number | undefined;
    sku?: string | undefined;
    serialNo?: string | undefined;
    contractNo?: string | undefined;
    clearanceNo?: string | undefined;
    userDefine1?: string | undefined;
    userDefine2?: string | undefined;
    iEntryId?: string | undefined;
    iDDate?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppAsnAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.sku = data["Sku"];
            this.serialNo = data["SerialNo"];
            this.contractNo = data["ContractNo"];
            this.clearanceNo = data["ClearanceNo"];
            this.userDefine1 = data["UserDefine1"];
            this.userDefine2 = data["UserDefine2"];
            this.iEntryId = data["IEntryId"];
            this.iDDate = data["IDDate"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppAsnAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppAsnAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Sku"] = this.sku;
        data["SerialNo"] = this.serialNo;
        data["ContractNo"] = this.contractNo;
        data["ClearanceNo"] = this.clearanceNo;
        data["UserDefine1"] = this.userDefine1;
        data["UserDefine2"] = this.userDefine2;
        data["IEntryId"] = this.iEntryId;
        data["IDDate"] = this.iDDate;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppAsnAttachment {
    id?: number | undefined;
    sku?: string | undefined;
    serialNo?: string | undefined;
    contractNo?: string | undefined;
    clearanceNo?: string | undefined;
    userDefine1?: string | undefined;
    userDefine2?: string | undefined;
    iEntryId?: string | undefined;
    iDDate?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasContract implements IEntBasContract {
    beginDateBegin?: Date | undefined;
    beginDateEnd?: Date | undefined;
    endDateBegin?: Date | undefined;
    endDateEnd?: Date | undefined;
    addDateBegin?: Date | undefined;
    addDateEnd?: Date | undefined;
    updateDateBegin?: Date | undefined;
    updateDateEnd?: Date | undefined;
    id?: number | undefined;
    contractNo?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    supplierCode?: string | undefined;
    customerCode?: string | undefined;
    name?: string | undefined;
    nameEn?: string | undefined;
    nameAbbr?: string | undefined;
    nameEnAbbr?: string | undefined;
    taxNo?: string | undefined;
    countryCode?: string | undefined;
    countryName?: string | undefined;
    address?: string | undefined;
    addresssEn?: string | undefined;
    contactMan?: string | undefined;
    email?: string | undefined;
    tel?: string | undefined;
    invoiceHead?: string | undefined;
    invoiceAddress?: string | undefined;
    bank?: string | undefined;
    bankAccount?: string | undefined;
    addDate?: Date | undefined;
    addUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.beginDateBegin = data["BeginDateBegin"] ? new Date(data["BeginDateBegin"].toString()) : <any>undefined;
            this.beginDateEnd = data["BeginDateEnd"] ? new Date(data["BeginDateEnd"].toString()) : <any>undefined;
            this.endDateBegin = data["EndDateBegin"] ? new Date(data["EndDateBegin"].toString()) : <any>undefined;
            this.endDateEnd = data["EndDateEnd"] ? new Date(data["EndDateEnd"].toString()) : <any>undefined;
            this.addDateBegin = data["AddDateBegin"] ? new Date(data["AddDateBegin"].toString()) : <any>undefined;
            this.addDateEnd = data["AddDateEnd"] ? new Date(data["AddDateEnd"].toString()) : <any>undefined;
            this.updateDateBegin = data["UpdateDateBegin"] ? new Date(data["UpdateDateBegin"].toString()) : <any>undefined;
            this.updateDateEnd = data["UpdateDateEnd"] ? new Date(data["UpdateDateEnd"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.contractNo = data["ContractNo"];
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.supplierCode = data["SupplierCode"];
            this.customerCode = data["CustomerCode"];
            this.name = data["Name"];
            this.nameEn = data["NameEn"];
            this.nameAbbr = data["NameAbbr"];
            this.nameEnAbbr = data["NameEnAbbr"];
            this.taxNo = data["TaxNo"];
            this.countryCode = data["CountryCode"];
            this.countryName = data["CountryName"];
            this.address = data["Address"];
            this.addresssEn = data["AddresssEn"];
            this.contactMan = data["ContactMan"];
            this.email = data["Email"];
            this.tel = data["Tel"];
            this.invoiceHead = data["InvoiceHead"];
            this.invoiceAddress = data["InvoiceAddress"];
            this.bank = data["Bank"];
            this.bankAccount = data["BankAccount"];
            this.addDate = data["AddDate"] ? new Date(data["AddDate"].toString()) : <any>undefined;
            this.addUser = data["AddUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasContract {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BeginDateBegin"] = this.beginDateBegin ? this.beginDateBegin.toISOString() : <any>undefined;
        data["BeginDateEnd"] = this.beginDateEnd ? this.beginDateEnd.toISOString() : <any>undefined;
        data["EndDateBegin"] = this.endDateBegin ? this.endDateBegin.toISOString() : <any>undefined;
        data["EndDateEnd"] = this.endDateEnd ? this.endDateEnd.toISOString() : <any>undefined;
        data["AddDateBegin"] = this.addDateBegin ? this.addDateBegin.toISOString() : <any>undefined;
        data["AddDateEnd"] = this.addDateEnd ? this.addDateEnd.toISOString() : <any>undefined;
        data["UpdateDateBegin"] = this.updateDateBegin ? this.updateDateBegin.toISOString() : <any>undefined;
        data["UpdateDateEnd"] = this.updateDateEnd ? this.updateDateEnd.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["ContractNo"] = this.contractNo;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["SupplierCode"] = this.supplierCode;
        data["CustomerCode"] = this.customerCode;
        data["Name"] = this.name;
        data["NameEn"] = this.nameEn;
        data["NameAbbr"] = this.nameAbbr;
        data["NameEnAbbr"] = this.nameEnAbbr;
        data["TaxNo"] = this.taxNo;
        data["CountryCode"] = this.countryCode;
        data["CountryName"] = this.countryName;
        data["Address"] = this.address;
        data["AddresssEn"] = this.addresssEn;
        data["ContactMan"] = this.contactMan;
        data["Email"] = this.email;
        data["Tel"] = this.tel;
        data["InvoiceHead"] = this.invoiceHead;
        data["InvoiceAddress"] = this.invoiceAddress;
        data["Bank"] = this.bank;
        data["BankAccount"] = this.bankAccount;
        data["AddDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["AddUser"] = this.addUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasContract {
    beginDateBegin?: Date | undefined;
    beginDateEnd?: Date | undefined;
    endDateBegin?: Date | undefined;
    endDateEnd?: Date | undefined;
    addDateBegin?: Date | undefined;
    addDateEnd?: Date | undefined;
    updateDateBegin?: Date | undefined;
    updateDateEnd?: Date | undefined;
    id?: number | undefined;
    contractNo?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    supplierCode?: string | undefined;
    customerCode?: string | undefined;
    name?: string | undefined;
    nameEn?: string | undefined;
    nameAbbr?: string | undefined;
    nameEnAbbr?: string | undefined;
    taxNo?: string | undefined;
    countryCode?: string | undefined;
    countryName?: string | undefined;
    address?: string | undefined;
    addresssEn?: string | undefined;
    contactMan?: string | undefined;
    email?: string | undefined;
    tel?: string | undefined;
    invoiceHead?: string | undefined;
    invoiceAddress?: string | undefined;
    bank?: string | undefined;
    bankAccount?: string | undefined;
    addDate?: Date | undefined;
    addUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasContractFile implements IEntBasContractFile {
    id?: number | undefined;
    contractId?: number | undefined;
    contractNo?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    addDate?: Date | undefined;
    addUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasContractFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.contractId = data["ContractId"];
            this.contractNo = data["ContractNo"];
            this.fileName = data["FileName"];
            this.filePath = data["FilePath"];
            this.addDate = data["AddDate"] ? new Date(data["AddDate"].toString()) : <any>undefined;
            this.addUser = data["AddUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasContractFile {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasContractFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ContractId"] = this.contractId;
        data["ContractNo"] = this.contractNo;
        data["FileName"] = this.fileName;
        data["FilePath"] = this.filePath;
        data["AddDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["AddUser"] = this.addUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasContractFile {
    id?: number | undefined;
    contractId?: number | undefined;
    contractNo?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    addDate?: Date | undefined;
    addUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfEntBasCustomerDefaultconfig implements IReturnResultOfEntBasCustomerDefaultconfig {
    success?: boolean | undefined;
    data?: EntBasCustomerDefaultconfig | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntBasCustomerDefaultconfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntBasCustomerDefaultconfig.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntBasCustomerDefaultconfig {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntBasCustomerDefaultconfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntBasCustomerDefaultconfig {
    success?: boolean | undefined;
    data?: EntBasCustomerDefaultconfig | undefined;
    messge?: string | undefined;
}

export class EntBasCustomerDefaultconfig implements IEntBasCustomerDefaultconfig {
    id?: number | undefined;
    customerCode?: string | undefined;
    appAdress?: string | undefined;
    controlName?: string | undefined;
    controleVal?: string | undefined;
    controlType?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    ctrlShowText?: string | undefined;
    pageText?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasCustomerDefaultconfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.customerCode = data["CustomerCode"];
            this.appAdress = data["AppAdress"];
            this.controlName = data["ControlName"];
            this.controleVal = data["ControleVal"];
            this.controlType = data["ControlType"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.ctrlShowText = data["CtrlShowText"];
            this.pageText = data["PageText"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasCustomerDefaultconfig {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasCustomerDefaultconfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CustomerCode"] = this.customerCode;
        data["AppAdress"] = this.appAdress;
        data["ControlName"] = this.controlName;
        data["ControleVal"] = this.controleVal;
        data["ControlType"] = this.controlType;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CtrlShowText"] = this.ctrlShowText;
        data["PageText"] = this.pageText;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasCustomerDefaultconfig {
    id?: number | undefined;
    customerCode?: string | undefined;
    appAdress?: string | undefined;
    controlName?: string | undefined;
    controleVal?: string | undefined;
    controlType?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    ctrlShowText?: string | undefined;
    pageText?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class SearchRequest implements ISearchRequest {
    items?: FilterItem[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;

    constructor(data?: ISearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(FilterItem.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
        }
    }

    static fromJS(data: any): SearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        return data; 
    }
}

export interface ISearchRequest {
    items?: FilterItem[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
}

export class FilterItem implements IFilterItem {
    name?: string | undefined;
    operator?: FilterItemOperator | undefined;
    value?: any | undefined;

    constructor(data?: IFilterItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.operator = data["Operator"];
            this.value = data["Value"];
        }
    }

    static fromJS(data: any): FilterItem {
        data = typeof data === 'object' ? data : {};
        let result = new FilterItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["Operator"] = this.operator;
        data["Value"] = this.value;
        return data; 
    }
}

export interface IFilterItem {
    name?: string | undefined;
    operator?: FilterItemOperator | undefined;
    value?: any | undefined;
}

export class ReturnResultOfPageListOfEntBasCustomerDefaultconfig implements IReturnResultOfPageListOfEntBasCustomerDefaultconfig {
    success?: boolean | undefined;
    data?: PageListOfEntBasCustomerDefaultconfig | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntBasCustomerDefaultconfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntBasCustomerDefaultconfig.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntBasCustomerDefaultconfig {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntBasCustomerDefaultconfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntBasCustomerDefaultconfig {
    success?: boolean | undefined;
    data?: PageListOfEntBasCustomerDefaultconfig | undefined;
    messge?: string | undefined;
}

export class PageListOfEntBasCustomerDefaultconfig implements IPageListOfEntBasCustomerDefaultconfig {
    dataSource?: EntBasCustomerDefaultconfig[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntBasCustomerDefaultconfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntBasCustomerDefaultconfig.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntBasCustomerDefaultconfig {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntBasCustomerDefaultconfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntBasCustomerDefaultconfig {
    dataSource?: EntBasCustomerDefaultconfig[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfString implements IReturnResultOfString {
    success?: boolean | undefined;
    data?: string | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"];
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfString {
    success?: boolean | undefined;
    data?: string | undefined;
    messge?: string | undefined;
}

export class ReturnResultOfInt32 implements IReturnResultOfInt32 {
    success?: boolean | undefined;
    data?: number | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"];
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfInt32 {
    success?: boolean | undefined;
    data?: number | undefined;
    messge?: string | undefined;
}

export class EntDbVersion implements IEntDbVersion {
    id?: number | undefined;
    organizationCode?: string | undefined;
    clientVersion?: string | undefined;
    fileName?: string | undefined;
    updateStatus?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    dbType?: string | undefined;
    execSql?: string | undefined;
    errorMsg?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntDbVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.organizationCode = data["OrganizationCode"];
            this.clientVersion = data["ClientVersion"];
            this.fileName = data["FileName"];
            this.updateStatus = data["UpdateStatus"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.dbType = data["DbType"];
            this.execSql = data["ExecSql"];
            this.errorMsg = data["ErrorMsg"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntDbVersion {
        data = typeof data === 'object' ? data : {};
        let result = new EntDbVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["OrganizationCode"] = this.organizationCode;
        data["ClientVersion"] = this.clientVersion;
        data["FileName"] = this.fileName;
        data["UpdateStatus"] = this.updateStatus;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["DbType"] = this.dbType;
        data["ExecSql"] = this.execSql;
        data["ErrorMsg"] = this.errorMsg;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntDbVersion {
    id?: number | undefined;
    organizationCode?: string | undefined;
    clientVersion?: string | undefined;
    fileName?: string | undefined;
    updateStatus?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    dbType?: string | undefined;
    execSql?: string | undefined;
    errorMsg?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasRate implements IEntBasRate {
    iD?: number | undefined;
    originCurr?: string | undefined;
    curr?: string | undefined;
    baseQTY?: number | undefined;
    rate?: number | undefined;
    effectDate?: Date | undefined;
    failDate?: Date | undefined;
    descr?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.originCurr = data["OriginCurr"];
            this.curr = data["Curr"];
            this.baseQTY = data["BaseQTY"];
            this.rate = data["Rate"];
            this.effectDate = data["EffectDate"] ? new Date(data["EffectDate"].toString()) : <any>undefined;
            this.failDate = data["FailDate"] ? new Date(data["FailDate"].toString()) : <any>undefined;
            this.descr = data["Descr"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasRate {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["OriginCurr"] = this.originCurr;
        data["Curr"] = this.curr;
        data["BaseQTY"] = this.baseQTY;
        data["Rate"] = this.rate;
        data["EffectDate"] = this.effectDate ? this.effectDate.toISOString() : <any>undefined;
        data["FailDate"] = this.failDate ? this.failDate.toISOString() : <any>undefined;
        data["Descr"] = this.descr;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasRate {
    iD?: number | undefined;
    originCurr?: string | undefined;
    curr?: string | undefined;
    baseQTY?: number | undefined;
    rate?: number | undefined;
    effectDate?: Date | undefined;
    failDate?: Date | undefined;
    descr?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class RequestModelOfDataTable implements IRequestModelOfDataTable {
    data?: any | undefined;
    userName?: string | undefined;

    constructor(data?: IRequestModelOfDataTable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["Data"];
            this.userName = data["UserName"];
        }
    }

    static fromJS(data: any): RequestModelOfDataTable {
        data = typeof data === 'object' ? data : {};
        let result = new RequestModelOfDataTable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Data"] = this.data;
        data["UserName"] = this.userName;
        return data; 
    }
}

export interface IRequestModelOfDataTable {
    data?: any | undefined;
    userName?: string | undefined;
}

export class ReturnResultOfEntBasGoods implements IReturnResultOfEntBasGoods {
    success?: boolean | undefined;
    data?: EntBasGoods | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntBasGoods) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntBasGoods.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntBasGoods {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntBasGoods();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntBasGoods {
    success?: boolean | undefined;
    data?: EntBasGoods | undefined;
    messge?: string | undefined;
}

export class EntBasGoods implements IEntBasGoods {
    createTime_Begin?: Date | undefined;
    createTime_End?: Date | undefined;
    id?: number | undefined;
    copEmsId?: string | undefined;
    customerCode?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    materialFlag?: string | undefined;
    gName?: string | undefined;
    gNameEn?: string | undefined;
    unit?: string | undefined;
    decPrice?: number | undefined;
    currency?: string | undefined;
    allowMaxQty?: number | undefined;
    goodsFlag?: string | undefined;
    bondFlag?: string | undefined;
    suggestionNum?: string | undefined;
    hscode?: string | undefined;
    hscodeBig?: string | undefined;
    suggestionCompany?: string | undefined;
    erpUnit?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factor?: number | undefined;
    declareModel?: string | undefined;
    gModel?: string | undefined;
    goodsDescription?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    unitCn?: string | undefined;
    currCn?: string | undefined;
    importFile?: string | undefined;
    hscodeUpdateStatus?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    remark?: string | undefined;
    lotatt01?: string | undefined;
    lotatt02?: string | undefined;
    lotatt03?: string | undefined;
    lotatt04?: string | undefined;
    lotatt05?: string | undefined;
    country?: string | undefined;
    netWt?: number | undefined;
    serialNo?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasGoods) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createTime_Begin = data["CreateTime_Begin"] ? new Date(data["CreateTime_Begin"].toString()) : <any>undefined;
            this.createTime_End = data["CreateTime_End"] ? new Date(data["CreateTime_End"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.copEmsId = data["CopEmsId"];
            this.customerCode = data["CustomerCode"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.materialFlag = data["MaterialFlag"];
            this.gName = data["GName"];
            this.gNameEn = data["GNameEn"];
            this.unit = data["Unit"];
            this.decPrice = data["DecPrice"];
            this.currency = data["Currency"];
            this.allowMaxQty = data["AllowMaxQty"];
            this.goodsFlag = data["GoodsFlag"];
            this.bondFlag = data["BondFlag"];
            this.suggestionNum = data["SuggestionNum"];
            this.hscode = data["Hscode"];
            this.hscodeBig = data["HscodeBig"];
            this.suggestionCompany = data["SuggestionCompany"];
            this.erpUnit = data["ErpUnit"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factor = data["Factor"];
            this.declareModel = data["DeclareModel"];
            this.gModel = data["GModel"];
            this.goodsDescription = data["GoodsDescription"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.unitCn = data["UnitCn"];
            this.currCn = data["CurrCn"];
            this.importFile = data["ImportFile"];
            this.hscodeUpdateStatus = data["HscodeUpdateStatus"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.recordFlag = data["RecordFlag"];
            this.modifyMark = data["ModifyMark"];
            this.remark = data["Remark"];
            this.lotatt01 = data["Lotatt01"];
            this.lotatt02 = data["Lotatt02"];
            this.lotatt03 = data["Lotatt03"];
            this.lotatt04 = data["Lotatt04"];
            this.lotatt05 = data["Lotatt05"];
            this.country = data["Country"];
            this.netWt = data["NetWt"];
            this.serialNo = data["SerialNo"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasGoods {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasGoods();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreateTime_Begin"] = this.createTime_Begin ? this.createTime_Begin.toISOString() : <any>undefined;
        data["CreateTime_End"] = this.createTime_End ? this.createTime_End.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["CopEmsId"] = this.copEmsId;
        data["CustomerCode"] = this.customerCode;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["MaterialFlag"] = this.materialFlag;
        data["GName"] = this.gName;
        data["GNameEn"] = this.gNameEn;
        data["Unit"] = this.unit;
        data["DecPrice"] = this.decPrice;
        data["Currency"] = this.currency;
        data["AllowMaxQty"] = this.allowMaxQty;
        data["GoodsFlag"] = this.goodsFlag;
        data["BondFlag"] = this.bondFlag;
        data["SuggestionNum"] = this.suggestionNum;
        data["Hscode"] = this.hscode;
        data["HscodeBig"] = this.hscodeBig;
        data["SuggestionCompany"] = this.suggestionCompany;
        data["ErpUnit"] = this.erpUnit;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["Factor"] = this.factor;
        data["DeclareModel"] = this.declareModel;
        data["GModel"] = this.gModel;
        data["GoodsDescription"] = this.goodsDescription;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UnitCn"] = this.unitCn;
        data["CurrCn"] = this.currCn;
        data["ImportFile"] = this.importFile;
        data["HscodeUpdateStatus"] = this.hscodeUpdateStatus;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["RecordFlag"] = this.recordFlag;
        data["ModifyMark"] = this.modifyMark;
        data["Remark"] = this.remark;
        data["Lotatt01"] = this.lotatt01;
        data["Lotatt02"] = this.lotatt02;
        data["Lotatt03"] = this.lotatt03;
        data["Lotatt04"] = this.lotatt04;
        data["Lotatt05"] = this.lotatt05;
        data["Country"] = this.country;
        data["NetWt"] = this.netWt;
        data["SerialNo"] = this.serialNo;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasGoods {
    createTime_Begin?: Date | undefined;
    createTime_End?: Date | undefined;
    id?: number | undefined;
    copEmsId?: string | undefined;
    customerCode?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    materialFlag?: string | undefined;
    gName?: string | undefined;
    gNameEn?: string | undefined;
    unit?: string | undefined;
    decPrice?: number | undefined;
    currency?: string | undefined;
    allowMaxQty?: number | undefined;
    goodsFlag?: string | undefined;
    bondFlag?: string | undefined;
    suggestionNum?: string | undefined;
    hscode?: string | undefined;
    hscodeBig?: string | undefined;
    suggestionCompany?: string | undefined;
    erpUnit?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factor?: number | undefined;
    declareModel?: string | undefined;
    gModel?: string | undefined;
    goodsDescription?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    unitCn?: string | undefined;
    currCn?: string | undefined;
    importFile?: string | undefined;
    hscodeUpdateStatus?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    remark?: string | undefined;
    lotatt01?: string | undefined;
    lotatt02?: string | undefined;
    lotatt03?: string | undefined;
    lotatt04?: string | undefined;
    lotatt05?: string | undefined;
    country?: string | undefined;
    netWt?: number | undefined;
    serialNo?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntBasGoods implements IReturnResultOfPageListOfEntBasGoods {
    success?: boolean | undefined;
    data?: PageListOfEntBasGoods | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntBasGoods) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntBasGoods.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntBasGoods {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntBasGoods();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntBasGoods {
    success?: boolean | undefined;
    data?: PageListOfEntBasGoods | undefined;
    messge?: string | undefined;
}

export class PageListOfEntBasGoods implements IPageListOfEntBasGoods {
    dataSource?: EntBasGoods[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntBasGoods) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntBasGoods.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntBasGoods {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntBasGoods();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntBasGoods {
    dataSource?: EntBasGoods[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfDataTable implements IReturnResultOfDataTable {
    success?: boolean | undefined;
    data?: any | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfDataTable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"];
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfDataTable {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfDataTable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfDataTable {
    success?: boolean | undefined;
    data?: any | undefined;
    messge?: string | undefined;
}

export class ReturnResultOfBoolean implements IReturnResultOfBoolean {
    success?: boolean | undefined;
    data?: boolean | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"];
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfBoolean {
    success?: boolean | undefined;
    data?: boolean | undefined;
    messge?: string | undefined;
}

export class EntBasGoodsCc implements IEntBasGoodsCc {
    id?: number | undefined;
    copEmsId?: string | undefined;
    hsCode?: string | undefined;
    compareType?: string | undefined;
    compareInfo?: string | undefined;
    compareTime?: Date | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasGoodsCc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.copEmsId = data["CopEmsId"];
            this.hsCode = data["HsCode"];
            this.compareType = data["CompareType"];
            this.compareInfo = data["CompareInfo"];
            this.compareTime = data["CompareTime"] ? new Date(data["CompareTime"].toString()) : <any>undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasGoodsCc {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasGoodsCc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CopEmsId"] = this.copEmsId;
        data["HsCode"] = this.hsCode;
        data["CompareType"] = this.compareType;
        data["CompareInfo"] = this.compareInfo;
        data["CompareTime"] = this.compareTime ? this.compareTime.toISOString() : <any>undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasGoodsCc {
    id?: number | undefined;
    copEmsId?: string | undefined;
    hsCode?: string | undefined;
    compareType?: string | undefined;
    compareInfo?: string | undefined;
    compareTime?: Date | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfEntBasGoodsErpRelation implements IReturnResultOfEntBasGoodsErpRelation {
    success?: boolean | undefined;
    data?: EntBasGoodsErpRelation | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntBasGoodsErpRelation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntBasGoodsErpRelation.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntBasGoodsErpRelation {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntBasGoodsErpRelation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntBasGoodsErpRelation {
    success?: boolean | undefined;
    data?: EntBasGoodsErpRelation | undefined;
    messge?: string | undefined;
}

export class EntBasGoodsErpRelation implements IEntBasGoodsErpRelation {
    opreateFlag?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    emsNo?: string | undefined;
    erpSku?: string | undefined;
    imgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    remarks?: string | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    udpateUser?: string | undefined;
    gOODSFLAG?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasGoodsErpRelation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.opreateFlag = data["OpreateFlag"];
            this.id = data["Id"];
            this.customerCode = data["CustomerCode"];
            this.emsNo = data["EmsNo"];
            this.erpSku = data["ErpSku"];
            this.imgNo = data["ImgNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.remarks = data["Remarks"];
            this.usd01 = data["Usd01"];
            this.usd02 = data["Usd02"];
            this.usd03 = data["Usd03"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.udpateUser = data["UdpateUser"];
            this.gOODSFLAG = data["GOODSFLAG"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasGoodsErpRelation {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasGoodsErpRelation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OpreateFlag"] = this.opreateFlag;
        data["Id"] = this.id;
        data["CustomerCode"] = this.customerCode;
        data["EmsNo"] = this.emsNo;
        data["ErpSku"] = this.erpSku;
        data["ImgNo"] = this.imgNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["Remarks"] = this.remarks;
        data["Usd01"] = this.usd01;
        data["Usd02"] = this.usd02;
        data["Usd03"] = this.usd03;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UdpateUser"] = this.udpateUser;
        data["GOODSFLAG"] = this.gOODSFLAG;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasGoodsErpRelation {
    opreateFlag?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    emsNo?: string | undefined;
    erpSku?: string | undefined;
    imgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    remarks?: string | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    udpateUser?: string | undefined;
    gOODSFLAG?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntBasGoodsErpRelation implements IReturnResultOfPageListOfEntBasGoodsErpRelation {
    success?: boolean | undefined;
    data?: PageListOfEntBasGoodsErpRelation | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntBasGoodsErpRelation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntBasGoodsErpRelation.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntBasGoodsErpRelation {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntBasGoodsErpRelation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntBasGoodsErpRelation {
    success?: boolean | undefined;
    data?: PageListOfEntBasGoodsErpRelation | undefined;
    messge?: string | undefined;
}

export class PageListOfEntBasGoodsErpRelation implements IPageListOfEntBasGoodsErpRelation {
    dataSource?: EntBasGoodsErpRelation[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntBasGoodsErpRelation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntBasGoodsErpRelation.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntBasGoodsErpRelation {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntBasGoodsErpRelation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntBasGoodsErpRelation {
    dataSource?: EntBasGoodsErpRelation[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppBasicFactor implements IEntAppBasicFactor {
    iD?: number | undefined;
    sku?: string | undefined;
    sapUnit?: string | undefined;
    wmsUnit?: string | undefined;
    factor?: number | undefined;
    warehouseID?: string | undefined;
    factoryID?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppBasicFactor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.sku = data["Sku"];
            this.sapUnit = data["SapUnit"];
            this.wmsUnit = data["WmsUnit"];
            this.factor = data["Factor"];
            this.warehouseID = data["WarehouseID"];
            this.factoryID = data["FactoryID"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppBasicFactor {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppBasicFactor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Sku"] = this.sku;
        data["SapUnit"] = this.sapUnit;
        data["WmsUnit"] = this.wmsUnit;
        data["Factor"] = this.factor;
        data["WarehouseID"] = this.warehouseID;
        data["FactoryID"] = this.factoryID;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppBasicFactor {
    iD?: number | undefined;
    sku?: string | undefined;
    sapUnit?: string | undefined;
    wmsUnit?: string | undefined;
    factor?: number | undefined;
    warehouseID?: string | undefined;
    factoryID?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasSku implements IEntBasSku {
    id?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gNameEn?: string | undefined;
    gModel?: string | undefined;
    erpUnit?: string | undefined;
    hsCode?: string | undefined;
    goodsDesc?: string | undefined;
    remark?: string | undefined;
    country?: string | undefined;
    flag?: string | undefined;
    goodsFlag?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    importFile?: string | undefined;
    decPrice?: number | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    gModel2?: string | undefined;
    customerCode?: string | undefined;
    lotatt01?: string | undefined;
    lotatt02?: string | undefined;
    lotatt03?: string | undefined;
    lotatt04?: string | undefined;
    lotatt05?: string | undefined;
    serialNo?: number | undefined;
    hasPic?: boolean | undefined;
    isBawei?: boolean | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasSku) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.copGNo = data["CopGNo"];
            this.gName = data["GName"];
            this.gNameEn = data["GNameEn"];
            this.gModel = data["GModel"];
            this.erpUnit = data["ErpUnit"];
            this.hsCode = data["HsCode"];
            this.goodsDesc = data["GoodsDesc"];
            this.remark = data["Remark"];
            this.country = data["Country"];
            this.flag = data["Flag"];
            this.goodsFlag = data["GoodsFlag"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.importFile = data["ImportFile"];
            this.decPrice = data["DecPrice"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.gModel2 = data["GModel2"];
            this.customerCode = data["CustomerCode"];
            this.lotatt01 = data["Lotatt01"];
            this.lotatt02 = data["Lotatt02"];
            this.lotatt03 = data["Lotatt03"];
            this.lotatt04 = data["Lotatt04"];
            this.lotatt05 = data["Lotatt05"];
            this.serialNo = data["SerialNo"];
            this.hasPic = data["HasPic"];
            this.isBawei = data["isBawei"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasSku {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasSku();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CopGNo"] = this.copGNo;
        data["GName"] = this.gName;
        data["GNameEn"] = this.gNameEn;
        data["GModel"] = this.gModel;
        data["ErpUnit"] = this.erpUnit;
        data["HsCode"] = this.hsCode;
        data["GoodsDesc"] = this.goodsDesc;
        data["Remark"] = this.remark;
        data["Country"] = this.country;
        data["Flag"] = this.flag;
        data["GoodsFlag"] = this.goodsFlag;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["ImportFile"] = this.importFile;
        data["DecPrice"] = this.decPrice;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["GModel2"] = this.gModel2;
        data["CustomerCode"] = this.customerCode;
        data["Lotatt01"] = this.lotatt01;
        data["Lotatt02"] = this.lotatt02;
        data["Lotatt03"] = this.lotatt03;
        data["Lotatt04"] = this.lotatt04;
        data["Lotatt05"] = this.lotatt05;
        data["SerialNo"] = this.serialNo;
        data["HasPic"] = this.hasPic;
        data["isBawei"] = this.isBawei;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasSku {
    id?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gNameEn?: string | undefined;
    gModel?: string | undefined;
    erpUnit?: string | undefined;
    hsCode?: string | undefined;
    goodsDesc?: string | undefined;
    remark?: string | undefined;
    country?: string | undefined;
    flag?: string | undefined;
    goodsFlag?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    importFile?: string | undefined;
    decPrice?: number | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    gModel2?: string | undefined;
    customerCode?: string | undefined;
    lotatt01?: string | undefined;
    lotatt02?: string | undefined;
    lotatt03?: string | undefined;
    lotatt04?: string | undefined;
    lotatt05?: string | undefined;
    serialNo?: number | undefined;
    hasPic?: boolean | undefined;
    isBawei?: boolean | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntBasSku implements IReturnResultOfPageListOfEntBasSku {
    success?: boolean | undefined;
    data?: PageListOfEntBasSku | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntBasSku) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntBasSku.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntBasSku {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntBasSku();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntBasSku {
    success?: boolean | undefined;
    data?: PageListOfEntBasSku | undefined;
    messge?: string | undefined;
}

export class PageListOfEntBasSku implements IPageListOfEntBasSku {
    dataSource?: EntBasSku[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntBasSku) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntBasSku.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntBasSku {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntBasSku();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntBasSku {
    dataSource?: EntBasSku[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasSkuAttachment implements IEntBasSkuAttachment {
    id?: number | undefined;
    headId?: number | undefined;
    attacthmentPath?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    description?: string | undefined;
    customeCode?: string | undefined;
    copGNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasSkuAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.headId = data["HeadId"];
            this.attacthmentPath = data["AttacthmentPath"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.description = data["Description"];
            this.customeCode = data["CustomeCode"];
            this.copGNo = data["CopGNo"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasSkuAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasSkuAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["HeadId"] = this.headId;
        data["AttacthmentPath"] = this.attacthmentPath;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["Description"] = this.description;
        data["CustomeCode"] = this.customeCode;
        data["CopGNo"] = this.copGNo;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasSkuAttachment {
    id?: number | undefined;
    headId?: number | undefined;
    attacthmentPath?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    description?: string | undefined;
    customeCode?: string | undefined;
    copGNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntBasSkuAttachment implements IReturnResultOfPageListOfEntBasSkuAttachment {
    success?: boolean | undefined;
    data?: PageListOfEntBasSkuAttachment | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntBasSkuAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntBasSkuAttachment.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntBasSkuAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntBasSkuAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntBasSkuAttachment {
    success?: boolean | undefined;
    data?: PageListOfEntBasSkuAttachment | undefined;
    messge?: string | undefined;
}

export class PageListOfEntBasSkuAttachment implements IPageListOfEntBasSkuAttachment {
    dataSource?: EntBasSkuAttachment[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntBasSkuAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntBasSkuAttachment.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntBasSkuAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntBasSkuAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntBasSkuAttachment {
    dataSource?: EntBasSkuAttachment[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenBillHead implements IReturnResultOfPageListOfEntGoldenBillHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenBillHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenBillHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenBillHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenBillHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenBillHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenBillHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenBillHead | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenBillHead implements IPageListOfEntGoldenBillHead {
    dataSource?: EntGoldenBillHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenBillHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenBillHead.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenBillHead {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenBillHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenBillHead {
    dataSource?: EntGoldenBillHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBillHead implements IEntGoldenBillHead {
    lists?: EntGoldenBillList[] | undefined;
    listMerges?: EntGoldenBillListMerge[] | undefined;
    files?: EntTgBusinessFile[] | undefined;
    serialNo?: number | undefined;
    datas?: any | undefined;
    queryBeginDate?: string | undefined;
    queryEndDate?: string | undefined;
    ids?: string[] | undefined;
    id?: number | undefined;
    preEmsId?: string | undefined;
    seqNo?: string | undefined;
    billType?: string | undefined;
    emsNo?: string | undefined;
    busNo?: string | undefined;
    billNo?: string | undefined;
    custom?: string | undefined;
    copErpCode?: string | undefined;
    tradeCode?: string | undefined;
    tradeName?: string | undefined;
    tradeCredit?: string | undefined;
    agentCode?: string | undefined;
    agentName?: string | undefined;
    agentCredit?: string | undefined;
    receiveCode?: string | undefined;
    receiveName?: string | undefined;
    receiveCredit?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    inputCredit?: string | undefined;
    iePort?: string | undefined;
    shipCountry?: string | undefined;
    goodsFlag?: string | undefined;
    inputDate?: Date | undefined;
    transMode?: string | undefined;
    tradeMode?: string | undefined;
    agentDate?: Date | undefined;
    grossWt?: number | undefined;
    netWt?: number | undefined;
    billStatus?: string | undefined;
    serviceCompany?: string | undefined;
    modifyTimes?: number | undefined;
    changeType?: string | undefined;
    iEFlag?: string | undefined;
    entryType?: string | undefined;
    entryId?: string | undefined;
    dDate?: Date | undefined;
    remark?: string | undefined;
    dataInputFlag?: number | undefined;
    entryFlag?: string | undefined;
    fileName?: string | undefined;
    fileCreateFlag?: string | undefined;
    importName?: string | undefined;
    exeMark?: string | undefined;
    dejouMark?: string | undefined;
    processMark?: string | undefined;
    modifyMark?: string | undefined;
    sendFlag?: string | undefined;
    status?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    corAgentCode?: string | undefined;
    corAgentName?: string | undefined;
    corAgentCredit?: string | undefined;
    relEntryId?: string | undefined;
    relCopEmsId?: string | undefined;
    relEmsNo?: string | undefined;
    relReceiveCode?: string | undefined;
    relReceiveName?: string | undefined;
    relReceiveCredit?: string | undefined;
    relTradeCode?: string | undefined;
    relTradeName?: string | undefined;
    relTradeCredit?: string | undefined;
    relAgentCode?: string | undefined;
    relAgentName?: string | undefined;
    relAgentCredit?: string | undefined;
    relAgentDate?: Date | undefined;
    entryRemark?: string | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    usd07?: string | undefined;
    usd08?: string | undefined;
    usd09?: string | undefined;
    usd10?: string | undefined;
    declareType?: string | undefined;
    relativeCustomsNo?: string | undefined;
    organizationCode?: string | undefined;
    entrySeqNo?: string | undefined;
    duCode?: Date | undefined;
    billAgentDate?: Date | undefined;
    vrfdedMarkcd?: string | undefined;
    prevdTime?: Date | undefined;
    formalVrfdedTime?: Date | undefined;
    approveResult?: string | undefined;
    approveRejectReason?: string | undefined;
    approveRejectDescription?: string | undefined;
    approveUser?: string | undefined;
    approveDate?: Date | undefined;
    isGenerate?: number | undefined;
    applyNo?: string | undefined;
    dclTypecd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBillHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["Lists"])) {
                this.lists = [] as any;
                for (let item of data["Lists"])
                    this.lists!.push(EntGoldenBillList.fromJS(item));
            }
            if (Array.isArray(data["ListMerges"])) {
                this.listMerges = [] as any;
                for (let item of data["ListMerges"])
                    this.listMerges!.push(EntGoldenBillListMerge.fromJS(item));
            }
            if (Array.isArray(data["Files"])) {
                this.files = [] as any;
                for (let item of data["Files"])
                    this.files!.push(EntTgBusinessFile.fromJS(item));
            }
            this.serialNo = data["SerialNo"];
            this.datas = data["Datas"];
            this.queryBeginDate = data["QueryBeginDate"];
            this.queryEndDate = data["QueryEndDate"];
            if (Array.isArray(data["Ids"])) {
                this.ids = [] as any;
                for (let item of data["Ids"])
                    this.ids!.push(item);
            }
            this.id = data["Id"];
            this.preEmsId = data["PreEmsId"];
            this.seqNo = data["SeqNo"];
            this.billType = data["BillType"];
            this.emsNo = data["EmsNo"];
            this.busNo = data["BusNo"];
            this.billNo = data["BillNo"];
            this.custom = data["Custom"];
            this.copErpCode = data["CopErpCode"];
            this.tradeCode = data["TradeCode"];
            this.tradeName = data["TradeName"];
            this.tradeCredit = data["TradeCredit"];
            this.agentCode = data["AgentCode"];
            this.agentName = data["AgentName"];
            this.agentCredit = data["AgentCredit"];
            this.receiveCode = data["ReceiveCode"];
            this.receiveName = data["ReceiveName"];
            this.receiveCredit = data["ReceiveCredit"];
            this.inputCode = data["InputCode"];
            this.inputName = data["InputName"];
            this.inputCredit = data["InputCredit"];
            this.iePort = data["IePort"];
            this.shipCountry = data["ShipCountry"];
            this.goodsFlag = data["GoodsFlag"];
            this.inputDate = data["InputDate"] ? new Date(data["InputDate"].toString()) : <any>undefined;
            this.transMode = data["TransMode"];
            this.tradeMode = data["TradeMode"];
            this.agentDate = data["AgentDate"] ? new Date(data["AgentDate"].toString()) : <any>undefined;
            this.grossWt = data["GrossWt"];
            this.netWt = data["NetWt"];
            this.billStatus = data["BillStatus"];
            this.serviceCompany = data["ServiceCompany"];
            this.modifyTimes = data["ModifyTimes"];
            this.changeType = data["ChangeType"];
            this.iEFlag = data["IEFlag"];
            this.entryType = data["EntryType"];
            this.entryId = data["EntryId"];
            this.dDate = data["DDate"] ? new Date(data["DDate"].toString()) : <any>undefined;
            this.remark = data["Remark"];
            this.dataInputFlag = data["DataInputFlag"];
            this.entryFlag = data["EntryFlag"];
            this.fileName = data["FileName"];
            this.fileCreateFlag = data["FileCreateFlag"];
            this.importName = data["ImportName"];
            this.exeMark = data["ExeMark"];
            this.dejouMark = data["DejouMark"];
            this.processMark = data["ProcessMark"];
            this.modifyMark = data["ModifyMark"];
            this.sendFlag = data["SendFlag"];
            this.status = data["Status"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.corAgentCode = data["CorAgentCode"];
            this.corAgentName = data["CorAgentName"];
            this.corAgentCredit = data["CorAgentCredit"];
            this.relEntryId = data["RelEntryId"];
            this.relCopEmsId = data["RelCopEmsId"];
            this.relEmsNo = data["RelEmsNo"];
            this.relReceiveCode = data["RelReceiveCode"];
            this.relReceiveName = data["RelReceiveName"];
            this.relReceiveCredit = data["RelReceiveCredit"];
            this.relTradeCode = data["RelTradeCode"];
            this.relTradeName = data["RelTradeName"];
            this.relTradeCredit = data["RelTradeCredit"];
            this.relAgentCode = data["RelAgentCode"];
            this.relAgentName = data["RelAgentName"];
            this.relAgentCredit = data["RelAgentCredit"];
            this.relAgentDate = data["RelAgentDate"] ? new Date(data["RelAgentDate"].toString()) : <any>undefined;
            this.entryRemark = data["EntryRemark"];
            this.usd01 = data["Usd01"];
            this.usd02 = data["Usd02"];
            this.usd03 = data["Usd03"];
            this.usd04 = data["Usd04"];
            this.usd05 = data["Usd05"];
            this.usd06 = data["Usd06"];
            this.usd07 = data["Usd07"];
            this.usd08 = data["Usd08"];
            this.usd09 = data["Usd09"];
            this.usd10 = data["Usd10"];
            this.declareType = data["DeclareType"];
            this.relativeCustomsNo = data["RelativeCustomsNo"];
            this.organizationCode = data["OrganizationCode"];
            this.entrySeqNo = data["EntrySeqNo"];
            this.duCode = data["DuCode"] ? new Date(data["DuCode"].toString()) : <any>undefined;
            this.billAgentDate = data["BillAgentDate"] ? new Date(data["BillAgentDate"].toString()) : <any>undefined;
            this.vrfdedMarkcd = data["VrfdedMarkcd"];
            this.prevdTime = data["PrevdTime"] ? new Date(data["PrevdTime"].toString()) : <any>undefined;
            this.formalVrfdedTime = data["FormalVrfdedTime"] ? new Date(data["FormalVrfdedTime"].toString()) : <any>undefined;
            this.approveResult = data["ApproveResult"];
            this.approveRejectReason = data["ApproveRejectReason"];
            this.approveRejectDescription = data["ApproveRejectDescription"];
            this.approveUser = data["ApproveUser"];
            this.approveDate = data["ApproveDate"] ? new Date(data["ApproveDate"].toString()) : <any>undefined;
            this.isGenerate = data["IsGenerate"];
            this.applyNo = data["ApplyNo"];
            this.dclTypecd = data["DclTypecd"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBillHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBillHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["Lists"] = [];
            for (let item of this.lists)
                data["Lists"].push(item.toJSON());
        }
        if (Array.isArray(this.listMerges)) {
            data["ListMerges"] = [];
            for (let item of this.listMerges)
                data["ListMerges"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["Files"] = [];
            for (let item of this.files)
                data["Files"].push(item.toJSON());
        }
        data["SerialNo"] = this.serialNo;
        data["Datas"] = this.datas;
        data["QueryBeginDate"] = this.queryBeginDate;
        data["QueryEndDate"] = this.queryEndDate;
        if (Array.isArray(this.ids)) {
            data["Ids"] = [];
            for (let item of this.ids)
                data["Ids"].push(item);
        }
        data["Id"] = this.id;
        data["PreEmsId"] = this.preEmsId;
        data["SeqNo"] = this.seqNo;
        data["BillType"] = this.billType;
        data["EmsNo"] = this.emsNo;
        data["BusNo"] = this.busNo;
        data["BillNo"] = this.billNo;
        data["Custom"] = this.custom;
        data["CopErpCode"] = this.copErpCode;
        data["TradeCode"] = this.tradeCode;
        data["TradeName"] = this.tradeName;
        data["TradeCredit"] = this.tradeCredit;
        data["AgentCode"] = this.agentCode;
        data["AgentName"] = this.agentName;
        data["AgentCredit"] = this.agentCredit;
        data["ReceiveCode"] = this.receiveCode;
        data["ReceiveName"] = this.receiveName;
        data["ReceiveCredit"] = this.receiveCredit;
        data["InputCode"] = this.inputCode;
        data["InputName"] = this.inputName;
        data["InputCredit"] = this.inputCredit;
        data["IePort"] = this.iePort;
        data["ShipCountry"] = this.shipCountry;
        data["GoodsFlag"] = this.goodsFlag;
        data["InputDate"] = this.inputDate ? this.inputDate.toISOString() : <any>undefined;
        data["TransMode"] = this.transMode;
        data["TradeMode"] = this.tradeMode;
        data["AgentDate"] = this.agentDate ? this.agentDate.toISOString() : <any>undefined;
        data["GrossWt"] = this.grossWt;
        data["NetWt"] = this.netWt;
        data["BillStatus"] = this.billStatus;
        data["ServiceCompany"] = this.serviceCompany;
        data["ModifyTimes"] = this.modifyTimes;
        data["ChangeType"] = this.changeType;
        data["IEFlag"] = this.iEFlag;
        data["EntryType"] = this.entryType;
        data["EntryId"] = this.entryId;
        data["DDate"] = this.dDate ? this.dDate.toISOString() : <any>undefined;
        data["Remark"] = this.remark;
        data["DataInputFlag"] = this.dataInputFlag;
        data["EntryFlag"] = this.entryFlag;
        data["FileName"] = this.fileName;
        data["FileCreateFlag"] = this.fileCreateFlag;
        data["ImportName"] = this.importName;
        data["ExeMark"] = this.exeMark;
        data["DejouMark"] = this.dejouMark;
        data["ProcessMark"] = this.processMark;
        data["ModifyMark"] = this.modifyMark;
        data["SendFlag"] = this.sendFlag;
        data["Status"] = this.status;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["CorAgentCode"] = this.corAgentCode;
        data["CorAgentName"] = this.corAgentName;
        data["CorAgentCredit"] = this.corAgentCredit;
        data["RelEntryId"] = this.relEntryId;
        data["RelCopEmsId"] = this.relCopEmsId;
        data["RelEmsNo"] = this.relEmsNo;
        data["RelReceiveCode"] = this.relReceiveCode;
        data["RelReceiveName"] = this.relReceiveName;
        data["RelReceiveCredit"] = this.relReceiveCredit;
        data["RelTradeCode"] = this.relTradeCode;
        data["RelTradeName"] = this.relTradeName;
        data["RelTradeCredit"] = this.relTradeCredit;
        data["RelAgentCode"] = this.relAgentCode;
        data["RelAgentName"] = this.relAgentName;
        data["RelAgentCredit"] = this.relAgentCredit;
        data["RelAgentDate"] = this.relAgentDate ? this.relAgentDate.toISOString() : <any>undefined;
        data["EntryRemark"] = this.entryRemark;
        data["Usd01"] = this.usd01;
        data["Usd02"] = this.usd02;
        data["Usd03"] = this.usd03;
        data["Usd04"] = this.usd04;
        data["Usd05"] = this.usd05;
        data["Usd06"] = this.usd06;
        data["Usd07"] = this.usd07;
        data["Usd08"] = this.usd08;
        data["Usd09"] = this.usd09;
        data["Usd10"] = this.usd10;
        data["DeclareType"] = this.declareType;
        data["RelativeCustomsNo"] = this.relativeCustomsNo;
        data["OrganizationCode"] = this.organizationCode;
        data["EntrySeqNo"] = this.entrySeqNo;
        data["DuCode"] = this.duCode ? this.duCode.toISOString() : <any>undefined;
        data["BillAgentDate"] = this.billAgentDate ? this.billAgentDate.toISOString() : <any>undefined;
        data["VrfdedMarkcd"] = this.vrfdedMarkcd;
        data["PrevdTime"] = this.prevdTime ? this.prevdTime.toISOString() : <any>undefined;
        data["FormalVrfdedTime"] = this.formalVrfdedTime ? this.formalVrfdedTime.toISOString() : <any>undefined;
        data["ApproveResult"] = this.approveResult;
        data["ApproveRejectReason"] = this.approveRejectReason;
        data["ApproveRejectDescription"] = this.approveRejectDescription;
        data["ApproveUser"] = this.approveUser;
        data["ApproveDate"] = this.approveDate ? this.approveDate.toISOString() : <any>undefined;
        data["IsGenerate"] = this.isGenerate;
        data["ApplyNo"] = this.applyNo;
        data["DclTypecd"] = this.dclTypecd;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBillHead {
    lists?: EntGoldenBillList[] | undefined;
    listMerges?: EntGoldenBillListMerge[] | undefined;
    files?: EntTgBusinessFile[] | undefined;
    serialNo?: number | undefined;
    datas?: any | undefined;
    queryBeginDate?: string | undefined;
    queryEndDate?: string | undefined;
    ids?: string[] | undefined;
    id?: number | undefined;
    preEmsId?: string | undefined;
    seqNo?: string | undefined;
    billType?: string | undefined;
    emsNo?: string | undefined;
    busNo?: string | undefined;
    billNo?: string | undefined;
    custom?: string | undefined;
    copErpCode?: string | undefined;
    tradeCode?: string | undefined;
    tradeName?: string | undefined;
    tradeCredit?: string | undefined;
    agentCode?: string | undefined;
    agentName?: string | undefined;
    agentCredit?: string | undefined;
    receiveCode?: string | undefined;
    receiveName?: string | undefined;
    receiveCredit?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    inputCredit?: string | undefined;
    iePort?: string | undefined;
    shipCountry?: string | undefined;
    goodsFlag?: string | undefined;
    inputDate?: Date | undefined;
    transMode?: string | undefined;
    tradeMode?: string | undefined;
    agentDate?: Date | undefined;
    grossWt?: number | undefined;
    netWt?: number | undefined;
    billStatus?: string | undefined;
    serviceCompany?: string | undefined;
    modifyTimes?: number | undefined;
    changeType?: string | undefined;
    iEFlag?: string | undefined;
    entryType?: string | undefined;
    entryId?: string | undefined;
    dDate?: Date | undefined;
    remark?: string | undefined;
    dataInputFlag?: number | undefined;
    entryFlag?: string | undefined;
    fileName?: string | undefined;
    fileCreateFlag?: string | undefined;
    importName?: string | undefined;
    exeMark?: string | undefined;
    dejouMark?: string | undefined;
    processMark?: string | undefined;
    modifyMark?: string | undefined;
    sendFlag?: string | undefined;
    status?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    corAgentCode?: string | undefined;
    corAgentName?: string | undefined;
    corAgentCredit?: string | undefined;
    relEntryId?: string | undefined;
    relCopEmsId?: string | undefined;
    relEmsNo?: string | undefined;
    relReceiveCode?: string | undefined;
    relReceiveName?: string | undefined;
    relReceiveCredit?: string | undefined;
    relTradeCode?: string | undefined;
    relTradeName?: string | undefined;
    relTradeCredit?: string | undefined;
    relAgentCode?: string | undefined;
    relAgentName?: string | undefined;
    relAgentCredit?: string | undefined;
    relAgentDate?: Date | undefined;
    entryRemark?: string | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    usd07?: string | undefined;
    usd08?: string | undefined;
    usd09?: string | undefined;
    usd10?: string | undefined;
    declareType?: string | undefined;
    relativeCustomsNo?: string | undefined;
    organizationCode?: string | undefined;
    entrySeqNo?: string | undefined;
    duCode?: Date | undefined;
    billAgentDate?: Date | undefined;
    vrfdedMarkcd?: string | undefined;
    prevdTime?: Date | undefined;
    formalVrfdedTime?: Date | undefined;
    approveResult?: string | undefined;
    approveRejectReason?: string | undefined;
    approveRejectDescription?: string | undefined;
    approveUser?: string | undefined;
    approveDate?: Date | undefined;
    isGenerate?: number | undefined;
    applyNo?: string | undefined;
    dclTypecd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBillList implements IEntGoldenBillList {
    id?: number | undefined;
    headId?: number | undefined;
    copEmsId?: string | undefined;
    seqNo?: number | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    entGNo?: number | undefined;
    changeSeqNo?: number | undefined;
    hscode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    qty?: number | undefined;
    unit?: string | undefined;
    tradePrice?: number | undefined;
    tradeTotal?: number | undefined;
    usdTotal?: number | undefined;
    curr?: string | undefined;
    qty1?: number | undefined;
    unit1?: string | undefined;
    qty2?: number | undefined;
    unit2?: string | undefined;
    country?: string | undefined;
    destinationCountry?: string | undefined;
    beginDate?: string | undefined;
    versionNo?: string | undefined;
    dutyMode?: string | undefined;
    netWt?: number | undefined;
    grossWt?: number | undefined;
    orderValue?: number | undefined;
    controlHg?: string | undefined;
    controlSj?: string | undefined;
    remark?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    useType?: string | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    erpSku?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBillList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.headId = data["HeadId"];
            this.copEmsId = data["CopEmsId"];
            this.seqNo = data["SeqNo"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.entGNo = data["EntGNo"];
            this.changeSeqNo = data["ChangeSeqNo"];
            this.hscode = data["Hscode"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.qty = data["Qty"];
            this.unit = data["Unit"];
            this.tradePrice = data["TradePrice"];
            this.tradeTotal = data["TradeTotal"];
            this.usdTotal = data["UsdTotal"];
            this.curr = data["Curr"];
            this.qty1 = data["Qty1"];
            this.unit1 = data["Unit1"];
            this.qty2 = data["Qty2"];
            this.unit2 = data["Unit2"];
            this.country = data["Country"];
            this.destinationCountry = data["DestinationCountry"];
            this.beginDate = data["BeginDate"];
            this.versionNo = data["VersionNo"];
            this.dutyMode = data["DutyMode"];
            this.netWt = data["NetWt"];
            this.grossWt = data["GrossWt"];
            this.orderValue = data["OrderValue"];
            this.controlHg = data["ControlHg"];
            this.controlSj = data["ControlSj"];
            this.remark = data["Remark"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.useType = data["UseType"];
            this.modifyMark = data["ModifyMark"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.usd01 = data["Usd01"];
            this.usd02 = data["Usd02"];
            this.usd03 = data["Usd03"];
            this.usd04 = data["Usd04"];
            this.usd05 = data["Usd05"];
            this.usd06 = data["Usd06"];
            this.lotAtt01 = data["LotAtt01"];
            this.lotAtt02 = data["LotAtt02"];
            this.lotAtt03 = data["LotAtt03"];
            this.lotAtt04 = data["LotAtt04"];
            this.lotAtt05 = data["LotAtt05"];
            this.lotAtt06 = data["LotAtt06"];
            this.lotAtt07 = data["LotAtt07"];
            this.lotAtt08 = data["LotAtt08"];
            this.lotAtt09 = data["LotAtt09"];
            this.lotAtt10 = data["LotAtt10"];
            this.lotAtt11 = data["LotAtt11"];
            this.lotAtt12 = data["LotAtt12"];
            this.lotAtt13 = data["LotAtt13"];
            this.lotAtt14 = data["LotAtt14"];
            this.lotAtt15 = data["LotAtt15"];
            this.lotAtt16 = data["LotAtt16"];
            this.lotAtt17 = data["LotAtt17"];
            this.lotAtt18 = data["LotAtt18"];
            this.erpSku = data["ErpSku"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBillList {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBillList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["HeadId"] = this.headId;
        data["CopEmsId"] = this.copEmsId;
        data["SeqNo"] = this.seqNo;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["EntGNo"] = this.entGNo;
        data["ChangeSeqNo"] = this.changeSeqNo;
        data["Hscode"] = this.hscode;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["Qty"] = this.qty;
        data["Unit"] = this.unit;
        data["TradePrice"] = this.tradePrice;
        data["TradeTotal"] = this.tradeTotal;
        data["UsdTotal"] = this.usdTotal;
        data["Curr"] = this.curr;
        data["Qty1"] = this.qty1;
        data["Unit1"] = this.unit1;
        data["Qty2"] = this.qty2;
        data["Unit2"] = this.unit2;
        data["Country"] = this.country;
        data["DestinationCountry"] = this.destinationCountry;
        data["BeginDate"] = this.beginDate;
        data["VersionNo"] = this.versionNo;
        data["DutyMode"] = this.dutyMode;
        data["NetWt"] = this.netWt;
        data["GrossWt"] = this.grossWt;
        data["OrderValue"] = this.orderValue;
        data["ControlHg"] = this.controlHg;
        data["ControlSj"] = this.controlSj;
        data["Remark"] = this.remark;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["UseType"] = this.useType;
        data["ModifyMark"] = this.modifyMark;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["Usd01"] = this.usd01;
        data["Usd02"] = this.usd02;
        data["Usd03"] = this.usd03;
        data["Usd04"] = this.usd04;
        data["Usd05"] = this.usd05;
        data["Usd06"] = this.usd06;
        data["LotAtt01"] = this.lotAtt01;
        data["LotAtt02"] = this.lotAtt02;
        data["LotAtt03"] = this.lotAtt03;
        data["LotAtt04"] = this.lotAtt04;
        data["LotAtt05"] = this.lotAtt05;
        data["LotAtt06"] = this.lotAtt06;
        data["LotAtt07"] = this.lotAtt07;
        data["LotAtt08"] = this.lotAtt08;
        data["LotAtt09"] = this.lotAtt09;
        data["LotAtt10"] = this.lotAtt10;
        data["LotAtt11"] = this.lotAtt11;
        data["LotAtt12"] = this.lotAtt12;
        data["LotAtt13"] = this.lotAtt13;
        data["LotAtt14"] = this.lotAtt14;
        data["LotAtt15"] = this.lotAtt15;
        data["LotAtt16"] = this.lotAtt16;
        data["LotAtt17"] = this.lotAtt17;
        data["LotAtt18"] = this.lotAtt18;
        data["ErpSku"] = this.erpSku;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBillList {
    id?: number | undefined;
    headId?: number | undefined;
    copEmsId?: string | undefined;
    seqNo?: number | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    entGNo?: number | undefined;
    changeSeqNo?: number | undefined;
    hscode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    qty?: number | undefined;
    unit?: string | undefined;
    tradePrice?: number | undefined;
    tradeTotal?: number | undefined;
    usdTotal?: number | undefined;
    curr?: string | undefined;
    qty1?: number | undefined;
    unit1?: string | undefined;
    qty2?: number | undefined;
    unit2?: string | undefined;
    country?: string | undefined;
    destinationCountry?: string | undefined;
    beginDate?: string | undefined;
    versionNo?: string | undefined;
    dutyMode?: string | undefined;
    netWt?: number | undefined;
    grossWt?: number | undefined;
    orderValue?: number | undefined;
    controlHg?: string | undefined;
    controlSj?: string | undefined;
    remark?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    useType?: string | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    erpSku?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBillListMerge implements IEntGoldenBillListMerge {
    id?: number | undefined;
    headId?: number | undefined;
    copEmsId?: string | undefined;
    seqNo?: number | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    entGNo?: number | undefined;
    changeSeqNo?: number | undefined;
    hscode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    qty?: number | undefined;
    unit?: string | undefined;
    tradePrice?: number | undefined;
    tradeTotal?: number | undefined;
    usdTotal?: number | undefined;
    curr?: string | undefined;
    qty1?: number | undefined;
    unit1?: string | undefined;
    qty2?: number | undefined;
    unit2?: string | undefined;
    country?: string | undefined;
    destinationCountry?: string | undefined;
    beginDate?: string | undefined;
    versionNo?: string | undefined;
    dutyMode?: string | undefined;
    netWt?: number | undefined;
    grossWt?: number | undefined;
    orderValue?: number | undefined;
    controlHg?: string | undefined;
    controlSj?: string | undefined;
    remark?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    useType?: string | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBillListMerge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.headId = data["HeadId"];
            this.copEmsId = data["CopEmsId"];
            this.seqNo = data["SeqNo"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.entGNo = data["EntGNo"];
            this.changeSeqNo = data["ChangeSeqNo"];
            this.hscode = data["Hscode"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.qty = data["Qty"];
            this.unit = data["Unit"];
            this.tradePrice = data["TradePrice"];
            this.tradeTotal = data["TradeTotal"];
            this.usdTotal = data["UsdTotal"];
            this.curr = data["Curr"];
            this.qty1 = data["Qty1"];
            this.unit1 = data["Unit1"];
            this.qty2 = data["Qty2"];
            this.unit2 = data["Unit2"];
            this.country = data["Country"];
            this.destinationCountry = data["DestinationCountry"];
            this.beginDate = data["BeginDate"];
            this.versionNo = data["VersionNo"];
            this.dutyMode = data["DutyMode"];
            this.netWt = data["NetWt"];
            this.grossWt = data["GrossWt"];
            this.orderValue = data["OrderValue"];
            this.controlHg = data["ControlHg"];
            this.controlSj = data["ControlSj"];
            this.remark = data["Remark"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.useType = data["UseType"];
            this.modifyMark = data["ModifyMark"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.usd01 = data["Usd01"];
            this.usd02 = data["Usd02"];
            this.usd03 = data["Usd03"];
            this.usd04 = data["Usd04"];
            this.usd05 = data["Usd05"];
            this.usd06 = data["Usd06"];
            this.lotAtt01 = data["LotAtt01"];
            this.lotAtt02 = data["LotAtt02"];
            this.lotAtt03 = data["LotAtt03"];
            this.lotAtt04 = data["LotAtt04"];
            this.lotAtt05 = data["LotAtt05"];
            this.lotAtt06 = data["LotAtt06"];
            this.lotAtt07 = data["LotAtt07"];
            this.lotAtt08 = data["LotAtt08"];
            this.lotAtt09 = data["LotAtt09"];
            this.lotAtt10 = data["LotAtt10"];
            this.lotAtt11 = data["LotAtt11"];
            this.lotAtt12 = data["LotAtt12"];
            this.lotAtt13 = data["LotAtt13"];
            this.lotAtt14 = data["LotAtt14"];
            this.lotAtt15 = data["LotAtt15"];
            this.lotAtt16 = data["LotAtt16"];
            this.lotAtt17 = data["LotAtt17"];
            this.lotAtt18 = data["LotAtt18"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBillListMerge {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBillListMerge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["HeadId"] = this.headId;
        data["CopEmsId"] = this.copEmsId;
        data["SeqNo"] = this.seqNo;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["EntGNo"] = this.entGNo;
        data["ChangeSeqNo"] = this.changeSeqNo;
        data["Hscode"] = this.hscode;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["Qty"] = this.qty;
        data["Unit"] = this.unit;
        data["TradePrice"] = this.tradePrice;
        data["TradeTotal"] = this.tradeTotal;
        data["UsdTotal"] = this.usdTotal;
        data["Curr"] = this.curr;
        data["Qty1"] = this.qty1;
        data["Unit1"] = this.unit1;
        data["Qty2"] = this.qty2;
        data["Unit2"] = this.unit2;
        data["Country"] = this.country;
        data["DestinationCountry"] = this.destinationCountry;
        data["BeginDate"] = this.beginDate;
        data["VersionNo"] = this.versionNo;
        data["DutyMode"] = this.dutyMode;
        data["NetWt"] = this.netWt;
        data["GrossWt"] = this.grossWt;
        data["OrderValue"] = this.orderValue;
        data["ControlHg"] = this.controlHg;
        data["ControlSj"] = this.controlSj;
        data["Remark"] = this.remark;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["UseType"] = this.useType;
        data["ModifyMark"] = this.modifyMark;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["Usd01"] = this.usd01;
        data["Usd02"] = this.usd02;
        data["Usd03"] = this.usd03;
        data["Usd04"] = this.usd04;
        data["Usd05"] = this.usd05;
        data["Usd06"] = this.usd06;
        data["LotAtt01"] = this.lotAtt01;
        data["LotAtt02"] = this.lotAtt02;
        data["LotAtt03"] = this.lotAtt03;
        data["LotAtt04"] = this.lotAtt04;
        data["LotAtt05"] = this.lotAtt05;
        data["LotAtt06"] = this.lotAtt06;
        data["LotAtt07"] = this.lotAtt07;
        data["LotAtt08"] = this.lotAtt08;
        data["LotAtt09"] = this.lotAtt09;
        data["LotAtt10"] = this.lotAtt10;
        data["LotAtt11"] = this.lotAtt11;
        data["LotAtt12"] = this.lotAtt12;
        data["LotAtt13"] = this.lotAtt13;
        data["LotAtt14"] = this.lotAtt14;
        data["LotAtt15"] = this.lotAtt15;
        data["LotAtt16"] = this.lotAtt16;
        data["LotAtt17"] = this.lotAtt17;
        data["LotAtt18"] = this.lotAtt18;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBillListMerge {
    id?: number | undefined;
    headId?: number | undefined;
    copEmsId?: string | undefined;
    seqNo?: number | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    entGNo?: number | undefined;
    changeSeqNo?: number | undefined;
    hscode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    qty?: number | undefined;
    unit?: string | undefined;
    tradePrice?: number | undefined;
    tradeTotal?: number | undefined;
    usdTotal?: number | undefined;
    curr?: string | undefined;
    qty1?: number | undefined;
    unit1?: string | undefined;
    qty2?: number | undefined;
    unit2?: string | undefined;
    country?: string | undefined;
    destinationCountry?: string | undefined;
    beginDate?: string | undefined;
    versionNo?: string | undefined;
    dutyMode?: string | undefined;
    netWt?: number | undefined;
    grossWt?: number | undefined;
    orderValue?: number | undefined;
    controlHg?: string | undefined;
    controlSj?: string | undefined;
    remark?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    useType?: string | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessFile implements IEntTgBusinessFile {
    id?: number | undefined;
    entryId?: string | undefined;
    headGuid?: number | undefined;
    fileType?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    fileNameupload?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.entryId = data["EntryId"];
            this.headGuid = data["HeadGuid"];
            this.fileType = data["FileType"];
            this.fileName = data["FileName"];
            this.filePath = data["FilePath"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.fileNameupload = data["FileNameupload"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessFile {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["EntryId"] = this.entryId;
        data["HeadGuid"] = this.headGuid;
        data["FileType"] = this.fileType;
        data["FileName"] = this.fileName;
        data["FilePath"] = this.filePath;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["FileNameupload"] = this.fileNameupload;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessFile {
    id?: number | undefined;
    entryId?: string | undefined;
    headGuid?: number | undefined;
    fileType?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    fileNameupload?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenBillList implements IReturnResultOfPageListOfEntGoldenBillList {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenBillList | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenBillList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenBillList.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenBillList {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenBillList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenBillList {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenBillList | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenBillList implements IPageListOfEntGoldenBillList {
    dataSource?: EntGoldenBillList[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenBillList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenBillList.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenBillList {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenBillList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenBillList {
    dataSource?: EntGoldenBillList[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBillMergeRule implements IEntGoldenBillMergeRule {
    id?: number | undefined;
    dbColumnName?: string | undefined;
    ctrlName?: string | undefined;
    ctrlText?: string | undefined;
    isCheck?: string | undefined;
    organizationCode?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    pageType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBillMergeRule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.dbColumnName = data["DbColumnName"];
            this.ctrlName = data["CtrlName"];
            this.ctrlText = data["CtrlText"];
            this.isCheck = data["IsCheck"];
            this.organizationCode = data["OrganizationCode"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.pageType = data["PageType"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBillMergeRule {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBillMergeRule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["DbColumnName"] = this.dbColumnName;
        data["CtrlName"] = this.ctrlName;
        data["CtrlText"] = this.ctrlText;
        data["IsCheck"] = this.isCheck;
        data["OrganizationCode"] = this.organizationCode;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["PageType"] = this.pageType;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBillMergeRule {
    id?: number | undefined;
    dbColumnName?: string | undefined;
    ctrlName?: string | undefined;
    ctrlText?: string | undefined;
    isCheck?: string | undefined;
    organizationCode?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    pageType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfListOfEntTgBusinessFile implements IReturnResultOfListOfEntTgBusinessFile {
    success?: boolean | undefined;
    data?: EntTgBusinessFile[] | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfListOfEntTgBusinessFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            if (Array.isArray(data["Data"])) {
                this.data = [] as any;
                for (let item of data["Data"])
                    this.data!.push(EntTgBusinessFile.fromJS(item));
            }
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfListOfEntTgBusinessFile {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfListOfEntTgBusinessFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        if (Array.isArray(this.data)) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfListOfEntTgBusinessFile {
    success?: boolean | undefined;
    data?: EntTgBusinessFile[] | undefined;
    messge?: string | undefined;
}

export class EntGoldenBusHead implements IEntGoldenBusHead {
    arriveDateBegin?: Date | undefined;
    arriveDateEnd?: Date | undefined;
    etdDataBegin?: Date | undefined;
    etdDataEnd?: Date | undefined;
    etaDataBegin?: Date | undefined;
    etaDataEnd?: Date | undefined;
    createDataBegin?: Date | undefined;
    createDataEnd?: Date | undefined;
    traceNo?: string | undefined;
    isHasHgCheck?: boolean | undefined;
    isHasEntryIdEmpty?: boolean | undefined;
    seqNo?: string | undefined;
    ieFlag?: string | undefined;
    sku?: string | undefined;
    ids?: string[] | undefined;
    preEntryId?: string | undefined;
    id?: number | undefined;
    busNo?: string | undefined;
    deptId?: string | undefined;
    billModel?: string | undefined;
    etaDate?: Date | undefined;
    etdDate?: Date | undefined;
    billType?: string | undefined;
    blNo?: string | undefined;
    mawbNo?: string | undefined;
    emsNo?: string | undefined;
    billNo?: string | undefined;
    soNo?: string | undefined;
    poNo?: string | undefined;
    status?: string | undefined;
    iEPort?: string | undefined;
    tradeMode?: string | undefined;
    shipCountry?: string | undefined;
    custom?: string | undefined;
    fobType?: string | undefined;
    arriveDate?: Date | undefined;
    invoiceNo?: string | undefined;
    entryAgent?: string | undefined;
    tradeCountry?: string | undefined;
    arrivePortDate?: Date | undefined;
    totalMoney?: number | undefined;
    forwarderNo?: string | undefined;
    entryIdE?: string | undefined;
    foreignPickDate?: Date | undefined;
    transMode?: string | undefined;
    invoiceDate?: Date | undefined;
    gMark?: string | undefined;
    isForcast?: string | undefined;
    isUrgent?: string | undefined;
    isCombination?: string | undefined;
    seriCount?: number | undefined;
    operatorDate?: Date | undefined;
    operatorUser?: string | undefined;
    deptContact?: string | undefined;
    supplierNo?: string | undefined;
    receiverNo?: string | undefined;
    agentRequire?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    usd07?: string | undefined;
    usd08?: string | undefined;
    usd09?: string | undefined;
    usd10?: string | undefined;
    organizationCode?: string | undefined;
    billNoAll?: string | undefined;
    billNoSplit?: string | undefined;
    documentCreatedate?: Date | undefined;
    netWeight?: number | undefined;
    dozen?: number | undefined;
    priority?: string | undefined;
    expectedDate?: Date | undefined;
    packagetype?: string | undefined;
    erpSku?: string | undefined;
    leaveportDate?: Date | undefined;
    transName?: string | undefined;
    customerCode?: string | undefined;
    customerName?: string | undefined;
    customerNm?: string | undefined;
    contractNo?: string | undefined;
    gName?: string | undefined;
    billDate?: Date | undefined;
    curr?: string | undefined;
    tgNo?: string | undefined;
    grossWeight?: number | undefined;
    volume?: number | undefined;
    marginNo?: string | undefined;
    marginMoney?: number | undefined;
    marginEndDate?: Date | undefined;
    loiNo?: string | undefined;
    loiEndDate?: Date | undefined;
    payTaxDate?: Date | undefined;
    changeDate?: Date | undefined;
    tariffSpecial?: number | undefined;
    addedTax?: number | undefined;
    onePsDate?: Date | undefined;
    finishTime?: Date | undefined;
    taxDate?: Date | undefined;
    sjDate?: Date | undefined;
    sjFinishDate?: Date | undefined;
    dadanDate?: Date | undefined;
    hgChkDate?: Date | undefined;
    tradeCode?: string | undefined;
    tradeName?: string | undefined;
    tradeSocialCreditCode?: string | undefined;
    receiveCode?: string | undefined;
    receiveName?: string | undefined;
    receiveSocialCreditCode?: string | undefined;
    boxContainerFirst?: string | undefined;
    boxContainerSecond?: string | undefined;
    transAssociate?: string | undefined;
    transNo?: string | undefined;
    transSupplier?: string | undefined;
    transCompany?: string | undefined;
    transDate?: Date | undefined;
    calcWeight?: number | undefined;
    goodsType?: string | undefined;
    boxNo?: string | undefined;
    goodsPickupMethod?: string | undefined;
    sendAddress?: string | undefined;
    sendContacts?: string | undefined;
    sendPhone?: string | undefined;
    receiveAddress?: string | undefined;
    receiveContacts?: string | undefined;
    receivePhone?: string | undefined;
    volumeWeight?: string | undefined;
    newWeight?: number | undefined;
    entryId?: string | undefined;
    threeReceiptNo?: string | undefined;
    customerNo?: string | undefined;
    billUser?: string | undefined;
    licensetypes?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBusHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.arriveDateBegin = data["ArriveDateBegin"] ? new Date(data["ArriveDateBegin"].toString()) : <any>undefined;
            this.arriveDateEnd = data["ArriveDateEnd"] ? new Date(data["ArriveDateEnd"].toString()) : <any>undefined;
            this.etdDataBegin = data["EtdDataBegin"] ? new Date(data["EtdDataBegin"].toString()) : <any>undefined;
            this.etdDataEnd = data["EtdDataEnd"] ? new Date(data["EtdDataEnd"].toString()) : <any>undefined;
            this.etaDataBegin = data["EtaDataBegin"] ? new Date(data["EtaDataBegin"].toString()) : <any>undefined;
            this.etaDataEnd = data["EtaDataEnd"] ? new Date(data["EtaDataEnd"].toString()) : <any>undefined;
            this.createDataBegin = data["CreateDataBegin"] ? new Date(data["CreateDataBegin"].toString()) : <any>undefined;
            this.createDataEnd = data["CreateDataEnd"] ? new Date(data["CreateDataEnd"].toString()) : <any>undefined;
            this.traceNo = data["TraceNo"];
            this.isHasHgCheck = data["IsHasHgCheck"];
            this.isHasEntryIdEmpty = data["IsHasEntryIdEmpty"];
            this.seqNo = data["SeqNo"];
            this.ieFlag = data["IeFlag"];
            this.sku = data["Sku"];
            if (Array.isArray(data["Ids"])) {
                this.ids = [] as any;
                for (let item of data["Ids"])
                    this.ids!.push(item);
            }
            this.preEntryId = data["PreEntryId"];
            this.id = data["Id"];
            this.busNo = data["BusNo"];
            this.deptId = data["DeptId"];
            this.billModel = data["BillModel"];
            this.etaDate = data["EtaDate"] ? new Date(data["EtaDate"].toString()) : <any>undefined;
            this.etdDate = data["EtdDate"] ? new Date(data["EtdDate"].toString()) : <any>undefined;
            this.billType = data["BillType"];
            this.blNo = data["BlNo"];
            this.mawbNo = data["MawbNo"];
            this.emsNo = data["EmsNo"];
            this.billNo = data["BillNo"];
            this.soNo = data["SoNo"];
            this.poNo = data["PoNo"];
            this.status = data["Status"];
            this.iEPort = data["IEPort"];
            this.tradeMode = data["TradeMode"];
            this.shipCountry = data["ShipCountry"];
            this.custom = data["Custom"];
            this.fobType = data["FobType"];
            this.arriveDate = data["ArriveDate"] ? new Date(data["ArriveDate"].toString()) : <any>undefined;
            this.invoiceNo = data["InvoiceNo"];
            this.entryAgent = data["EntryAgent"];
            this.tradeCountry = data["TradeCountry"];
            this.arrivePortDate = data["ArrivePortDate"] ? new Date(data["ArrivePortDate"].toString()) : <any>undefined;
            this.totalMoney = data["TotalMoney"];
            this.forwarderNo = data["ForwarderNo"];
            this.entryIdE = data["EntryIdE"];
            this.foreignPickDate = data["ForeignPickDate"] ? new Date(data["ForeignPickDate"].toString()) : <any>undefined;
            this.transMode = data["TransMode"];
            this.invoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.gMark = data["GMark"];
            this.isForcast = data["IsForcast"];
            this.isUrgent = data["IsUrgent"];
            this.isCombination = data["IsCombination"];
            this.seriCount = data["SeriCount"];
            this.operatorDate = data["OperatorDate"] ? new Date(data["OperatorDate"].toString()) : <any>undefined;
            this.operatorUser = data["OperatorUser"];
            this.deptContact = data["DeptContact"];
            this.supplierNo = data["SupplierNo"];
            this.receiverNo = data["ReceiverNo"];
            this.agentRequire = data["AgentRequire"];
            this.remark = data["Remark"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.usd01 = data["Usd01"];
            this.usd02 = data["Usd02"];
            this.usd03 = data["Usd03"];
            this.usd04 = data["Usd04"];
            this.usd05 = data["Usd05"];
            this.usd06 = data["Usd06"];
            this.usd07 = data["Usd07"];
            this.usd08 = data["Usd08"];
            this.usd09 = data["Usd09"];
            this.usd10 = data["Usd10"];
            this.organizationCode = data["OrganizationCode"];
            this.billNoAll = data["BillNoAll"];
            this.billNoSplit = data["BillNoSplit"];
            this.documentCreatedate = data["DocumentCreatedate"] ? new Date(data["DocumentCreatedate"].toString()) : <any>undefined;
            this.netWeight = data["NetWeight"];
            this.dozen = data["Dozen"];
            this.priority = data["Priority"];
            this.expectedDate = data["ExpectedDate"] ? new Date(data["ExpectedDate"].toString()) : <any>undefined;
            this.packagetype = data["Packagetype"];
            this.erpSku = data["ErpSku"];
            this.leaveportDate = data["LeaveportDate"] ? new Date(data["LeaveportDate"].toString()) : <any>undefined;
            this.transName = data["TransName"];
            this.customerCode = data["CustomerCode"];
            this.customerName = data["CustomerName"];
            this.customerNm = data["CustomerNm"];
            this.contractNo = data["ContractNo"];
            this.gName = data["GName"];
            this.billDate = data["BillDate"] ? new Date(data["BillDate"].toString()) : <any>undefined;
            this.curr = data["Curr"];
            this.tgNo = data["TgNo"];
            this.grossWeight = data["GrossWeight"];
            this.volume = data["Volume"];
            this.marginNo = data["MarginNo"];
            this.marginMoney = data["MarginMoney"];
            this.marginEndDate = data["MarginEndDate"] ? new Date(data["MarginEndDate"].toString()) : <any>undefined;
            this.loiNo = data["LoiNo"];
            this.loiEndDate = data["LoiEndDate"] ? new Date(data["LoiEndDate"].toString()) : <any>undefined;
            this.payTaxDate = data["PayTaxDate"] ? new Date(data["PayTaxDate"].toString()) : <any>undefined;
            this.changeDate = data["ChangeDate"] ? new Date(data["ChangeDate"].toString()) : <any>undefined;
            this.tariffSpecial = data["TariffSpecial"];
            this.addedTax = data["AddedTax"];
            this.onePsDate = data["OnePsDate"] ? new Date(data["OnePsDate"].toString()) : <any>undefined;
            this.finishTime = data["FinishTime"] ? new Date(data["FinishTime"].toString()) : <any>undefined;
            this.taxDate = data["TaxDate"] ? new Date(data["TaxDate"].toString()) : <any>undefined;
            this.sjDate = data["SjDate"] ? new Date(data["SjDate"].toString()) : <any>undefined;
            this.sjFinishDate = data["SjFinishDate"] ? new Date(data["SjFinishDate"].toString()) : <any>undefined;
            this.dadanDate = data["DadanDate"] ? new Date(data["DadanDate"].toString()) : <any>undefined;
            this.hgChkDate = data["HgChkDate"] ? new Date(data["HgChkDate"].toString()) : <any>undefined;
            this.tradeCode = data["TradeCode"];
            this.tradeName = data["TradeName"];
            this.tradeSocialCreditCode = data["TradeSocialCreditCode"];
            this.receiveCode = data["ReceiveCode"];
            this.receiveName = data["ReceiveName"];
            this.receiveSocialCreditCode = data["ReceiveSocialCreditCode"];
            this.boxContainerFirst = data["BoxContainerFirst"];
            this.boxContainerSecond = data["BoxContainerSecond"];
            this.transAssociate = data["TransAssociate"];
            this.transNo = data["TransNo"];
            this.transSupplier = data["TransSupplier"];
            this.transCompany = data["TransCompany"];
            this.transDate = data["TransDate"] ? new Date(data["TransDate"].toString()) : <any>undefined;
            this.calcWeight = data["CalcWeight"];
            this.goodsType = data["GoodsType"];
            this.boxNo = data["BoxNo"];
            this.goodsPickupMethod = data["GoodsPickupMethod"];
            this.sendAddress = data["SendAddress"];
            this.sendContacts = data["SendContacts"];
            this.sendPhone = data["SendPhone"];
            this.receiveAddress = data["ReceiveAddress"];
            this.receiveContacts = data["ReceiveContacts"];
            this.receivePhone = data["ReceivePhone"];
            this.volumeWeight = data["VolumeWeight"];
            this.newWeight = data["NewWeight"];
            this.entryId = data["EntryId"];
            this.threeReceiptNo = data["ThreeReceiptNo"];
            this.customerNo = data["CustomerNo"];
            this.billUser = data["BillUser"];
            this.licensetypes = data["Licensetypes"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBusHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBusHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ArriveDateBegin"] = this.arriveDateBegin ? this.arriveDateBegin.toISOString() : <any>undefined;
        data["ArriveDateEnd"] = this.arriveDateEnd ? this.arriveDateEnd.toISOString() : <any>undefined;
        data["EtdDataBegin"] = this.etdDataBegin ? this.etdDataBegin.toISOString() : <any>undefined;
        data["EtdDataEnd"] = this.etdDataEnd ? this.etdDataEnd.toISOString() : <any>undefined;
        data["EtaDataBegin"] = this.etaDataBegin ? this.etaDataBegin.toISOString() : <any>undefined;
        data["EtaDataEnd"] = this.etaDataEnd ? this.etaDataEnd.toISOString() : <any>undefined;
        data["CreateDataBegin"] = this.createDataBegin ? this.createDataBegin.toISOString() : <any>undefined;
        data["CreateDataEnd"] = this.createDataEnd ? this.createDataEnd.toISOString() : <any>undefined;
        data["TraceNo"] = this.traceNo;
        data["IsHasHgCheck"] = this.isHasHgCheck;
        data["IsHasEntryIdEmpty"] = this.isHasEntryIdEmpty;
        data["SeqNo"] = this.seqNo;
        data["IeFlag"] = this.ieFlag;
        data["Sku"] = this.sku;
        if (Array.isArray(this.ids)) {
            data["Ids"] = [];
            for (let item of this.ids)
                data["Ids"].push(item);
        }
        data["PreEntryId"] = this.preEntryId;
        data["Id"] = this.id;
        data["BusNo"] = this.busNo;
        data["DeptId"] = this.deptId;
        data["BillModel"] = this.billModel;
        data["EtaDate"] = this.etaDate ? this.etaDate.toISOString() : <any>undefined;
        data["EtdDate"] = this.etdDate ? this.etdDate.toISOString() : <any>undefined;
        data["BillType"] = this.billType;
        data["BlNo"] = this.blNo;
        data["MawbNo"] = this.mawbNo;
        data["EmsNo"] = this.emsNo;
        data["BillNo"] = this.billNo;
        data["SoNo"] = this.soNo;
        data["PoNo"] = this.poNo;
        data["Status"] = this.status;
        data["IEPort"] = this.iEPort;
        data["TradeMode"] = this.tradeMode;
        data["ShipCountry"] = this.shipCountry;
        data["Custom"] = this.custom;
        data["FobType"] = this.fobType;
        data["ArriveDate"] = this.arriveDate ? this.arriveDate.toISOString() : <any>undefined;
        data["InvoiceNo"] = this.invoiceNo;
        data["EntryAgent"] = this.entryAgent;
        data["TradeCountry"] = this.tradeCountry;
        data["ArrivePortDate"] = this.arrivePortDate ? this.arrivePortDate.toISOString() : <any>undefined;
        data["TotalMoney"] = this.totalMoney;
        data["ForwarderNo"] = this.forwarderNo;
        data["EntryIdE"] = this.entryIdE;
        data["ForeignPickDate"] = this.foreignPickDate ? this.foreignPickDate.toISOString() : <any>undefined;
        data["TransMode"] = this.transMode;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["GMark"] = this.gMark;
        data["IsForcast"] = this.isForcast;
        data["IsUrgent"] = this.isUrgent;
        data["IsCombination"] = this.isCombination;
        data["SeriCount"] = this.seriCount;
        data["OperatorDate"] = this.operatorDate ? this.operatorDate.toISOString() : <any>undefined;
        data["OperatorUser"] = this.operatorUser;
        data["DeptContact"] = this.deptContact;
        data["SupplierNo"] = this.supplierNo;
        data["ReceiverNo"] = this.receiverNo;
        data["AgentRequire"] = this.agentRequire;
        data["Remark"] = this.remark;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["Usd01"] = this.usd01;
        data["Usd02"] = this.usd02;
        data["Usd03"] = this.usd03;
        data["Usd04"] = this.usd04;
        data["Usd05"] = this.usd05;
        data["Usd06"] = this.usd06;
        data["Usd07"] = this.usd07;
        data["Usd08"] = this.usd08;
        data["Usd09"] = this.usd09;
        data["Usd10"] = this.usd10;
        data["OrganizationCode"] = this.organizationCode;
        data["BillNoAll"] = this.billNoAll;
        data["BillNoSplit"] = this.billNoSplit;
        data["DocumentCreatedate"] = this.documentCreatedate ? this.documentCreatedate.toISOString() : <any>undefined;
        data["NetWeight"] = this.netWeight;
        data["Dozen"] = this.dozen;
        data["Priority"] = this.priority;
        data["ExpectedDate"] = this.expectedDate ? this.expectedDate.toISOString() : <any>undefined;
        data["Packagetype"] = this.packagetype;
        data["ErpSku"] = this.erpSku;
        data["LeaveportDate"] = this.leaveportDate ? this.leaveportDate.toISOString() : <any>undefined;
        data["TransName"] = this.transName;
        data["CustomerCode"] = this.customerCode;
        data["CustomerName"] = this.customerName;
        data["CustomerNm"] = this.customerNm;
        data["ContractNo"] = this.contractNo;
        data["GName"] = this.gName;
        data["BillDate"] = this.billDate ? this.billDate.toISOString() : <any>undefined;
        data["Curr"] = this.curr;
        data["TgNo"] = this.tgNo;
        data["GrossWeight"] = this.grossWeight;
        data["Volume"] = this.volume;
        data["MarginNo"] = this.marginNo;
        data["MarginMoney"] = this.marginMoney;
        data["MarginEndDate"] = this.marginEndDate ? this.marginEndDate.toISOString() : <any>undefined;
        data["LoiNo"] = this.loiNo;
        data["LoiEndDate"] = this.loiEndDate ? this.loiEndDate.toISOString() : <any>undefined;
        data["PayTaxDate"] = this.payTaxDate ? this.payTaxDate.toISOString() : <any>undefined;
        data["ChangeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["TariffSpecial"] = this.tariffSpecial;
        data["AddedTax"] = this.addedTax;
        data["OnePsDate"] = this.onePsDate ? this.onePsDate.toISOString() : <any>undefined;
        data["FinishTime"] = this.finishTime ? this.finishTime.toISOString() : <any>undefined;
        data["TaxDate"] = this.taxDate ? this.taxDate.toISOString() : <any>undefined;
        data["SjDate"] = this.sjDate ? this.sjDate.toISOString() : <any>undefined;
        data["SjFinishDate"] = this.sjFinishDate ? this.sjFinishDate.toISOString() : <any>undefined;
        data["DadanDate"] = this.dadanDate ? this.dadanDate.toISOString() : <any>undefined;
        data["HgChkDate"] = this.hgChkDate ? this.hgChkDate.toISOString() : <any>undefined;
        data["TradeCode"] = this.tradeCode;
        data["TradeName"] = this.tradeName;
        data["TradeSocialCreditCode"] = this.tradeSocialCreditCode;
        data["ReceiveCode"] = this.receiveCode;
        data["ReceiveName"] = this.receiveName;
        data["ReceiveSocialCreditCode"] = this.receiveSocialCreditCode;
        data["BoxContainerFirst"] = this.boxContainerFirst;
        data["BoxContainerSecond"] = this.boxContainerSecond;
        data["TransAssociate"] = this.transAssociate;
        data["TransNo"] = this.transNo;
        data["TransSupplier"] = this.transSupplier;
        data["TransCompany"] = this.transCompany;
        data["TransDate"] = this.transDate ? this.transDate.toISOString() : <any>undefined;
        data["CalcWeight"] = this.calcWeight;
        data["GoodsType"] = this.goodsType;
        data["BoxNo"] = this.boxNo;
        data["GoodsPickupMethod"] = this.goodsPickupMethod;
        data["SendAddress"] = this.sendAddress;
        data["SendContacts"] = this.sendContacts;
        data["SendPhone"] = this.sendPhone;
        data["ReceiveAddress"] = this.receiveAddress;
        data["ReceiveContacts"] = this.receiveContacts;
        data["ReceivePhone"] = this.receivePhone;
        data["VolumeWeight"] = this.volumeWeight;
        data["NewWeight"] = this.newWeight;
        data["EntryId"] = this.entryId;
        data["ThreeReceiptNo"] = this.threeReceiptNo;
        data["CustomerNo"] = this.customerNo;
        data["BillUser"] = this.billUser;
        data["Licensetypes"] = this.licensetypes;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBusHead {
    arriveDateBegin?: Date | undefined;
    arriveDateEnd?: Date | undefined;
    etdDataBegin?: Date | undefined;
    etdDataEnd?: Date | undefined;
    etaDataBegin?: Date | undefined;
    etaDataEnd?: Date | undefined;
    createDataBegin?: Date | undefined;
    createDataEnd?: Date | undefined;
    traceNo?: string | undefined;
    isHasHgCheck?: boolean | undefined;
    isHasEntryIdEmpty?: boolean | undefined;
    seqNo?: string | undefined;
    ieFlag?: string | undefined;
    sku?: string | undefined;
    ids?: string[] | undefined;
    preEntryId?: string | undefined;
    id?: number | undefined;
    busNo?: string | undefined;
    deptId?: string | undefined;
    billModel?: string | undefined;
    etaDate?: Date | undefined;
    etdDate?: Date | undefined;
    billType?: string | undefined;
    blNo?: string | undefined;
    mawbNo?: string | undefined;
    emsNo?: string | undefined;
    billNo?: string | undefined;
    soNo?: string | undefined;
    poNo?: string | undefined;
    status?: string | undefined;
    iEPort?: string | undefined;
    tradeMode?: string | undefined;
    shipCountry?: string | undefined;
    custom?: string | undefined;
    fobType?: string | undefined;
    arriveDate?: Date | undefined;
    invoiceNo?: string | undefined;
    entryAgent?: string | undefined;
    tradeCountry?: string | undefined;
    arrivePortDate?: Date | undefined;
    totalMoney?: number | undefined;
    forwarderNo?: string | undefined;
    entryIdE?: string | undefined;
    foreignPickDate?: Date | undefined;
    transMode?: string | undefined;
    invoiceDate?: Date | undefined;
    gMark?: string | undefined;
    isForcast?: string | undefined;
    isUrgent?: string | undefined;
    isCombination?: string | undefined;
    seriCount?: number | undefined;
    operatorDate?: Date | undefined;
    operatorUser?: string | undefined;
    deptContact?: string | undefined;
    supplierNo?: string | undefined;
    receiverNo?: string | undefined;
    agentRequire?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    usd07?: string | undefined;
    usd08?: string | undefined;
    usd09?: string | undefined;
    usd10?: string | undefined;
    organizationCode?: string | undefined;
    billNoAll?: string | undefined;
    billNoSplit?: string | undefined;
    documentCreatedate?: Date | undefined;
    netWeight?: number | undefined;
    dozen?: number | undefined;
    priority?: string | undefined;
    expectedDate?: Date | undefined;
    packagetype?: string | undefined;
    erpSku?: string | undefined;
    leaveportDate?: Date | undefined;
    transName?: string | undefined;
    customerCode?: string | undefined;
    customerName?: string | undefined;
    customerNm?: string | undefined;
    contractNo?: string | undefined;
    gName?: string | undefined;
    billDate?: Date | undefined;
    curr?: string | undefined;
    tgNo?: string | undefined;
    grossWeight?: number | undefined;
    volume?: number | undefined;
    marginNo?: string | undefined;
    marginMoney?: number | undefined;
    marginEndDate?: Date | undefined;
    loiNo?: string | undefined;
    loiEndDate?: Date | undefined;
    payTaxDate?: Date | undefined;
    changeDate?: Date | undefined;
    tariffSpecial?: number | undefined;
    addedTax?: number | undefined;
    onePsDate?: Date | undefined;
    finishTime?: Date | undefined;
    taxDate?: Date | undefined;
    sjDate?: Date | undefined;
    sjFinishDate?: Date | undefined;
    dadanDate?: Date | undefined;
    hgChkDate?: Date | undefined;
    tradeCode?: string | undefined;
    tradeName?: string | undefined;
    tradeSocialCreditCode?: string | undefined;
    receiveCode?: string | undefined;
    receiveName?: string | undefined;
    receiveSocialCreditCode?: string | undefined;
    boxContainerFirst?: string | undefined;
    boxContainerSecond?: string | undefined;
    transAssociate?: string | undefined;
    transNo?: string | undefined;
    transSupplier?: string | undefined;
    transCompany?: string | undefined;
    transDate?: Date | undefined;
    calcWeight?: number | undefined;
    goodsType?: string | undefined;
    boxNo?: string | undefined;
    goodsPickupMethod?: string | undefined;
    sendAddress?: string | undefined;
    sendContacts?: string | undefined;
    sendPhone?: string | undefined;
    receiveAddress?: string | undefined;
    receiveContacts?: string | undefined;
    receivePhone?: string | undefined;
    volumeWeight?: string | undefined;
    newWeight?: number | undefined;
    entryId?: string | undefined;
    threeReceiptNo?: string | undefined;
    customerNo?: string | undefined;
    billUser?: string | undefined;
    licensetypes?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageDataTable implements IReturnResultOfPageDataTable {
    success?: boolean | undefined;
    data?: PageDataTable | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageDataTable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageDataTable.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageDataTable {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageDataTable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageDataTable {
    success?: boolean | undefined;
    data?: PageDataTable | undefined;
    messge?: string | undefined;
}

export class PageDataTable implements IPageDataTable {
    dataSource?: any | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageDataTable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dataSource = data["DataSource"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageDataTable {
        data = typeof data === 'object' ? data : {};
        let result = new PageDataTable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DataSource"] = this.dataSource;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageDataTable {
    dataSource?: any | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfEntGoldenBillHead implements IReturnResultOfEntGoldenBillHead {
    success?: boolean | undefined;
    data?: EntGoldenBillHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntGoldenBillHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntGoldenBillHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntGoldenBillHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntGoldenBillHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntGoldenBillHead {
    success?: boolean | undefined;
    data?: EntGoldenBillHead | undefined;
    messge?: string | undefined;
}

export class BillStatusFollowingCondition implements IBillStatusFollowingCondition {
    department?: string | undefined;
    entry_id?: string | undefined;
    bill_type?: string | undefined;
    customer_no?: string | undefined;
    bus_no?: string | undefined;
    mawb_no?: string | undefined;
    entrust_name?: string | undefined;
    tRADE_NAME?: string | undefined;
    operatorname?: string | undefined;
    bill_model?: string | undefined;
    custom?: string | undefined;
    billStatus?: string | undefined;
    acceptFlag?: string | undefined;
    dateName?: string | undefined;
    dDStart?: Date | undefined;
    dDEnd?: Date | undefined;
    fXStatu?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IBillStatusFollowingCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.department = data["Department"];
            this.entry_id = data["entry_id"];
            this.bill_type = data["bill_type"];
            this.customer_no = data["customer_no"];
            this.bus_no = data["bus_no"];
            this.mawb_no = data["mawb_no"];
            this.entrust_name = data["entrust_name"];
            this.tRADE_NAME = data["TRADE_NAME"];
            this.operatorname = data["operatorname"];
            this.bill_model = data["bill_model"];
            this.custom = data["custom"];
            this.billStatus = data["BillStatus"];
            this.acceptFlag = data["AcceptFlag"];
            this.dateName = data["DateName"];
            this.dDStart = data["DDStart"] ? new Date(data["DDStart"].toString()) : <any>undefined;
            this.dDEnd = data["DDEnd"] ? new Date(data["DDEnd"].toString()) : <any>undefined;
            this.fXStatu = data["FXStatu"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): BillStatusFollowingCondition {
        data = typeof data === 'object' ? data : {};
        let result = new BillStatusFollowingCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Department"] = this.department;
        data["entry_id"] = this.entry_id;
        data["bill_type"] = this.bill_type;
        data["customer_no"] = this.customer_no;
        data["bus_no"] = this.bus_no;
        data["mawb_no"] = this.mawb_no;
        data["entrust_name"] = this.entrust_name;
        data["TRADE_NAME"] = this.tRADE_NAME;
        data["operatorname"] = this.operatorname;
        data["bill_model"] = this.bill_model;
        data["custom"] = this.custom;
        data["BillStatus"] = this.billStatus;
        data["AcceptFlag"] = this.acceptFlag;
        data["DateName"] = this.dateName;
        data["DDStart"] = this.dDStart ? this.dDStart.toISOString() : <any>undefined;
        data["DDEnd"] = this.dDEnd ? this.dDEnd.toISOString() : <any>undefined;
        data["FXStatu"] = this.fXStatu;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IBillStatusFollowingCondition {
    department?: string | undefined;
    entry_id?: string | undefined;
    bill_type?: string | undefined;
    customer_no?: string | undefined;
    bus_no?: string | undefined;
    mawb_no?: string | undefined;
    entrust_name?: string | undefined;
    tRADE_NAME?: string | undefined;
    operatorname?: string | undefined;
    bill_model?: string | undefined;
    custom?: string | undefined;
    billStatus?: string | undefined;
    acceptFlag?: string | undefined;
    dateName?: string | undefined;
    dDStart?: Date | undefined;
    dDEnd?: Date | undefined;
    fXStatu?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenAuditLog implements IEntGoldenAuditLog {
    id?: number | undefined;
    businessId?: string | undefined;
    businessType?: string | undefined;
    approveResult?: string | undefined;
    approveRejectReason?: string | undefined;
    approveRejectDescription?: string | undefined;
    approveUser?: string | undefined;
    approveDate?: Date | undefined;
    reviewer?: string | undefined;
    reviewDate?: Date | undefined;
    reviewDescription?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenAuditLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.businessId = data["BusinessId"];
            this.businessType = data["BusinessType"];
            this.approveResult = data["ApproveResult"];
            this.approveRejectReason = data["ApproveRejectReason"];
            this.approveRejectDescription = data["ApproveRejectDescription"];
            this.approveUser = data["ApproveUser"];
            this.approveDate = data["ApproveDate"] ? new Date(data["ApproveDate"].toString()) : <any>undefined;
            this.reviewer = data["Reviewer"];
            this.reviewDate = data["ReviewDate"] ? new Date(data["ReviewDate"].toString()) : <any>undefined;
            this.reviewDescription = data["ReviewDescription"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenAuditLog {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenAuditLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["BusinessId"] = this.businessId;
        data["BusinessType"] = this.businessType;
        data["ApproveResult"] = this.approveResult;
        data["ApproveRejectReason"] = this.approveRejectReason;
        data["ApproveRejectDescription"] = this.approveRejectDescription;
        data["ApproveUser"] = this.approveUser;
        data["ApproveDate"] = this.approveDate ? this.approveDate.toISOString() : <any>undefined;
        data["Reviewer"] = this.reviewer;
        data["ReviewDate"] = this.reviewDate ? this.reviewDate.toISOString() : <any>undefined;
        data["ReviewDescription"] = this.reviewDescription;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenAuditLog {
    id?: number | undefined;
    businessId?: string | undefined;
    businessType?: string | undefined;
    approveResult?: string | undefined;
    approveRejectReason?: string | undefined;
    approveRejectDescription?: string | undefined;
    approveUser?: string | undefined;
    approveDate?: Date | undefined;
    reviewer?: string | undefined;
    reviewDate?: Date | undefined;
    reviewDescription?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasBom implements IEntBasBom {
    emsNo?: string | undefined;
    customerCode?: string | undefined;
    exgNo?: string | undefined;
    exgGNo?: number | undefined;
    imgNo?: string | undefined;
    imgGNo?: number | undefined;
    beginDate?: string | undefined;
    netUseupQty?: number | undefined;
    modfyMark?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    agentStatus?: number | undefined;
    inputFlag?: string | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    id?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    productId?: string | undefined;
    batchNo?: string | undefined;
    erpNo?: string | undefined;
    deptCode?: string | undefined;
    endDate?: string | undefined;
    decCm?: number | undefined;
    input_DateBegin?: Date | undefined;
    input_DateEnd?: Date | undefined;
    remark?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emsNo = data["EmsNo"];
            this.customerCode = data["CustomerCode"];
            this.exgNo = data["ExgNo"];
            this.exgGNo = data["ExgGNo"];
            this.imgNo = data["ImgNo"];
            this.imgGNo = data["ImgGNo"];
            this.beginDate = data["BeginDate"];
            this.netUseupQty = data["NetUseupQty"];
            this.modfyMark = data["ModfyMark"];
            this.bondMtpckPrpr = data["BondMtpckPrpr"];
            this.agentStatus = data["AgentStatus"];
            this.inputFlag = data["InputFlag"];
            this.tgblLossRate = data["TgblLossRate"];
            this.intgbLossRate = data["IntgbLossRate"];
            this.id = data["Id"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.productId = data["ProductId"];
            this.batchNo = data["BatchNo"];
            this.erpNo = data["ErpNo"];
            this.deptCode = data["DeptCode"];
            this.endDate = data["EndDate"];
            this.decCm = data["DecCm"];
            this.input_DateBegin = data["Input_DateBegin"] ? new Date(data["Input_DateBegin"].toString()) : <any>undefined;
            this.input_DateEnd = data["Input_DateEnd"] ? new Date(data["Input_DateEnd"].toString()) : <any>undefined;
            this.remark = data["Remark"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasBom {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmsNo"] = this.emsNo;
        data["CustomerCode"] = this.customerCode;
        data["ExgNo"] = this.exgNo;
        data["ExgGNo"] = this.exgGNo;
        data["ImgNo"] = this.imgNo;
        data["ImgGNo"] = this.imgGNo;
        data["BeginDate"] = this.beginDate;
        data["NetUseupQty"] = this.netUseupQty;
        data["ModfyMark"] = this.modfyMark;
        data["BondMtpckPrpr"] = this.bondMtpckPrpr;
        data["AgentStatus"] = this.agentStatus;
        data["InputFlag"] = this.inputFlag;
        data["TgblLossRate"] = this.tgblLossRate;
        data["IntgbLossRate"] = this.intgbLossRate;
        data["Id"] = this.id;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["ProductId"] = this.productId;
        data["BatchNo"] = this.batchNo;
        data["ErpNo"] = this.erpNo;
        data["DeptCode"] = this.deptCode;
        data["EndDate"] = this.endDate;
        data["DecCm"] = this.decCm;
        data["Input_DateBegin"] = this.input_DateBegin ? this.input_DateBegin.toISOString() : <any>undefined;
        data["Input_DateEnd"] = this.input_DateEnd ? this.input_DateEnd.toISOString() : <any>undefined;
        data["Remark"] = this.remark;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasBom {
    emsNo?: string | undefined;
    customerCode?: string | undefined;
    exgNo?: string | undefined;
    exgGNo?: number | undefined;
    imgNo?: string | undefined;
    imgGNo?: number | undefined;
    beginDate?: string | undefined;
    netUseupQty?: number | undefined;
    modfyMark?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    agentStatus?: number | undefined;
    inputFlag?: string | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    id?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    productId?: string | undefined;
    batchNo?: string | undefined;
    erpNo?: string | undefined;
    deptCode?: string | undefined;
    endDate?: string | undefined;
    decCm?: number | undefined;
    input_DateBegin?: Date | undefined;
    input_DateEnd?: Date | undefined;
    remark?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasBomdetial implements IEntBasBomdetial {
    data?: any | undefined;
    userName?: string | undefined;
    emsNo?: string | undefined;
    customerCode?: string | undefined;

    constructor(data?: IEntBasBomdetial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["data"];
            this.userName = data["UserName"];
            this.emsNo = data["EmsNo"];
            this.customerCode = data["CustomerCode"];
        }
    }

    static fromJS(data: any): EntBasBomdetial {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasBomdetial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["UserName"] = this.userName;
        data["EmsNo"] = this.emsNo;
        data["CustomerCode"] = this.customerCode;
        return data; 
    }
}

export interface IEntBasBomdetial {
    data?: any | undefined;
    userName?: string | undefined;
    emsNo?: string | undefined;
    customerCode?: string | undefined;
}

export class EntGoldenBusList implements IEntGoldenBusList {
    entryId?: string | undefined;
    traceNo?: string | undefined;
    unBeiAn?: boolean | undefined;
    id?: number | undefined;
    headId?: number | undefined;
    busNo?: string | undefined;
    seqNo?: number | undefined;
    projectNo?: string | undefined;
    poNo?: string | undefined;
    soNo?: string | undefined;
    invoiceNo?: string | undefined;
    invoiceDate?: Date | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    hscode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    gNameEn?: string | undefined;
    qtyPkg?: number | undefined;
    unitPkg?: string | undefined;
    erpUnit?: string | undefined;
    qtyAgent?: number | undefined;
    unitAgent?: string | undefined;
    unit1?: string | undefined;
    qty1?: number | undefined;
    unit2?: string | undefined;
    qty2?: number | undefined;
    price?: number | undefined;
    total?: number | undefined;
    curr?: string | undefined;
    netWt?: number | undefined;
    exgVersion?: string | undefined;
    country?: string | undefined;
    destinationCountry?: string | undefined;
    controlHg?: string | undefined;
    controlSj?: string | undefined;
    taxRate?: number | undefined;
    consumRate?: number | undefined;
    addRate?: number | undefined;
    no3C?: string | undefined;
    flag3C?: string | undefined;
    nxNo?: string | undefined;
    nxFlag?: string | undefined;
    mecNo?: string | undefined;
    dutyMode?: string | undefined;
    tradeMode?: string | undefined;
    sapInvoiceListId?: number | undefined;
    billSplitNo?: string | undefined;
    remark?: string | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    erpSku?: string | undefined;
    controlNo?: string | undefined;
    grossWt?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entryId = data["EntryId"];
            this.traceNo = data["TraceNo"];
            this.unBeiAn = data["UnBeiAn"];
            this.id = data["Id"];
            this.headId = data["HeadId"];
            this.busNo = data["BusNo"];
            this.seqNo = data["SeqNo"];
            this.projectNo = data["ProjectNo"];
            this.poNo = data["PoNo"];
            this.soNo = data["SoNo"];
            this.invoiceNo = data["InvoiceNo"];
            this.invoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.hscode = data["Hscode"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.gNameEn = data["GNameEn"];
            this.qtyPkg = data["QtyPkg"];
            this.unitPkg = data["UnitPkg"];
            this.erpUnit = data["ErpUnit"];
            this.qtyAgent = data["QtyAgent"];
            this.unitAgent = data["UnitAgent"];
            this.unit1 = data["Unit1"];
            this.qty1 = data["Qty1"];
            this.unit2 = data["Unit2"];
            this.qty2 = data["Qty2"];
            this.price = data["Price"];
            this.total = data["Total"];
            this.curr = data["Curr"];
            this.netWt = data["NetWt"];
            this.exgVersion = data["ExgVersion"];
            this.country = data["Country"];
            this.destinationCountry = data["DestinationCountry"];
            this.controlHg = data["ControlHg"];
            this.controlSj = data["ControlSj"];
            this.taxRate = data["TaxRate"];
            this.consumRate = data["ConsumRate"];
            this.addRate = data["AddRate"];
            this.no3C = data["No3C"];
            this.flag3C = data["Flag3C"];
            this.nxNo = data["NxNo"];
            this.nxFlag = data["NxFlag"];
            this.mecNo = data["MecNo"];
            this.dutyMode = data["DutyMode"];
            this.tradeMode = data["TradeMode"];
            this.sapInvoiceListId = data["SapInvoiceListId"];
            this.billSplitNo = data["BillSplitNo"];
            this.remark = data["Remark"];
            this.usd01 = data["Usd01"];
            this.usd02 = data["Usd02"];
            this.usd03 = data["Usd03"];
            this.usd04 = data["Usd04"];
            this.usd05 = data["Usd05"];
            this.usd06 = data["Usd06"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.lotAtt01 = data["LotAtt01"];
            this.lotAtt02 = data["LotAtt02"];
            this.lotAtt03 = data["LotAtt03"];
            this.lotAtt04 = data["LotAtt04"];
            this.lotAtt05 = data["LotAtt05"];
            this.lotAtt06 = data["LotAtt06"];
            this.lotAtt07 = data["LotAtt07"];
            this.lotAtt08 = data["LotAtt08"];
            this.lotAtt09 = data["LotAtt09"];
            this.lotAtt10 = data["LotAtt10"];
            this.lotAtt11 = data["LotAtt11"];
            this.lotAtt12 = data["LotAtt12"];
            this.lotAtt13 = data["LotAtt13"];
            this.lotAtt14 = data["LotAtt14"];
            this.lotAtt15 = data["LotAtt15"];
            this.lotAtt16 = data["LotAtt16"];
            this.lotAtt17 = data["LotAtt17"];
            this.lotAtt18 = data["LotAtt18"];
            this.erpSku = data["ErpSku"];
            this.controlNo = data["ControlNo"];
            this.grossWt = data["GrossWt"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBusList {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EntryId"] = this.entryId;
        data["TraceNo"] = this.traceNo;
        data["UnBeiAn"] = this.unBeiAn;
        data["Id"] = this.id;
        data["HeadId"] = this.headId;
        data["BusNo"] = this.busNo;
        data["SeqNo"] = this.seqNo;
        data["ProjectNo"] = this.projectNo;
        data["PoNo"] = this.poNo;
        data["SoNo"] = this.soNo;
        data["InvoiceNo"] = this.invoiceNo;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["Hscode"] = this.hscode;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["GNameEn"] = this.gNameEn;
        data["QtyPkg"] = this.qtyPkg;
        data["UnitPkg"] = this.unitPkg;
        data["ErpUnit"] = this.erpUnit;
        data["QtyAgent"] = this.qtyAgent;
        data["UnitAgent"] = this.unitAgent;
        data["Unit1"] = this.unit1;
        data["Qty1"] = this.qty1;
        data["Unit2"] = this.unit2;
        data["Qty2"] = this.qty2;
        data["Price"] = this.price;
        data["Total"] = this.total;
        data["Curr"] = this.curr;
        data["NetWt"] = this.netWt;
        data["ExgVersion"] = this.exgVersion;
        data["Country"] = this.country;
        data["DestinationCountry"] = this.destinationCountry;
        data["ControlHg"] = this.controlHg;
        data["ControlSj"] = this.controlSj;
        data["TaxRate"] = this.taxRate;
        data["ConsumRate"] = this.consumRate;
        data["AddRate"] = this.addRate;
        data["No3C"] = this.no3C;
        data["Flag3C"] = this.flag3C;
        data["NxNo"] = this.nxNo;
        data["NxFlag"] = this.nxFlag;
        data["MecNo"] = this.mecNo;
        data["DutyMode"] = this.dutyMode;
        data["TradeMode"] = this.tradeMode;
        data["SapInvoiceListId"] = this.sapInvoiceListId;
        data["BillSplitNo"] = this.billSplitNo;
        data["Remark"] = this.remark;
        data["Usd01"] = this.usd01;
        data["Usd02"] = this.usd02;
        data["Usd03"] = this.usd03;
        data["Usd04"] = this.usd04;
        data["Usd05"] = this.usd05;
        data["Usd06"] = this.usd06;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["LotAtt01"] = this.lotAtt01;
        data["LotAtt02"] = this.lotAtt02;
        data["LotAtt03"] = this.lotAtt03;
        data["LotAtt04"] = this.lotAtt04;
        data["LotAtt05"] = this.lotAtt05;
        data["LotAtt06"] = this.lotAtt06;
        data["LotAtt07"] = this.lotAtt07;
        data["LotAtt08"] = this.lotAtt08;
        data["LotAtt09"] = this.lotAtt09;
        data["LotAtt10"] = this.lotAtt10;
        data["LotAtt11"] = this.lotAtt11;
        data["LotAtt12"] = this.lotAtt12;
        data["LotAtt13"] = this.lotAtt13;
        data["LotAtt14"] = this.lotAtt14;
        data["LotAtt15"] = this.lotAtt15;
        data["LotAtt16"] = this.lotAtt16;
        data["LotAtt17"] = this.lotAtt17;
        data["LotAtt18"] = this.lotAtt18;
        data["ErpSku"] = this.erpSku;
        data["ControlNo"] = this.controlNo;
        data["GrossWt"] = this.grossWt;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBusList {
    entryId?: string | undefined;
    traceNo?: string | undefined;
    unBeiAn?: boolean | undefined;
    id?: number | undefined;
    headId?: number | undefined;
    busNo?: string | undefined;
    seqNo?: number | undefined;
    projectNo?: string | undefined;
    poNo?: string | undefined;
    soNo?: string | undefined;
    invoiceNo?: string | undefined;
    invoiceDate?: Date | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    hscode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    gNameEn?: string | undefined;
    qtyPkg?: number | undefined;
    unitPkg?: string | undefined;
    erpUnit?: string | undefined;
    qtyAgent?: number | undefined;
    unitAgent?: string | undefined;
    unit1?: string | undefined;
    qty1?: number | undefined;
    unit2?: string | undefined;
    qty2?: number | undefined;
    price?: number | undefined;
    total?: number | undefined;
    curr?: string | undefined;
    netWt?: number | undefined;
    exgVersion?: string | undefined;
    country?: string | undefined;
    destinationCountry?: string | undefined;
    controlHg?: string | undefined;
    controlSj?: string | undefined;
    taxRate?: number | undefined;
    consumRate?: number | undefined;
    addRate?: number | undefined;
    no3C?: string | undefined;
    flag3C?: string | undefined;
    nxNo?: string | undefined;
    nxFlag?: string | undefined;
    mecNo?: string | undefined;
    dutyMode?: string | undefined;
    tradeMode?: string | undefined;
    sapInvoiceListId?: number | undefined;
    billSplitNo?: string | undefined;
    remark?: string | undefined;
    usd01?: string | undefined;
    usd02?: string | undefined;
    usd03?: string | undefined;
    usd04?: string | undefined;
    usd05?: string | undefined;
    usd06?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    erpSku?: string | undefined;
    controlNo?: string | undefined;
    grossWt?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppOutStock implements IEntAppOutStock {
    createTimeBegin?: Date | undefined;
    createTimeEnd?: Date | undefined;
    id?: number | undefined;
    soNo?: string | undefined;
    poNo?: string | undefined;
    projectNo?: string | undefined;
    invoiceNo?: string | undefined;
    invoiceLineNo?: string | undefined;
    invoiceDate?: Date | undefined;
    customerCode?: string | undefined;
    copGNo?: string | undefined;
    lineStatus?: string | undefined;
    location?: string | undefined;
    qty?: number | undefined;
    qtyLeft?: number | undefined;
    unit?: string | undefined;
    grossWeight?: number | undefined;
    netWeight?: number | undefined;
    cubic?: number | undefined;
    price?: number | undefined;
    total?: number | undefined;
    curr?: string | undefined;
    country?: string | undefined;
    dnNo?: string | undefined;
    dnLineId?: string | undefined;
    emsNo?: string | undefined;
    hsCode?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    sjCondition?: string | undefined;
    hgCondition?: string | undefined;
    remark?: string | undefined;
    batchNo?: string | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    usd4?: string | undefined;
    usd5?: string | undefined;
    usd6?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppOutStock) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createTimeBegin = data["CreateTimeBegin"] ? new Date(data["CreateTimeBegin"].toString()) : <any>undefined;
            this.createTimeEnd = data["CreateTimeEnd"] ? new Date(data["CreateTimeEnd"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.soNo = data["SoNo"];
            this.poNo = data["PoNo"];
            this.projectNo = data["ProjectNo"];
            this.invoiceNo = data["InvoiceNo"];
            this.invoiceLineNo = data["InvoiceLineNo"];
            this.invoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.customerCode = data["CustomerCode"];
            this.copGNo = data["CopGNo"];
            this.lineStatus = data["LineStatus"];
            this.location = data["Location"];
            this.qty = data["Qty"];
            this.qtyLeft = data["QtyLeft"];
            this.unit = data["Unit"];
            this.grossWeight = data["GrossWeight"];
            this.netWeight = data["NetWeight"];
            this.cubic = data["Cubic"];
            this.price = data["Price"];
            this.total = data["Total"];
            this.curr = data["Curr"];
            this.country = data["Country"];
            this.dnNo = data["DnNo"];
            this.dnLineId = data["DnLineId"];
            this.emsNo = data["EmsNo"];
            this.hsCode = data["HsCode"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.sjCondition = data["SjCondition"];
            this.hgCondition = data["HgCondition"];
            this.remark = data["Remark"];
            this.batchNo = data["BatchNo"];
            this.lotAtt01 = data["LotAtt01"];
            this.lotAtt02 = data["LotAtt02"];
            this.lotAtt03 = data["LotAtt03"];
            this.lotAtt04 = data["LotAtt04"];
            this.lotAtt05 = data["LotAtt05"];
            this.lotAtt06 = data["LotAtt06"];
            this.lotAtt07 = data["LotAtt07"];
            this.lotAtt08 = data["LotAtt08"];
            this.lotAtt09 = data["LotAtt09"];
            this.lotAtt10 = data["LotAtt10"];
            this.lotAtt11 = data["LotAtt11"];
            this.lotAtt12 = data["LotAtt12"];
            this.lotAtt13 = data["LotAtt13"];
            this.lotAtt14 = data["LotAtt14"];
            this.lotAtt15 = data["LotAtt15"];
            this.lotAtt16 = data["LotAtt16"];
            this.lotAtt17 = data["LotAtt17"];
            this.lotAtt18 = data["LotAtt18"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.usd3 = data["Usd3"];
            this.usd4 = data["Usd4"];
            this.usd5 = data["Usd5"];
            this.usd6 = data["Usd6"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppOutStock {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppOutStock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreateTimeBegin"] = this.createTimeBegin ? this.createTimeBegin.toISOString() : <any>undefined;
        data["CreateTimeEnd"] = this.createTimeEnd ? this.createTimeEnd.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["SoNo"] = this.soNo;
        data["PoNo"] = this.poNo;
        data["ProjectNo"] = this.projectNo;
        data["InvoiceNo"] = this.invoiceNo;
        data["InvoiceLineNo"] = this.invoiceLineNo;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["CustomerCode"] = this.customerCode;
        data["CopGNo"] = this.copGNo;
        data["LineStatus"] = this.lineStatus;
        data["Location"] = this.location;
        data["Qty"] = this.qty;
        data["QtyLeft"] = this.qtyLeft;
        data["Unit"] = this.unit;
        data["GrossWeight"] = this.grossWeight;
        data["NetWeight"] = this.netWeight;
        data["Cubic"] = this.cubic;
        data["Price"] = this.price;
        data["Total"] = this.total;
        data["Curr"] = this.curr;
        data["Country"] = this.country;
        data["DnNo"] = this.dnNo;
        data["DnLineId"] = this.dnLineId;
        data["EmsNo"] = this.emsNo;
        data["HsCode"] = this.hsCode;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["SjCondition"] = this.sjCondition;
        data["HgCondition"] = this.hgCondition;
        data["Remark"] = this.remark;
        data["BatchNo"] = this.batchNo;
        data["LotAtt01"] = this.lotAtt01;
        data["LotAtt02"] = this.lotAtt02;
        data["LotAtt03"] = this.lotAtt03;
        data["LotAtt04"] = this.lotAtt04;
        data["LotAtt05"] = this.lotAtt05;
        data["LotAtt06"] = this.lotAtt06;
        data["LotAtt07"] = this.lotAtt07;
        data["LotAtt08"] = this.lotAtt08;
        data["LotAtt09"] = this.lotAtt09;
        data["LotAtt10"] = this.lotAtt10;
        data["LotAtt11"] = this.lotAtt11;
        data["LotAtt12"] = this.lotAtt12;
        data["LotAtt13"] = this.lotAtt13;
        data["LotAtt14"] = this.lotAtt14;
        data["LotAtt15"] = this.lotAtt15;
        data["LotAtt16"] = this.lotAtt16;
        data["LotAtt17"] = this.lotAtt17;
        data["LotAtt18"] = this.lotAtt18;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["Usd3"] = this.usd3;
        data["Usd4"] = this.usd4;
        data["Usd5"] = this.usd5;
        data["Usd6"] = this.usd6;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppOutStock {
    createTimeBegin?: Date | undefined;
    createTimeEnd?: Date | undefined;
    id?: number | undefined;
    soNo?: string | undefined;
    poNo?: string | undefined;
    projectNo?: string | undefined;
    invoiceNo?: string | undefined;
    invoiceLineNo?: string | undefined;
    invoiceDate?: Date | undefined;
    customerCode?: string | undefined;
    copGNo?: string | undefined;
    lineStatus?: string | undefined;
    location?: string | undefined;
    qty?: number | undefined;
    qtyLeft?: number | undefined;
    unit?: string | undefined;
    grossWeight?: number | undefined;
    netWeight?: number | undefined;
    cubic?: number | undefined;
    price?: number | undefined;
    total?: number | undefined;
    curr?: string | undefined;
    country?: string | undefined;
    dnNo?: string | undefined;
    dnLineId?: string | undefined;
    emsNo?: string | undefined;
    hsCode?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    sjCondition?: string | undefined;
    hgCondition?: string | undefined;
    remark?: string | undefined;
    batchNo?: string | undefined;
    lotAtt01?: string | undefined;
    lotAtt02?: string | undefined;
    lotAtt03?: string | undefined;
    lotAtt04?: string | undefined;
    lotAtt05?: string | undefined;
    lotAtt06?: string | undefined;
    lotAtt07?: string | undefined;
    lotAtt08?: string | undefined;
    lotAtt09?: string | undefined;
    lotAtt10?: string | undefined;
    lotAtt11?: string | undefined;
    lotAtt12?: string | undefined;
    lotAtt13?: string | undefined;
    lotAtt14?: string | undefined;
    lotAtt15?: string | undefined;
    lotAtt16?: string | undefined;
    lotAtt17?: string | undefined;
    lotAtt18?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    usd4?: string | undefined;
    usd5?: string | undefined;
    usd6?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntMessageDockLog implements IEntMessageDockLog {
    id?: number | undefined;
    messageID?: string | undefined;
    messageType?: string | undefined;
    operateDate?: Date | undefined;
    operateCount?: number | undefined;
    operateResult?: string | undefined;
    operateFlag?: string | undefined;
    workFlow?: string | undefined;
    remark?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    note3?: string | undefined;
    note4?: string | undefined;
    note5?: string | undefined;
    note6?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    approvalDate?: Date | undefined;
    operateDateBegin?: string | undefined;
    operateDateEnd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntMessageDockLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.messageID = data["MessageID"];
            this.messageType = data["MessageType"];
            this.operateDate = data["OperateDate"] ? new Date(data["OperateDate"].toString()) : <any>undefined;
            this.operateCount = data["OperateCount"];
            this.operateResult = data["OperateResult"];
            this.operateFlag = data["OperateFlag"];
            this.workFlow = data["WorkFlow"];
            this.remark = data["Remark"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.note3 = data["Note3"];
            this.note4 = data["Note4"];
            this.note5 = data["Note5"];
            this.note6 = data["Note6"];
            this.fileName = data["FileName"];
            this.filePath = data["FilePath"];
            this.approvalDate = data["ApprovalDate"] ? new Date(data["ApprovalDate"].toString()) : <any>undefined;
            this.operateDateBegin = data["OperateDateBegin"];
            this.operateDateEnd = data["OperateDateEnd"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntMessageDockLog {
        data = typeof data === 'object' ? data : {};
        let result = new EntMessageDockLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["MessageID"] = this.messageID;
        data["MessageType"] = this.messageType;
        data["OperateDate"] = this.operateDate ? this.operateDate.toISOString() : <any>undefined;
        data["OperateCount"] = this.operateCount;
        data["OperateResult"] = this.operateResult;
        data["OperateFlag"] = this.operateFlag;
        data["WorkFlow"] = this.workFlow;
        data["Remark"] = this.remark;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["Note3"] = this.note3;
        data["Note4"] = this.note4;
        data["Note5"] = this.note5;
        data["Note6"] = this.note6;
        data["FileName"] = this.fileName;
        data["FilePath"] = this.filePath;
        data["ApprovalDate"] = this.approvalDate ? this.approvalDate.toISOString() : <any>undefined;
        data["OperateDateBegin"] = this.operateDateBegin;
        data["OperateDateEnd"] = this.operateDateEnd;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntMessageDockLog {
    id?: number | undefined;
    messageID?: string | undefined;
    messageType?: string | undefined;
    operateDate?: Date | undefined;
    operateCount?: number | undefined;
    operateResult?: string | undefined;
    operateFlag?: string | undefined;
    workFlow?: string | undefined;
    remark?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    note3?: string | undefined;
    note4?: string | undefined;
    note5?: string | undefined;
    note6?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    approvalDate?: Date | undefined;
    operateDateBegin?: string | undefined;
    operateDateEnd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class CacheCode implements ICacheCode {
    hashKey?: string | undefined;
    code?: string | undefined;
    nameCn?: string | undefined;
    nameEn?: string | undefined;
    hgCode?: string | undefined;
    hgNameCn?: string | undefined;
    hgNameEn?: string | undefined;
    ciqCode?: string | undefined;
    ciqNameCn?: string | undefined;
    ciqNameEn?: string | undefined;
    customStr?: string | undefined;

    constructor(data?: ICacheCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hashKey = data["HashKey"];
            this.code = data["Code"];
            this.nameCn = data["NameCn"];
            this.nameEn = data["NameEn"];
            this.hgCode = data["HgCode"];
            this.hgNameCn = data["HgNameCn"];
            this.hgNameEn = data["HgNameEn"];
            this.ciqCode = data["CiqCode"];
            this.ciqNameCn = data["CiqNameCn"];
            this.ciqNameEn = data["CiqNameEn"];
            this.customStr = data["CustomStr"];
        }
    }

    static fromJS(data: any): CacheCode {
        data = typeof data === 'object' ? data : {};
        let result = new CacheCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HashKey"] = this.hashKey;
        data["Code"] = this.code;
        data["NameCn"] = this.nameCn;
        data["NameEn"] = this.nameEn;
        data["HgCode"] = this.hgCode;
        data["HgNameCn"] = this.hgNameCn;
        data["HgNameEn"] = this.hgNameEn;
        data["CiqCode"] = this.ciqCode;
        data["CiqNameCn"] = this.ciqNameCn;
        data["CiqNameEn"] = this.ciqNameEn;
        data["CustomStr"] = this.customStr;
        return data; 
    }
}

export interface ICacheCode {
    hashKey?: string | undefined;
    code?: string | undefined;
    nameCn?: string | undefined;
    nameEn?: string | undefined;
    hgCode?: string | undefined;
    hgNameCn?: string | undefined;
    hgNameEn?: string | undefined;
    ciqCode?: string | undefined;
    ciqNameCn?: string | undefined;
    ciqNameEn?: string | undefined;
    customStr?: string | undefined;
}

export class Category implements ICategory {
    id?: number | undefined;
    name?: string | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface ICategory {
    id?: number | undefined;
    name?: string | undefined;
}

/** 查询实体 */
export class SqlParameterPair implements ISqlParameterPair {
    /** Where带参语句 */
    sql?: string | undefined;
    /** 参数实体 */
    parameter?: any | undefined;

    constructor(data?: ISqlParameterPair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sql = data["Sql"];
            this.parameter = data["Parameter"];
        }
    }

    static fromJS(data: any): SqlParameterPair {
        data = typeof data === 'object' ? data : {};
        let result = new SqlParameterPair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Sql"] = this.sql;
        data["Parameter"] = this.parameter;
        return data; 
    }
}

/** 查询实体 */
export interface ISqlParameterPair {
    /** Where带参语句 */
    sql?: string | undefined;
    /** 参数实体 */
    parameter?: any | undefined;
}

export class EntGoldenCmExgdummy implements IEntGoldenCmExgdummy {
    id?: number | undefined;
    exgNo?: string | undefined;
    dummyNo?: string | undefined;
    gType?: string | undefined;
    decCm?: number | undefined;
    prodLine?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenCmExgdummy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.exgNo = data["ExgNo"];
            this.dummyNo = data["DummyNo"];
            this.gType = data["GType"];
            this.decCm = data["DecCm"];
            this.prodLine = data["ProdLine"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenCmExgdummy {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenCmExgdummy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ExgNo"] = this.exgNo;
        data["DummyNo"] = this.dummyNo;
        data["GType"] = this.gType;
        data["DecCm"] = this.decCm;
        data["ProdLine"] = this.prodLine;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenCmExgdummy {
    id?: number | undefined;
    exgNo?: string | undefined;
    dummyNo?: string | undefined;
    gType?: string | undefined;
    decCm?: number | undefined;
    prodLine?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntParaQuery implements IEntParaQuery {
    parasItem?: { [key: string]: any; } | undefined;
    codeType?: string | undefined;
    pageData?: any | undefined;
    columnsMap?: { [key: string]: string; } | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntParaQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ParasItem"]) {
                this.parasItem = {} as any;
                for (let key in data["ParasItem"]) {
                    if (data["ParasItem"].hasOwnProperty(key))
                        this.parasItem![key] = data["ParasItem"][key];
                }
            }
            this.codeType = data["CodeType"];
            this.pageData = data["PageData"];
            if (data["ColumnsMap"]) {
                this.columnsMap = {} as any;
                for (let key in data["ColumnsMap"]) {
                    if (data["ColumnsMap"].hasOwnProperty(key))
                        this.columnsMap![key] = data["ColumnsMap"][key];
                }
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntParaQuery {
        data = typeof data === 'object' ? data : {};
        let result = new EntParaQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.parasItem) {
            data["ParasItem"] = {};
            for (let key in this.parasItem) {
                if (this.parasItem.hasOwnProperty(key))
                    data["ParasItem"][key] = this.parasItem[key];
            }
        }
        data["CodeType"] = this.codeType;
        data["PageData"] = this.pageData;
        if (this.columnsMap) {
            data["ColumnsMap"] = {};
            for (let key in this.columnsMap) {
                if (this.columnsMap.hasOwnProperty(key))
                    data["ColumnsMap"][key] = this.columnsMap[key];
            }
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntParaQuery {
    parasItem?: { [key: string]: any; } | undefined;
    codeType?: string | undefined;
    pageData?: any | undefined;
    columnsMap?: { [key: string]: string; } | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfEntParaQuery implements IReturnResultOfEntParaQuery {
    success?: boolean | undefined;
    data?: EntParaQuery | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntParaQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntParaQuery.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntParaQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntParaQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntParaQuery {
    success?: boolean | undefined;
    data?: EntParaQuery | undefined;
    messge?: string | undefined;
}

export class EntBasCodetype implements IEntBasCodetype {
    codeType?: string | undefined;
    codetypeCn?: string | undefined;
    codetypeEn?: string | undefined;
    dataType?: string | undefined;
    dataLength?: number | undefined;
    status?: string | undefined;
    showSequence?: number | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    editStatus?: string | undefined;
    remark?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasCodetype) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.codeType = data["CodeType"];
            this.codetypeCn = data["CodetypeCn"];
            this.codetypeEn = data["CodetypeEn"];
            this.dataType = data["DataType"];
            this.dataLength = data["DataLength"];
            this.status = data["Status"];
            this.showSequence = data["ShowSequence"];
            this.uSD1 = data["USD1"];
            this.uSD2 = data["USD2"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.editStatus = data["EditStatus"];
            this.remark = data["Remark"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasCodetype {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasCodetype();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CodeType"] = this.codeType;
        data["CodetypeCn"] = this.codetypeCn;
        data["CodetypeEn"] = this.codetypeEn;
        data["DataType"] = this.dataType;
        data["DataLength"] = this.dataLength;
        data["Status"] = this.status;
        data["ShowSequence"] = this.showSequence;
        data["USD1"] = this.uSD1;
        data["USD2"] = this.uSD2;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["EditStatus"] = this.editStatus;
        data["Remark"] = this.remark;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasCodetype {
    codeType?: string | undefined;
    codetypeCn?: string | undefined;
    codetypeEn?: string | undefined;
    dataType?: string | undefined;
    dataLength?: number | undefined;
    status?: string | undefined;
    showSequence?: number | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    editStatus?: string | undefined;
    remark?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasCodes implements IEntBasCodes {
    codeType?: string | undefined;
    code?: string | undefined;
    codenameCn?: string | undefined;
    codenameEn?: string | undefined;
    showSequence?: number | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    status?: string | undefined;
    editStatus?: string | undefined;
    remark?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasCodes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.codeType = data["CodeType"];
            this.code = data["Code"];
            this.codenameCn = data["CodenameCn"];
            this.codenameEn = data["CodenameEn"];
            this.showSequence = data["ShowSequence"];
            this.uSD1 = data["USD1"];
            this.uSD2 = data["USD2"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.status = data["Status"];
            this.editStatus = data["EditStatus"];
            this.remark = data["Remark"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasCodes {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasCodes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CodeType"] = this.codeType;
        data["Code"] = this.code;
        data["CodenameCn"] = this.codenameCn;
        data["CodenameEn"] = this.codenameEn;
        data["ShowSequence"] = this.showSequence;
        data["USD1"] = this.uSD1;
        data["USD2"] = this.uSD2;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["Status"] = this.status;
        data["EditStatus"] = this.editStatus;
        data["Remark"] = this.remark;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasCodes {
    codeType?: string | undefined;
    code?: string | undefined;
    codenameCn?: string | undefined;
    codenameEn?: string | undefined;
    showSequence?: number | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    status?: string | undefined;
    editStatus?: string | undefined;
    remark?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpCompanyFinance implements IEntCustomsErpCompanyFinance {
    id?: number | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    purchaseOrderNO?: string | undefined;
    paymentTerm?: string | undefined;
    payerAccountNumber?: string | undefined;
    payeeAccountNumber?: string | undefined;
    payeeBICSwift?: string | undefined;
    beneficiary?: string | undefined;
    paymentAmount?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    referenceNumber?: string | undefined;
    scheduledTime?: Date | undefined;
    actualTime?: Date | undefined;
    invoiceNo?: string | undefined;
    entryId?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpCompanyFinance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.contractNO = data["ContractNO"];
            this.sellerCompanyCodeVAT = data["SellerCompanyCodeVAT"];
            this.sellerCountryISOCode = data["SellerCountryISOCode"];
            this.sellerCountryZHCode = data["SellerCountryZHCode"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.paymentTerm = data["PaymentTerm"];
            this.payerAccountNumber = data["PayerAccountNumber"];
            this.payeeAccountNumber = data["PayeeAccountNumber"];
            this.payeeBICSwift = data["PayeeBICSwift"];
            this.beneficiary = data["Beneficiary"];
            this.paymentAmount = data["PaymentAmount"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.exchangeRate = data["ExchangeRate"];
            this.referenceNumber = data["ReferenceNumber"];
            this.scheduledTime = data["ScheduledTime"] ? new Date(data["ScheduledTime"].toString()) : <any>undefined;
            this.actualTime = data["ActualTime"] ? new Date(data["ActualTime"].toString()) : <any>undefined;
            this.invoiceNo = data["InvoiceNo"];
            this.entryId = data["EntryId"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpCompanyFinance {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpCompanyFinance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["ContractNO"] = this.contractNO;
        data["SellerCompanyCodeVAT"] = this.sellerCompanyCodeVAT;
        data["SellerCountryISOCode"] = this.sellerCountryISOCode;
        data["SellerCountryZHCode"] = this.sellerCountryZHCode;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["PaymentTerm"] = this.paymentTerm;
        data["PayerAccountNumber"] = this.payerAccountNumber;
        data["PayeeAccountNumber"] = this.payeeAccountNumber;
        data["PayeeBICSwift"] = this.payeeBICSwift;
        data["Beneficiary"] = this.beneficiary;
        data["PaymentAmount"] = this.paymentAmount;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["ExchangeRate"] = this.exchangeRate;
        data["ReferenceNumber"] = this.referenceNumber;
        data["ScheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>undefined;
        data["ActualTime"] = this.actualTime ? this.actualTime.toISOString() : <any>undefined;
        data["InvoiceNo"] = this.invoiceNo;
        data["EntryId"] = this.entryId;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpCompanyFinance {
    id?: number | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    purchaseOrderNO?: string | undefined;
    paymentTerm?: string | undefined;
    payerAccountNumber?: string | undefined;
    payeeAccountNumber?: string | undefined;
    payeeBICSwift?: string | undefined;
    beneficiary?: string | undefined;
    paymentAmount?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    referenceNumber?: string | undefined;
    scheduledTime?: Date | undefined;
    actualTime?: Date | undefined;
    invoiceNo?: string | undefined;
    entryId?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpContract implements IEntCustomsErpContract {
    id?: number | undefined;
    contractNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    agreementID?: string | undefined;
    inCoTerm?: string | undefined;
    signDate?: Date | undefined;
    validDate?: Date | undefined;
    cNTradeCo?: string | undefined;
    cNCompanyName?: string | undefined;
    cNCompanyNameEN?: string | undefined;
    cNCompanyAddress?: string | undefined;
    cNCompanyTelephone?: string | undefined;
    cNCompanyFax?: string | undefined;
    emailAdress?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerCompanyVAT2?: string | undefined;
    sellerCompanyCode2?: string | undefined;
    companyNameEn2?: string | undefined;
    companyFullNameEn2?: string | undefined;
    companyNameZH2?: string | undefined;
    companyFullNameZH2?: string | undefined;
    countryCodeISO2?: string | undefined;
    countryCodeZH2?: string | undefined;
    countryFullNameEn2?: string | undefined;
    countryNameZH2?: string | undefined;
    countryFullNameZH2?: string | undefined;
    companyAddress2?: string | undefined;
    companyTelephone2?: string | undefined;
    companyFax2?: string | undefined;
    companyEmailAdress2?: string | undefined;
    sellerCompanyVAT3?: string | undefined;
    sellerCompanyCode3?: string | undefined;
    companyNameEn3?: string | undefined;
    companyFullNameEn3?: string | undefined;
    companyNameZH3?: string | undefined;
    companyFullNameZH3?: string | undefined;
    countryCodeISO3?: string | undefined;
    countryCodeZH3?: string | undefined;
    countryFullNameEn3?: string | undefined;
    countryNameZH3?: string | undefined;
    countryFullNameZH3?: string | undefined;
    companyAddress3?: string | undefined;
    companyTelephone3?: string | undefined;
    companyFax3?: string | undefined;
    companyEmailAdress3?: string | undefined;
    expostatus?: string | undefined;
    exposellercompanyid?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.contractNO = data["ContractNO"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.agreementID = data["AgreementID"];
            this.inCoTerm = data["InCoTerm"];
            this.signDate = data["SignDate"] ? new Date(data["SignDate"].toString()) : <any>undefined;
            this.validDate = data["ValidDate"] ? new Date(data["ValidDate"].toString()) : <any>undefined;
            this.cNTradeCo = data["CNTradeCo"];
            this.cNCompanyName = data["CNCompanyName"];
            this.cNCompanyNameEN = data["CNCompanyNameEN"];
            this.cNCompanyAddress = data["CNCompanyAddress"];
            this.cNCompanyTelephone = data["CNCompanyTelephone"];
            this.cNCompanyFax = data["CNCompanyFax"];
            this.emailAdress = data["EmailAdress"];
            this.sellerCompanyVAT = data["SellerCompanyVAT"];
            this.sellerCompanyCode = data["SellerCompanyCode"];
            this.companyNameEn = data["CompanyNameEn"];
            this.companyFullNameEn = data["CompanyFullNameEn"];
            this.companyNameZH = data["CompanyNameZH"];
            this.companyFullNameZH = data["CompanyFullNameZH"];
            this.countryCodeISO = data["CountryCodeISO"];
            this.countryCodeZH = data["CountryCodeZH"];
            this.countryFullNameEn = data["CountryFullNameEn"];
            this.countryNameZH = data["CountryNameZH"];
            this.countryFullNameZH = data["CountryFullNameZH"];
            this.companyAddress = data["CompanyAddress"];
            this.companyTelephone = data["CompanyTelephone"];
            this.companyFax = data["CompanyFax"];
            this.companyEmailAdress = data["CompanyEmailAdress"];
            this.sellerCompanyVAT2 = data["SellerCompanyVAT2"];
            this.sellerCompanyCode2 = data["SellerCompanyCode2"];
            this.companyNameEn2 = data["CompanyNameEn2"];
            this.companyFullNameEn2 = data["CompanyFullNameEn2"];
            this.companyNameZH2 = data["CompanyNameZH2"];
            this.companyFullNameZH2 = data["CompanyFullNameZH2"];
            this.countryCodeISO2 = data["CountryCodeISO2"];
            this.countryCodeZH2 = data["CountryCodeZH2"];
            this.countryFullNameEn2 = data["CountryFullNameEn2"];
            this.countryNameZH2 = data["CountryNameZH2"];
            this.countryFullNameZH2 = data["CountryFullNameZH2"];
            this.companyAddress2 = data["CompanyAddress2"];
            this.companyTelephone2 = data["CompanyTelephone2"];
            this.companyFax2 = data["CompanyFax2"];
            this.companyEmailAdress2 = data["CompanyEmailAdress2"];
            this.sellerCompanyVAT3 = data["SellerCompanyVAT3"];
            this.sellerCompanyCode3 = data["SellerCompanyCode3"];
            this.companyNameEn3 = data["CompanyNameEn3"];
            this.companyFullNameEn3 = data["CompanyFullNameEn3"];
            this.companyNameZH3 = data["CompanyNameZH3"];
            this.companyFullNameZH3 = data["CompanyFullNameZH3"];
            this.countryCodeISO3 = data["CountryCodeISO3"];
            this.countryCodeZH3 = data["CountryCodeZH3"];
            this.countryFullNameEn3 = data["CountryFullNameEn3"];
            this.countryNameZH3 = data["CountryNameZH3"];
            this.countryFullNameZH3 = data["CountryFullNameZH3"];
            this.companyAddress3 = data["CompanyAddress3"];
            this.companyTelephone3 = data["CompanyTelephone3"];
            this.companyFax3 = data["CompanyFax3"];
            this.companyEmailAdress3 = data["CompanyEmailAdress3"];
            this.expostatus = data["Expostatus"];
            this.exposellercompanyid = data["Exposellercompanyid"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpContract {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ContractNO"] = this.contractNO;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["AgreementID"] = this.agreementID;
        data["InCoTerm"] = this.inCoTerm;
        data["SignDate"] = this.signDate ? this.signDate.toISOString() : <any>undefined;
        data["ValidDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["CNTradeCo"] = this.cNTradeCo;
        data["CNCompanyName"] = this.cNCompanyName;
        data["CNCompanyNameEN"] = this.cNCompanyNameEN;
        data["CNCompanyAddress"] = this.cNCompanyAddress;
        data["CNCompanyTelephone"] = this.cNCompanyTelephone;
        data["CNCompanyFax"] = this.cNCompanyFax;
        data["EmailAdress"] = this.emailAdress;
        data["SellerCompanyVAT"] = this.sellerCompanyVAT;
        data["SellerCompanyCode"] = this.sellerCompanyCode;
        data["CompanyNameEn"] = this.companyNameEn;
        data["CompanyFullNameEn"] = this.companyFullNameEn;
        data["CompanyNameZH"] = this.companyNameZH;
        data["CompanyFullNameZH"] = this.companyFullNameZH;
        data["CountryCodeISO"] = this.countryCodeISO;
        data["CountryCodeZH"] = this.countryCodeZH;
        data["CountryFullNameEn"] = this.countryFullNameEn;
        data["CountryNameZH"] = this.countryNameZH;
        data["CountryFullNameZH"] = this.countryFullNameZH;
        data["CompanyAddress"] = this.companyAddress;
        data["CompanyTelephone"] = this.companyTelephone;
        data["CompanyFax"] = this.companyFax;
        data["CompanyEmailAdress"] = this.companyEmailAdress;
        data["SellerCompanyVAT2"] = this.sellerCompanyVAT2;
        data["SellerCompanyCode2"] = this.sellerCompanyCode2;
        data["CompanyNameEn2"] = this.companyNameEn2;
        data["CompanyFullNameEn2"] = this.companyFullNameEn2;
        data["CompanyNameZH2"] = this.companyNameZH2;
        data["CompanyFullNameZH2"] = this.companyFullNameZH2;
        data["CountryCodeISO2"] = this.countryCodeISO2;
        data["CountryCodeZH2"] = this.countryCodeZH2;
        data["CountryFullNameEn2"] = this.countryFullNameEn2;
        data["CountryNameZH2"] = this.countryNameZH2;
        data["CountryFullNameZH2"] = this.countryFullNameZH2;
        data["CompanyAddress2"] = this.companyAddress2;
        data["CompanyTelephone2"] = this.companyTelephone2;
        data["CompanyFax2"] = this.companyFax2;
        data["CompanyEmailAdress2"] = this.companyEmailAdress2;
        data["SellerCompanyVAT3"] = this.sellerCompanyVAT3;
        data["SellerCompanyCode3"] = this.sellerCompanyCode3;
        data["CompanyNameEn3"] = this.companyNameEn3;
        data["CompanyFullNameEn3"] = this.companyFullNameEn3;
        data["CompanyNameZH3"] = this.companyNameZH3;
        data["CompanyFullNameZH3"] = this.companyFullNameZH3;
        data["CountryCodeISO3"] = this.countryCodeISO3;
        data["CountryCodeZH3"] = this.countryCodeZH3;
        data["CountryFullNameEn3"] = this.countryFullNameEn3;
        data["CountryNameZH3"] = this.countryNameZH3;
        data["CountryFullNameZH3"] = this.countryFullNameZH3;
        data["CompanyAddress3"] = this.companyAddress3;
        data["CompanyTelephone3"] = this.companyTelephone3;
        data["CompanyFax3"] = this.companyFax3;
        data["CompanyEmailAdress3"] = this.companyEmailAdress3;
        data["Expostatus"] = this.expostatus;
        data["Exposellercompanyid"] = this.exposellercompanyid;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpContract {
    id?: number | undefined;
    contractNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    agreementID?: string | undefined;
    inCoTerm?: string | undefined;
    signDate?: Date | undefined;
    validDate?: Date | undefined;
    cNTradeCo?: string | undefined;
    cNCompanyName?: string | undefined;
    cNCompanyNameEN?: string | undefined;
    cNCompanyAddress?: string | undefined;
    cNCompanyTelephone?: string | undefined;
    cNCompanyFax?: string | undefined;
    emailAdress?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerCompanyVAT2?: string | undefined;
    sellerCompanyCode2?: string | undefined;
    companyNameEn2?: string | undefined;
    companyFullNameEn2?: string | undefined;
    companyNameZH2?: string | undefined;
    companyFullNameZH2?: string | undefined;
    countryCodeISO2?: string | undefined;
    countryCodeZH2?: string | undefined;
    countryFullNameEn2?: string | undefined;
    countryNameZH2?: string | undefined;
    countryFullNameZH2?: string | undefined;
    companyAddress2?: string | undefined;
    companyTelephone2?: string | undefined;
    companyFax2?: string | undefined;
    companyEmailAdress2?: string | undefined;
    sellerCompanyVAT3?: string | undefined;
    sellerCompanyCode3?: string | undefined;
    companyNameEn3?: string | undefined;
    companyFullNameEn3?: string | undefined;
    companyNameZH3?: string | undefined;
    companyFullNameZH3?: string | undefined;
    countryCodeISO3?: string | undefined;
    countryCodeZH3?: string | undefined;
    countryFullNameEn3?: string | undefined;
    countryNameZH3?: string | undefined;
    countryFullNameZH3?: string | undefined;
    companyAddress3?: string | undefined;
    companyTelephone3?: string | undefined;
    companyFax3?: string | undefined;
    companyEmailAdress3?: string | undefined;
    expostatus?: string | undefined;
    exposellercompanyid?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpContractList implements IEntCustomsErpContractList {
    id?: number | undefined;
    contractNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    goodsModleDesc?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpContractList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.contractNO = data["ContractNO"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.item = data["Item"];
            this.materialNO = data["MaterialNO"];
            this.goodsDesZH = data["GoodsDesZH"];
            this.goodsDesEN = data["GoodsDesEN"];
            this.goodsModleDesc = data["GoodsModleDesc"];
            this.totalQuantity = data["TotalQuantity"];
            this.totalQuantityUnit = data["TotalQuantityUnit"];
            this.groupQuantity = data["GroupQuantity"];
            this.groupQuantityUnit = data["GroupQuantityUnit"];
            this.quantity = data["Quantity"];
            this.quantityUnit = data["QuantityUnit"];
            this.groupWeight = data["GroupWeight"];
            this.groupWeightUnit = data["GroupWeightUnit"];
            this.weight = data["Weight"];
            this.weightUnit = data["WeightUnit"];
            this.groupUnitPrice = data["GroupUnitPrice"];
            this.unitPrice = data["UnitPrice"];
            this.totalPrice = data["TotalPrice"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.exchangeRate = data["ExchangeRate"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpContractList {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpContractList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ContractNO"] = this.contractNO;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["Item"] = this.item;
        data["MaterialNO"] = this.materialNO;
        data["GoodsDesZH"] = this.goodsDesZH;
        data["GoodsDesEN"] = this.goodsDesEN;
        data["GoodsModleDesc"] = this.goodsModleDesc;
        data["TotalQuantity"] = this.totalQuantity;
        data["TotalQuantityUnit"] = this.totalQuantityUnit;
        data["GroupQuantity"] = this.groupQuantity;
        data["GroupQuantityUnit"] = this.groupQuantityUnit;
        data["Quantity"] = this.quantity;
        data["QuantityUnit"] = this.quantityUnit;
        data["GroupWeight"] = this.groupWeight;
        data["GroupWeightUnit"] = this.groupWeightUnit;
        data["Weight"] = this.weight;
        data["WeightUnit"] = this.weightUnit;
        data["GroupUnitPrice"] = this.groupUnitPrice;
        data["UnitPrice"] = this.unitPrice;
        data["TotalPrice"] = this.totalPrice;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["ExchangeRate"] = this.exchangeRate;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpContractList {
    id?: number | undefined;
    contractNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    goodsModleDesc?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessFee implements IEntTgBusinessFee {
    id?: number | undefined;
    billNo?: string | undefined;
    seqNo?: number | undefined;
    feeItem?: string | undefined;
    orderNo?: string | undefined;
    billModel?: string | undefined;
    customerNo?: string | undefined;
    customerName?: string | undefined;
    billingNo?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    feeNo?: string | undefined;
    feeFlag?: string | undefined;
    lockFlag?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    checkFlag?: string | undefined;
    checkUser?: string | undefined;
    checkDate?: Date | undefined;
    billType?: string | undefined;
    exchangeRate?: number | undefined;
    remarks?: string | undefined;
    realAmount?: number | undefined;
    leftAmount?: number | undefined;
    clearingFlag?: string | undefined;
    dsdfFlag?: string | undefined;
    clearingDate?: Date | undefined;
    payType?: string | undefined;
    checkNo?: string | undefined;
    cancelChkFlag?: string | undefined;
    cancelChkUser?: string | undefined;
    cancelChkDate?: Date | undefined;
    confirmFlag?: string | undefined;
    confirmDate?: Date | undefined;
    confirmUser?: string | undefined;
    payObj?: string | undefined;
    invoiceNo?: string | undefined;
    feeGuid?: string | undefined;
    cmpIds?: string | undefined;
    entryId?: string | undefined;
    taxRate?: number | undefined;
    amountTax?: number | undefined;
    amountAfterTax?: number | undefined;
    fnumber?: string | undefined;
    fnumberFlag?: string | undefined;
    fnumberValidflag?: string | undefined;
    fgroupid?: string | undefined;
    batchno?: string | undefined;
    exporter?: string | undefined;
    exportflag?: string | undefined;
    exportDate?: Date | undefined;
    linkGuid?: string | undefined;
    erpNo?: string | undefined;
    statementNo?: string | undefined;
    expenseSynchronizeFlag?: string | undefined;
    invoiceAttachmentPath?: string | undefined;
    kisPay1Flag?: string | undefined;
    kisPay2Flag?: string | undefined;
    kisReceive2Flag?: string | undefined;
    deptCode?: string | undefined;
    supplierCode?: string | undefined;
    supplierName?: string | undefined;
    settlementInterval?: string | undefined;
    endCreate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessFee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.billNo = data["BillNo"];
            this.seqNo = data["SeqNo"];
            this.feeItem = data["FeeItem"];
            this.orderNo = data["OrderNo"];
            this.billModel = data["BillModel"];
            this.customerNo = data["CustomerNo"];
            this.customerName = data["CustomerName"];
            this.billingNo = data["BillingNo"];
            this.amount = data["Amount"];
            this.currency = data["Currency"];
            this.feeNo = data["FeeNo"];
            this.feeFlag = data["FeeFlag"];
            this.lockFlag = data["LockFlag"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.checkFlag = data["CheckFlag"];
            this.checkUser = data["CheckUser"];
            this.checkDate = data["CheckDate"] ? new Date(data["CheckDate"].toString()) : <any>undefined;
            this.billType = data["BillType"];
            this.exchangeRate = data["ExchangeRate"];
            this.remarks = data["Remarks"];
            this.realAmount = data["RealAmount"];
            this.leftAmount = data["LeftAmount"];
            this.clearingFlag = data["ClearingFlag"];
            this.dsdfFlag = data["DsdfFlag"];
            this.clearingDate = data["ClearingDate"] ? new Date(data["ClearingDate"].toString()) : <any>undefined;
            this.payType = data["PayType"];
            this.checkNo = data["CheckNo"];
            this.cancelChkFlag = data["CancelChkFlag"];
            this.cancelChkUser = data["CancelChkUser"];
            this.cancelChkDate = data["CancelChkDate"] ? new Date(data["CancelChkDate"].toString()) : <any>undefined;
            this.confirmFlag = data["ConfirmFlag"];
            this.confirmDate = data["ConfirmDate"] ? new Date(data["ConfirmDate"].toString()) : <any>undefined;
            this.confirmUser = data["ConfirmUser"];
            this.payObj = data["PayObj"];
            this.invoiceNo = data["InvoiceNo"];
            this.feeGuid = data["FeeGuid"];
            this.cmpIds = data["CmpIds"];
            this.entryId = data["EntryId"];
            this.taxRate = data["TaxRate"];
            this.amountTax = data["AmountTax"];
            this.amountAfterTax = data["AmountAfterTax"];
            this.fnumber = data["Fnumber"];
            this.fnumberFlag = data["FnumberFlag"];
            this.fnumberValidflag = data["FnumberValidflag"];
            this.fgroupid = data["Fgroupid"];
            this.batchno = data["Batchno"];
            this.exporter = data["Exporter"];
            this.exportflag = data["Exportflag"];
            this.exportDate = data["ExportDate"] ? new Date(data["ExportDate"].toString()) : <any>undefined;
            this.linkGuid = data["LinkGuid"];
            this.erpNo = data["ErpNo"];
            this.statementNo = data["StatementNo"];
            this.expenseSynchronizeFlag = data["ExpenseSynchronizeFlag"];
            this.invoiceAttachmentPath = data["InvoiceAttachmentPath"];
            this.kisPay1Flag = data["KisPay1Flag"];
            this.kisPay2Flag = data["KisPay2Flag"];
            this.kisReceive2Flag = data["KisReceive2Flag"];
            this.deptCode = data["DeptCode"];
            this.supplierCode = data["SupplierCode"];
            this.supplierName = data["SupplierName"];
            this.settlementInterval = data["SettlementInterval"];
            this.endCreate = data["endCreate"] ? new Date(data["endCreate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessFee {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessFee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["BillNo"] = this.billNo;
        data["SeqNo"] = this.seqNo;
        data["FeeItem"] = this.feeItem;
        data["OrderNo"] = this.orderNo;
        data["BillModel"] = this.billModel;
        data["CustomerNo"] = this.customerNo;
        data["CustomerName"] = this.customerName;
        data["BillingNo"] = this.billingNo;
        data["Amount"] = this.amount;
        data["Currency"] = this.currency;
        data["FeeNo"] = this.feeNo;
        data["FeeFlag"] = this.feeFlag;
        data["LockFlag"] = this.lockFlag;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CheckFlag"] = this.checkFlag;
        data["CheckUser"] = this.checkUser;
        data["CheckDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["BillType"] = this.billType;
        data["ExchangeRate"] = this.exchangeRate;
        data["Remarks"] = this.remarks;
        data["RealAmount"] = this.realAmount;
        data["LeftAmount"] = this.leftAmount;
        data["ClearingFlag"] = this.clearingFlag;
        data["DsdfFlag"] = this.dsdfFlag;
        data["ClearingDate"] = this.clearingDate ? this.clearingDate.toISOString() : <any>undefined;
        data["PayType"] = this.payType;
        data["CheckNo"] = this.checkNo;
        data["CancelChkFlag"] = this.cancelChkFlag;
        data["CancelChkUser"] = this.cancelChkUser;
        data["CancelChkDate"] = this.cancelChkDate ? this.cancelChkDate.toISOString() : <any>undefined;
        data["ConfirmFlag"] = this.confirmFlag;
        data["ConfirmDate"] = this.confirmDate ? this.confirmDate.toISOString() : <any>undefined;
        data["ConfirmUser"] = this.confirmUser;
        data["PayObj"] = this.payObj;
        data["InvoiceNo"] = this.invoiceNo;
        data["FeeGuid"] = this.feeGuid;
        data["CmpIds"] = this.cmpIds;
        data["EntryId"] = this.entryId;
        data["TaxRate"] = this.taxRate;
        data["AmountTax"] = this.amountTax;
        data["AmountAfterTax"] = this.amountAfterTax;
        data["Fnumber"] = this.fnumber;
        data["FnumberFlag"] = this.fnumberFlag;
        data["FnumberValidflag"] = this.fnumberValidflag;
        data["Fgroupid"] = this.fgroupid;
        data["Batchno"] = this.batchno;
        data["Exporter"] = this.exporter;
        data["Exportflag"] = this.exportflag;
        data["ExportDate"] = this.exportDate ? this.exportDate.toISOString() : <any>undefined;
        data["LinkGuid"] = this.linkGuid;
        data["ErpNo"] = this.erpNo;
        data["StatementNo"] = this.statementNo;
        data["ExpenseSynchronizeFlag"] = this.expenseSynchronizeFlag;
        data["InvoiceAttachmentPath"] = this.invoiceAttachmentPath;
        data["KisPay1Flag"] = this.kisPay1Flag;
        data["KisPay2Flag"] = this.kisPay2Flag;
        data["KisReceive2Flag"] = this.kisReceive2Flag;
        data["DeptCode"] = this.deptCode;
        data["SupplierCode"] = this.supplierCode;
        data["SupplierName"] = this.supplierName;
        data["SettlementInterval"] = this.settlementInterval;
        data["endCreate"] = this.endCreate ? this.endCreate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessFee {
    id?: number | undefined;
    billNo?: string | undefined;
    seqNo?: number | undefined;
    feeItem?: string | undefined;
    orderNo?: string | undefined;
    billModel?: string | undefined;
    customerNo?: string | undefined;
    customerName?: string | undefined;
    billingNo?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    feeNo?: string | undefined;
    feeFlag?: string | undefined;
    lockFlag?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    checkFlag?: string | undefined;
    checkUser?: string | undefined;
    checkDate?: Date | undefined;
    billType?: string | undefined;
    exchangeRate?: number | undefined;
    remarks?: string | undefined;
    realAmount?: number | undefined;
    leftAmount?: number | undefined;
    clearingFlag?: string | undefined;
    dsdfFlag?: string | undefined;
    clearingDate?: Date | undefined;
    payType?: string | undefined;
    checkNo?: string | undefined;
    cancelChkFlag?: string | undefined;
    cancelChkUser?: string | undefined;
    cancelChkDate?: Date | undefined;
    confirmFlag?: string | undefined;
    confirmDate?: Date | undefined;
    confirmUser?: string | undefined;
    payObj?: string | undefined;
    invoiceNo?: string | undefined;
    feeGuid?: string | undefined;
    cmpIds?: string | undefined;
    entryId?: string | undefined;
    taxRate?: number | undefined;
    amountTax?: number | undefined;
    amountAfterTax?: number | undefined;
    fnumber?: string | undefined;
    fnumberFlag?: string | undefined;
    fnumberValidflag?: string | undefined;
    fgroupid?: string | undefined;
    batchno?: string | undefined;
    exporter?: string | undefined;
    exportflag?: string | undefined;
    exportDate?: Date | undefined;
    linkGuid?: string | undefined;
    erpNo?: string | undefined;
    statementNo?: string | undefined;
    expenseSynchronizeFlag?: string | undefined;
    invoiceAttachmentPath?: string | undefined;
    kisPay1Flag?: string | undefined;
    kisPay2Flag?: string | undefined;
    kisReceive2Flag?: string | undefined;
    deptCode?: string | undefined;
    supplierCode?: string | undefined;
    supplierName?: string | undefined;
    settlementInterval?: string | undefined;
    endCreate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppAsnTrace implements IEntAppAsnTrace {
    iSentry_one_pass?: string | undefined;
    iSpick_date?: string | undefined;
    iScbxreceive_date?: string | undefined;
    comboBox3?: string | undefined;
    startDAte?: string | undefined;
    endDAte?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    billNo?: string | undefined;
    billDepartment?: string | undefined;
    orderNo?: string | undefined;
    emsNo?: string | undefined;
    tradeMode?: string | undefined;
    supplierCode?: string | undefined;
    receiverCode?: string | undefined;
    dozen?: number | undefined;
    grossWt?: number | undefined;
    netWt?: number | undefined;
    iEDate?: Date | undefined;
    originPort?: string | undefined;
    destPort?: string | undefined;
    invoiceNo?: string | undefined;
    emergencyLevel?: string | undefined;
    entryId?: string | undefined;
    seqNo?: string | undefined;
    agentCode?: string | undefined;
    forwarderCode?: string | undefined;
    poNo?: string | undefined;
    soNo?: string | undefined;
    projectNo?: string | undefined;
    billModel?: string | undefined;
    totalMoney?: number | undefined;
    curr?: string | undefined;
    taxMoney?: number | undefined;
    addValueMoney?: number | undefined;
    specialMoney?: number | undefined;
    tgdNo?: string | undefined;
    entrustNo?: string | undefined;
    remark?: string | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    uSD3?: string | undefined;
    uSD4?: string | undefined;
    uSD5?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    acctepDate?: Date | undefined;
    makeDate?: Date | undefined;
    buildBillDate?: Date | undefined;
    billPassDate?: Date | undefined;
    entrustAgentDate?: Date | undefined;
    entryBackDate?: Date | undefined;
    entryOnePass?: Date | undefined;
    payTaxDate?: Date | undefined;
    sjDate?: Date | undefined;
    cyDate?: Date | undefined;
    entryTwoDate?: Date | undefined;
    entryEndDate?: Date | undefined;
    pickDate?: Date | undefined;
    arriveDate?: Date | undefined;
    receiveDate?: Date | undefined;
    entryDeleteDate?: Date | undefined;
    entryChangeDate?: Date | undefined;
    bakDocDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppAsnTrace) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iSentry_one_pass = data["ISentry_one_pass"];
            this.iSpick_date = data["ISpick_date"];
            this.iScbxreceive_date = data["IScbxreceive_date"];
            this.comboBox3 = data["comboBox3"];
            this.startDAte = data["StartDAte"];
            this.endDAte = data["endDAte"];
            this.id = data["Id"];
            this.customerCode = data["CustomerCode"];
            this.billNo = data["BillNo"];
            this.billDepartment = data["BillDepartment"];
            this.orderNo = data["OrderNo"];
            this.emsNo = data["EmsNo"];
            this.tradeMode = data["TradeMode"];
            this.supplierCode = data["SupplierCode"];
            this.receiverCode = data["ReceiverCode"];
            this.dozen = data["Dozen"];
            this.grossWt = data["GrossWt"];
            this.netWt = data["NetWt"];
            this.iEDate = data["IEDate"] ? new Date(data["IEDate"].toString()) : <any>undefined;
            this.originPort = data["OriginPort"];
            this.destPort = data["DestPort"];
            this.invoiceNo = data["InvoiceNo"];
            this.emergencyLevel = data["EmergencyLevel"];
            this.entryId = data["EntryId"];
            this.seqNo = data["SeqNo"];
            this.agentCode = data["AgentCode"];
            this.forwarderCode = data["ForwarderCode"];
            this.poNo = data["PoNo"];
            this.soNo = data["SoNo"];
            this.projectNo = data["ProjectNo"];
            this.billModel = data["BillModel"];
            this.totalMoney = data["TotalMoney"];
            this.curr = data["Curr"];
            this.taxMoney = data["TaxMoney"];
            this.addValueMoney = data["AddValueMoney"];
            this.specialMoney = data["SpecialMoney"];
            this.tgdNo = data["TgdNo"];
            this.entrustNo = data["EntrustNo"];
            this.remark = data["Remark"];
            this.uSD1 = data["USD1"];
            this.uSD2 = data["USD2"];
            this.uSD3 = data["USD3"];
            this.uSD4 = data["USD4"];
            this.uSD5 = data["USD5"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.acctepDate = data["AcctepDate"] ? new Date(data["AcctepDate"].toString()) : <any>undefined;
            this.makeDate = data["MakeDate"] ? new Date(data["MakeDate"].toString()) : <any>undefined;
            this.buildBillDate = data["BuildBillDate"] ? new Date(data["BuildBillDate"].toString()) : <any>undefined;
            this.billPassDate = data["BillPassDate"] ? new Date(data["BillPassDate"].toString()) : <any>undefined;
            this.entrustAgentDate = data["EntrustAgentDate"] ? new Date(data["EntrustAgentDate"].toString()) : <any>undefined;
            this.entryBackDate = data["EntryBackDate"] ? new Date(data["EntryBackDate"].toString()) : <any>undefined;
            this.entryOnePass = data["EntryOnePass"] ? new Date(data["EntryOnePass"].toString()) : <any>undefined;
            this.payTaxDate = data["PayTaxDate"] ? new Date(data["PayTaxDate"].toString()) : <any>undefined;
            this.sjDate = data["SjDate"] ? new Date(data["SjDate"].toString()) : <any>undefined;
            this.cyDate = data["CyDate"] ? new Date(data["CyDate"].toString()) : <any>undefined;
            this.entryTwoDate = data["EntryTwoDate"] ? new Date(data["EntryTwoDate"].toString()) : <any>undefined;
            this.entryEndDate = data["EntryEndDate"] ? new Date(data["EntryEndDate"].toString()) : <any>undefined;
            this.pickDate = data["PickDate"] ? new Date(data["PickDate"].toString()) : <any>undefined;
            this.arriveDate = data["ArriveDate"] ? new Date(data["ArriveDate"].toString()) : <any>undefined;
            this.receiveDate = data["ReceiveDate"] ? new Date(data["ReceiveDate"].toString()) : <any>undefined;
            this.entryDeleteDate = data["EntryDeleteDate"] ? new Date(data["EntryDeleteDate"].toString()) : <any>undefined;
            this.entryChangeDate = data["EntryChangeDate"] ? new Date(data["EntryChangeDate"].toString()) : <any>undefined;
            this.bakDocDate = data["BakDocDate"] ? new Date(data["BakDocDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppAsnTrace {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppAsnTrace();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ISentry_one_pass"] = this.iSentry_one_pass;
        data["ISpick_date"] = this.iSpick_date;
        data["IScbxreceive_date"] = this.iScbxreceive_date;
        data["comboBox3"] = this.comboBox3;
        data["StartDAte"] = this.startDAte;
        data["endDAte"] = this.endDAte;
        data["Id"] = this.id;
        data["CustomerCode"] = this.customerCode;
        data["BillNo"] = this.billNo;
        data["BillDepartment"] = this.billDepartment;
        data["OrderNo"] = this.orderNo;
        data["EmsNo"] = this.emsNo;
        data["TradeMode"] = this.tradeMode;
        data["SupplierCode"] = this.supplierCode;
        data["ReceiverCode"] = this.receiverCode;
        data["Dozen"] = this.dozen;
        data["GrossWt"] = this.grossWt;
        data["NetWt"] = this.netWt;
        data["IEDate"] = this.iEDate ? this.iEDate.toISOString() : <any>undefined;
        data["OriginPort"] = this.originPort;
        data["DestPort"] = this.destPort;
        data["InvoiceNo"] = this.invoiceNo;
        data["EmergencyLevel"] = this.emergencyLevel;
        data["EntryId"] = this.entryId;
        data["SeqNo"] = this.seqNo;
        data["AgentCode"] = this.agentCode;
        data["ForwarderCode"] = this.forwarderCode;
        data["PoNo"] = this.poNo;
        data["SoNo"] = this.soNo;
        data["ProjectNo"] = this.projectNo;
        data["BillModel"] = this.billModel;
        data["TotalMoney"] = this.totalMoney;
        data["Curr"] = this.curr;
        data["TaxMoney"] = this.taxMoney;
        data["AddValueMoney"] = this.addValueMoney;
        data["SpecialMoney"] = this.specialMoney;
        data["TgdNo"] = this.tgdNo;
        data["EntrustNo"] = this.entrustNo;
        data["Remark"] = this.remark;
        data["USD1"] = this.uSD1;
        data["USD2"] = this.uSD2;
        data["USD3"] = this.uSD3;
        data["USD4"] = this.uSD4;
        data["USD5"] = this.uSD5;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["AcctepDate"] = this.acctepDate ? this.acctepDate.toISOString() : <any>undefined;
        data["MakeDate"] = this.makeDate ? this.makeDate.toISOString() : <any>undefined;
        data["BuildBillDate"] = this.buildBillDate ? this.buildBillDate.toISOString() : <any>undefined;
        data["BillPassDate"] = this.billPassDate ? this.billPassDate.toISOString() : <any>undefined;
        data["EntrustAgentDate"] = this.entrustAgentDate ? this.entrustAgentDate.toISOString() : <any>undefined;
        data["EntryBackDate"] = this.entryBackDate ? this.entryBackDate.toISOString() : <any>undefined;
        data["EntryOnePass"] = this.entryOnePass ? this.entryOnePass.toISOString() : <any>undefined;
        data["PayTaxDate"] = this.payTaxDate ? this.payTaxDate.toISOString() : <any>undefined;
        data["SjDate"] = this.sjDate ? this.sjDate.toISOString() : <any>undefined;
        data["CyDate"] = this.cyDate ? this.cyDate.toISOString() : <any>undefined;
        data["EntryTwoDate"] = this.entryTwoDate ? this.entryTwoDate.toISOString() : <any>undefined;
        data["EntryEndDate"] = this.entryEndDate ? this.entryEndDate.toISOString() : <any>undefined;
        data["PickDate"] = this.pickDate ? this.pickDate.toISOString() : <any>undefined;
        data["ArriveDate"] = this.arriveDate ? this.arriveDate.toISOString() : <any>undefined;
        data["ReceiveDate"] = this.receiveDate ? this.receiveDate.toISOString() : <any>undefined;
        data["EntryDeleteDate"] = this.entryDeleteDate ? this.entryDeleteDate.toISOString() : <any>undefined;
        data["EntryChangeDate"] = this.entryChangeDate ? this.entryChangeDate.toISOString() : <any>undefined;
        data["BakDocDate"] = this.bakDocDate ? this.bakDocDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppAsnTrace {
    iSentry_one_pass?: string | undefined;
    iSpick_date?: string | undefined;
    iScbxreceive_date?: string | undefined;
    comboBox3?: string | undefined;
    startDAte?: string | undefined;
    endDAte?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    billNo?: string | undefined;
    billDepartment?: string | undefined;
    orderNo?: string | undefined;
    emsNo?: string | undefined;
    tradeMode?: string | undefined;
    supplierCode?: string | undefined;
    receiverCode?: string | undefined;
    dozen?: number | undefined;
    grossWt?: number | undefined;
    netWt?: number | undefined;
    iEDate?: Date | undefined;
    originPort?: string | undefined;
    destPort?: string | undefined;
    invoiceNo?: string | undefined;
    emergencyLevel?: string | undefined;
    entryId?: string | undefined;
    seqNo?: string | undefined;
    agentCode?: string | undefined;
    forwarderCode?: string | undefined;
    poNo?: string | undefined;
    soNo?: string | undefined;
    projectNo?: string | undefined;
    billModel?: string | undefined;
    totalMoney?: number | undefined;
    curr?: string | undefined;
    taxMoney?: number | undefined;
    addValueMoney?: number | undefined;
    specialMoney?: number | undefined;
    tgdNo?: string | undefined;
    entrustNo?: string | undefined;
    remark?: string | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    uSD3?: string | undefined;
    uSD4?: string | undefined;
    uSD5?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    acctepDate?: Date | undefined;
    makeDate?: Date | undefined;
    buildBillDate?: Date | undefined;
    billPassDate?: Date | undefined;
    entrustAgentDate?: Date | undefined;
    entryBackDate?: Date | undefined;
    entryOnePass?: Date | undefined;
    payTaxDate?: Date | undefined;
    sjDate?: Date | undefined;
    cyDate?: Date | undefined;
    entryTwoDate?: Date | undefined;
    entryEndDate?: Date | undefined;
    pickDate?: Date | undefined;
    arriveDate?: Date | undefined;
    receiveDate?: Date | undefined;
    entryDeleteDate?: Date | undefined;
    entryChangeDate?: Date | undefined;
    bakDocDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntAppOutTrace implements IEntAppOutTrace {
    iSentry_one_pass?: string | undefined;
    iSout_warehouse_date?: string | undefined;
    iSloading_date?: string | undefined;
    comboBox3?: string | undefined;
    startDAte?: string | undefined;
    endDAte?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    billNo?: string | undefined;
    billDepartment?: string | undefined;
    orderNo?: string | undefined;
    emsNo?: string | undefined;
    tradeMode?: string | undefined;
    supplierCode?: string | undefined;
    receiverCode?: string | undefined;
    dozen?: number | undefined;
    grossWt?: number | undefined;
    netWt?: number | undefined;
    iEDate?: Date | undefined;
    originPort?: string | undefined;
    destPort?: string | undefined;
    invoiceNo?: string | undefined;
    emergencyLevel?: string | undefined;
    entryId?: string | undefined;
    seqNo?: string | undefined;
    agentCode?: string | undefined;
    forwarderCode?: string | undefined;
    poNo?: string | undefined;
    soNo?: string | undefined;
    projectNo?: string | undefined;
    billModel?: string | undefined;
    totalMoney?: number | undefined;
    curr?: string | undefined;
    taxMoney?: number | undefined;
    addValueMoney?: number | undefined;
    specialMoney?: number | undefined;
    tgdNo?: string | undefined;
    entrustNo?: string | undefined;
    remark?: string | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    uSD3?: string | undefined;
    uSD4?: string | undefined;
    uSD5?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    acctepDate?: Date | undefined;
    makeDate?: Date | undefined;
    buildBillDate?: Date | undefined;
    billPassDate?: Date | undefined;
    entrustAgentDate?: Date | undefined;
    entryBackDate?: Date | undefined;
    entryOnePass?: Date | undefined;
    payTaxRollbackDate?: Date | undefined;
    payTaxDate?: Date | undefined;
    sjDate?: Date | undefined;
    cyDate?: Date | undefined;
    entryTwoDate?: Date | undefined;
    entryEndDate?: Date | undefined;
    outWarehouseDate?: Date | undefined;
    loadingDate?: Date | undefined;
    entryDeleteDate?: Date | undefined;
    entryChangeDate?: Date | undefined;
    bakDocDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppOutTrace) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iSentry_one_pass = data["ISentry_one_pass"];
            this.iSout_warehouse_date = data["ISout_warehouse_date"];
            this.iSloading_date = data["ISloading_date"];
            this.comboBox3 = data["comboBox3"];
            this.startDAte = data["StartDAte"];
            this.endDAte = data["endDAte"];
            this.id = data["Id"];
            this.customerCode = data["CustomerCode"];
            this.billNo = data["BillNo"];
            this.billDepartment = data["BillDepartment"];
            this.orderNo = data["OrderNo"];
            this.emsNo = data["EmsNo"];
            this.tradeMode = data["TradeMode"];
            this.supplierCode = data["SupplierCode"];
            this.receiverCode = data["ReceiverCode"];
            this.dozen = data["Dozen"];
            this.grossWt = data["GrossWt"];
            this.netWt = data["NetWt"];
            this.iEDate = data["IEDate"] ? new Date(data["IEDate"].toString()) : <any>undefined;
            this.originPort = data["OriginPort"];
            this.destPort = data["DestPort"];
            this.invoiceNo = data["InvoiceNo"];
            this.emergencyLevel = data["EmergencyLevel"];
            this.entryId = data["EntryId"];
            this.seqNo = data["SeqNo"];
            this.agentCode = data["AgentCode"];
            this.forwarderCode = data["ForwarderCode"];
            this.poNo = data["PoNo"];
            this.soNo = data["SoNo"];
            this.projectNo = data["ProjectNo"];
            this.billModel = data["BillModel"];
            this.totalMoney = data["TotalMoney"];
            this.curr = data["Curr"];
            this.taxMoney = data["TaxMoney"];
            this.addValueMoney = data["AddValueMoney"];
            this.specialMoney = data["SpecialMoney"];
            this.tgdNo = data["TgdNo"];
            this.entrustNo = data["EntrustNo"];
            this.remark = data["Remark"];
            this.uSD1 = data["USD1"];
            this.uSD2 = data["USD2"];
            this.uSD3 = data["USD3"];
            this.uSD4 = data["USD4"];
            this.uSD5 = data["USD5"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.acctepDate = data["AcctepDate"] ? new Date(data["AcctepDate"].toString()) : <any>undefined;
            this.makeDate = data["MakeDate"] ? new Date(data["MakeDate"].toString()) : <any>undefined;
            this.buildBillDate = data["BuildBillDate"] ? new Date(data["BuildBillDate"].toString()) : <any>undefined;
            this.billPassDate = data["BillPassDate"] ? new Date(data["BillPassDate"].toString()) : <any>undefined;
            this.entrustAgentDate = data["EntrustAgentDate"] ? new Date(data["EntrustAgentDate"].toString()) : <any>undefined;
            this.entryBackDate = data["EntryBackDate"] ? new Date(data["EntryBackDate"].toString()) : <any>undefined;
            this.entryOnePass = data["EntryOnePass"] ? new Date(data["EntryOnePass"].toString()) : <any>undefined;
            this.payTaxRollbackDate = data["PayTaxRollbackDate"] ? new Date(data["PayTaxRollbackDate"].toString()) : <any>undefined;
            this.payTaxDate = data["PayTaxDate"] ? new Date(data["PayTaxDate"].toString()) : <any>undefined;
            this.sjDate = data["SjDate"] ? new Date(data["SjDate"].toString()) : <any>undefined;
            this.cyDate = data["CyDate"] ? new Date(data["CyDate"].toString()) : <any>undefined;
            this.entryTwoDate = data["EntryTwoDate"] ? new Date(data["EntryTwoDate"].toString()) : <any>undefined;
            this.entryEndDate = data["EntryEndDate"] ? new Date(data["EntryEndDate"].toString()) : <any>undefined;
            this.outWarehouseDate = data["OutWarehouseDate"] ? new Date(data["OutWarehouseDate"].toString()) : <any>undefined;
            this.loadingDate = data["LoadingDate"] ? new Date(data["LoadingDate"].toString()) : <any>undefined;
            this.entryDeleteDate = data["EntryDeleteDate"] ? new Date(data["EntryDeleteDate"].toString()) : <any>undefined;
            this.entryChangeDate = data["EntryChangeDate"] ? new Date(data["EntryChangeDate"].toString()) : <any>undefined;
            this.bakDocDate = data["BakDocDate"] ? new Date(data["BakDocDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppOutTrace {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppOutTrace();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ISentry_one_pass"] = this.iSentry_one_pass;
        data["ISout_warehouse_date"] = this.iSout_warehouse_date;
        data["ISloading_date"] = this.iSloading_date;
        data["comboBox3"] = this.comboBox3;
        data["StartDAte"] = this.startDAte;
        data["endDAte"] = this.endDAte;
        data["Id"] = this.id;
        data["CustomerCode"] = this.customerCode;
        data["BillNo"] = this.billNo;
        data["BillDepartment"] = this.billDepartment;
        data["OrderNo"] = this.orderNo;
        data["EmsNo"] = this.emsNo;
        data["TradeMode"] = this.tradeMode;
        data["SupplierCode"] = this.supplierCode;
        data["ReceiverCode"] = this.receiverCode;
        data["Dozen"] = this.dozen;
        data["GrossWt"] = this.grossWt;
        data["NetWt"] = this.netWt;
        data["IEDate"] = this.iEDate ? this.iEDate.toISOString() : <any>undefined;
        data["OriginPort"] = this.originPort;
        data["DestPort"] = this.destPort;
        data["InvoiceNo"] = this.invoiceNo;
        data["EmergencyLevel"] = this.emergencyLevel;
        data["EntryId"] = this.entryId;
        data["SeqNo"] = this.seqNo;
        data["AgentCode"] = this.agentCode;
        data["ForwarderCode"] = this.forwarderCode;
        data["PoNo"] = this.poNo;
        data["SoNo"] = this.soNo;
        data["ProjectNo"] = this.projectNo;
        data["BillModel"] = this.billModel;
        data["TotalMoney"] = this.totalMoney;
        data["Curr"] = this.curr;
        data["TaxMoney"] = this.taxMoney;
        data["AddValueMoney"] = this.addValueMoney;
        data["SpecialMoney"] = this.specialMoney;
        data["TgdNo"] = this.tgdNo;
        data["EntrustNo"] = this.entrustNo;
        data["Remark"] = this.remark;
        data["USD1"] = this.uSD1;
        data["USD2"] = this.uSD2;
        data["USD3"] = this.uSD3;
        data["USD4"] = this.uSD4;
        data["USD5"] = this.uSD5;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["AcctepDate"] = this.acctepDate ? this.acctepDate.toISOString() : <any>undefined;
        data["MakeDate"] = this.makeDate ? this.makeDate.toISOString() : <any>undefined;
        data["BuildBillDate"] = this.buildBillDate ? this.buildBillDate.toISOString() : <any>undefined;
        data["BillPassDate"] = this.billPassDate ? this.billPassDate.toISOString() : <any>undefined;
        data["EntrustAgentDate"] = this.entrustAgentDate ? this.entrustAgentDate.toISOString() : <any>undefined;
        data["EntryBackDate"] = this.entryBackDate ? this.entryBackDate.toISOString() : <any>undefined;
        data["EntryOnePass"] = this.entryOnePass ? this.entryOnePass.toISOString() : <any>undefined;
        data["PayTaxRollbackDate"] = this.payTaxRollbackDate ? this.payTaxRollbackDate.toISOString() : <any>undefined;
        data["PayTaxDate"] = this.payTaxDate ? this.payTaxDate.toISOString() : <any>undefined;
        data["SjDate"] = this.sjDate ? this.sjDate.toISOString() : <any>undefined;
        data["CyDate"] = this.cyDate ? this.cyDate.toISOString() : <any>undefined;
        data["EntryTwoDate"] = this.entryTwoDate ? this.entryTwoDate.toISOString() : <any>undefined;
        data["EntryEndDate"] = this.entryEndDate ? this.entryEndDate.toISOString() : <any>undefined;
        data["OutWarehouseDate"] = this.outWarehouseDate ? this.outWarehouseDate.toISOString() : <any>undefined;
        data["LoadingDate"] = this.loadingDate ? this.loadingDate.toISOString() : <any>undefined;
        data["EntryDeleteDate"] = this.entryDeleteDate ? this.entryDeleteDate.toISOString() : <any>undefined;
        data["EntryChangeDate"] = this.entryChangeDate ? this.entryChangeDate.toISOString() : <any>undefined;
        data["BakDocDate"] = this.bakDocDate ? this.bakDocDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppOutTrace {
    iSentry_one_pass?: string | undefined;
    iSout_warehouse_date?: string | undefined;
    iSloading_date?: string | undefined;
    comboBox3?: string | undefined;
    startDAte?: string | undefined;
    endDAte?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    billNo?: string | undefined;
    billDepartment?: string | undefined;
    orderNo?: string | undefined;
    emsNo?: string | undefined;
    tradeMode?: string | undefined;
    supplierCode?: string | undefined;
    receiverCode?: string | undefined;
    dozen?: number | undefined;
    grossWt?: number | undefined;
    netWt?: number | undefined;
    iEDate?: Date | undefined;
    originPort?: string | undefined;
    destPort?: string | undefined;
    invoiceNo?: string | undefined;
    emergencyLevel?: string | undefined;
    entryId?: string | undefined;
    seqNo?: string | undefined;
    agentCode?: string | undefined;
    forwarderCode?: string | undefined;
    poNo?: string | undefined;
    soNo?: string | undefined;
    projectNo?: string | undefined;
    billModel?: string | undefined;
    totalMoney?: number | undefined;
    curr?: string | undefined;
    taxMoney?: number | undefined;
    addValueMoney?: number | undefined;
    specialMoney?: number | undefined;
    tgdNo?: string | undefined;
    entrustNo?: string | undefined;
    remark?: string | undefined;
    uSD1?: string | undefined;
    uSD2?: string | undefined;
    uSD3?: string | undefined;
    uSD4?: string | undefined;
    uSD5?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    acctepDate?: Date | undefined;
    makeDate?: Date | undefined;
    buildBillDate?: Date | undefined;
    billPassDate?: Date | undefined;
    entrustAgentDate?: Date | undefined;
    entryBackDate?: Date | undefined;
    entryOnePass?: Date | undefined;
    payTaxRollbackDate?: Date | undefined;
    payTaxDate?: Date | undefined;
    sjDate?: Date | undefined;
    cyDate?: Date | undefined;
    entryTwoDate?: Date | undefined;
    entryEndDate?: Date | undefined;
    outWarehouseDate?: Date | undefined;
    loadingDate?: Date | undefined;
    entryDeleteDate?: Date | undefined;
    entryChangeDate?: Date | undefined;
    bakDocDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntBasCustomer implements IEntBasCustomer {
    customerCode?: string | undefined;
    customerNameCn?: string | undefined;
    customerType?: string | undefined;
    customerEN?: string | undefined;
    country?: string | undefined;
    province?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    addressCn?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    financialCode?: string | undefined;
    eDICode?: string | undefined;
    serviceMan?: string | undefined;
    businessMan?: string | undefined;
    defaultPackage?: string | undefined;
    defaultProperty?: string | undefined;
    checkFlag?: string | undefined;
    creditCode?: string | undefined;
    curr?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    shortName?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    usd4?: string | undefined;
    usd5?: string | undefined;
    companyOf?: string | undefined;
    addressEn?: string | undefined;
    id?: number | undefined;
    shortEnName?: string | undefined;
    email?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasCustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerCode = data["CustomerCode"];
            this.customerNameCn = data["CustomerNameCn"];
            this.customerType = data["CustomerType"];
            this.customerEN = data["CustomerEN"];
            this.country = data["Country"];
            this.province = data["Province"];
            this.postcode = data["Postcode"];
            this.city = data["City"];
            this.addressCn = data["AddressCn"];
            this.phone = data["Phone"];
            this.fax = data["Fax"];
            this.homePage = data["HomePage"];
            this.financialCode = data["FinancialCode"];
            this.eDICode = data["EDICode"];
            this.serviceMan = data["ServiceMan"];
            this.businessMan = data["BusinessMan"];
            this.defaultPackage = data["DefaultPackage"];
            this.defaultProperty = data["DefaultProperty"];
            this.checkFlag = data["CheckFlag"];
            this.creditCode = data["CreditCode"];
            this.curr = data["Curr"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.shortName = data["ShortName"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.usd3 = data["Usd3"];
            this.usd4 = data["Usd4"];
            this.usd5 = data["Usd5"];
            this.companyOf = data["CompanyOf"];
            this.addressEn = data["AddressEn"];
            this.id = data["Id"];
            this.shortEnName = data["ShortEnName"];
            this.email = data["Email"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasCustomer {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasCustomer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CustomerCode"] = this.customerCode;
        data["CustomerNameCn"] = this.customerNameCn;
        data["CustomerType"] = this.customerType;
        data["CustomerEN"] = this.customerEN;
        data["Country"] = this.country;
        data["Province"] = this.province;
        data["Postcode"] = this.postcode;
        data["City"] = this.city;
        data["AddressCn"] = this.addressCn;
        data["Phone"] = this.phone;
        data["Fax"] = this.fax;
        data["HomePage"] = this.homePage;
        data["FinancialCode"] = this.financialCode;
        data["EDICode"] = this.eDICode;
        data["ServiceMan"] = this.serviceMan;
        data["BusinessMan"] = this.businessMan;
        data["DefaultPackage"] = this.defaultPackage;
        data["DefaultProperty"] = this.defaultProperty;
        data["CheckFlag"] = this.checkFlag;
        data["CreditCode"] = this.creditCode;
        data["Curr"] = this.curr;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["ShortName"] = this.shortName;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["Usd3"] = this.usd3;
        data["Usd4"] = this.usd4;
        data["Usd5"] = this.usd5;
        data["CompanyOf"] = this.companyOf;
        data["AddressEn"] = this.addressEn;
        data["Id"] = this.id;
        data["ShortEnName"] = this.shortEnName;
        data["Email"] = this.email;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasCustomer {
    customerCode?: string | undefined;
    customerNameCn?: string | undefined;
    customerType?: string | undefined;
    customerEN?: string | undefined;
    country?: string | undefined;
    province?: string | undefined;
    postcode?: string | undefined;
    city?: string | undefined;
    addressCn?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    financialCode?: string | undefined;
    eDICode?: string | undefined;
    serviceMan?: string | undefined;
    businessMan?: string | undefined;
    defaultPackage?: string | undefined;
    defaultProperty?: string | undefined;
    checkFlag?: string | undefined;
    creditCode?: string | undefined;
    curr?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    shortName?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    usd4?: string | undefined;
    usd5?: string | undefined;
    companyOf?: string | undefined;
    addressEn?: string | undefined;
    id?: number | undefined;
    shortEnName?: string | undefined;
    email?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpPacking implements IEntCustomsErpPacking {
    id?: number | undefined;
    referenceNo?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    invoiceNo?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    transportMode?: string | undefined;
    oceanVessel?: string | undefined;
    voyageNo?: string | undefined;
    billNo?: string | undefined;
    bookingNumber?: string | undefined;
    packingDate?: Date | undefined;
    shipperName?: string | undefined;
    shipperVATno?: string | undefined;
    shipperCountryCodeISO?: string | undefined;
    shipperCountryCodeZH?: string | undefined;
    forwardingAgent?: string | undefined;
    forwarderVATno?: string | undefined;
    forwarderCountryCodeISO?: string | undefined;
    forwarderCountryCodeZH?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpPacking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.referenceNo = data["ReferenceNo"];
            this.sellerCompanyCodeVAT = data["SellerCompanyCodeVAT"];
            this.sellerCountryISOCode = data["SellerCountryISOCode"];
            this.sellerCountryZHCode = data["SellerCountryZHCode"];
            this.invoiceNo = data["InvoiceNo"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.contractNO = data["ContractNO"];
            this.agreementID = data["AgreementID"];
            this.transportMode = data["TransportMode"];
            this.oceanVessel = data["OceanVessel"];
            this.voyageNo = data["VoyageNo"];
            this.billNo = data["BillNo"];
            this.bookingNumber = data["BookingNumber"];
            this.packingDate = data["PackingDate"] ? new Date(data["PackingDate"].toString()) : <any>undefined;
            this.shipperName = data["ShipperName"];
            this.shipperVATno = data["ShipperVATno"];
            this.shipperCountryCodeISO = data["ShipperCountryCodeISO"];
            this.shipperCountryCodeZH = data["ShipperCountryCodeZH"];
            this.forwardingAgent = data["ForwardingAgent"];
            this.forwarderVATno = data["ForwarderVATno"];
            this.forwarderCountryCodeISO = data["ForwarderCountryCodeISO"];
            this.forwarderCountryCodeZH = data["ForwarderCountryCodeZH"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpPacking {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpPacking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ReferenceNo"] = this.referenceNo;
        data["SellerCompanyCodeVAT"] = this.sellerCompanyCodeVAT;
        data["SellerCountryISOCode"] = this.sellerCountryISOCode;
        data["SellerCountryZHCode"] = this.sellerCountryZHCode;
        data["InvoiceNo"] = this.invoiceNo;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["ContractNO"] = this.contractNO;
        data["AgreementID"] = this.agreementID;
        data["TransportMode"] = this.transportMode;
        data["OceanVessel"] = this.oceanVessel;
        data["VoyageNo"] = this.voyageNo;
        data["BillNo"] = this.billNo;
        data["BookingNumber"] = this.bookingNumber;
        data["PackingDate"] = this.packingDate ? this.packingDate.toISOString() : <any>undefined;
        data["ShipperName"] = this.shipperName;
        data["ShipperVATno"] = this.shipperVATno;
        data["ShipperCountryCodeISO"] = this.shipperCountryCodeISO;
        data["ShipperCountryCodeZH"] = this.shipperCountryCodeZH;
        data["ForwardingAgent"] = this.forwardingAgent;
        data["ForwarderVATno"] = this.forwarderVATno;
        data["ForwarderCountryCodeISO"] = this.forwarderCountryCodeISO;
        data["ForwarderCountryCodeZH"] = this.forwarderCountryCodeZH;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpPacking {
    id?: number | undefined;
    referenceNo?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    invoiceNo?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    transportMode?: string | undefined;
    oceanVessel?: string | undefined;
    voyageNo?: string | undefined;
    billNo?: string | undefined;
    bookingNumber?: string | undefined;
    packingDate?: Date | undefined;
    shipperName?: string | undefined;
    shipperVATno?: string | undefined;
    shipperCountryCodeISO?: string | undefined;
    shipperCountryCodeZH?: string | undefined;
    forwardingAgent?: string | undefined;
    forwarderVATno?: string | undefined;
    forwarderCountryCodeISO?: string | undefined;
    forwarderCountryCodeZH?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpSellerpkgdetail implements IEntCustomsErpSellerpkgdetail {
    id?: number | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    containerNo?: string | undefined;
    invoiceNo?: string | undefined;
    grossWt?: number | undefined;
    grossUnit?: string | undefined;
    measurement?: number | undefined;
    measurementUnit?: string | undefined;
    purchaseOrderNO?: string | undefined;
    materialNO?: string | undefined;
    palletNo?: string | undefined;
    palletWeight?: number | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupNetWeight?: number | undefined;
    groupNetWeightUnit?: string | undefined;
    groupVolume?: number | undefined;
    groupVolumeUnit?: string | undefined;
    volume?: number | undefined;
    volumeUnit?: string | undefined;
    itemNo?: number | undefined;
    shippingSealNo?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpSellerpkgdetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.sellerCompanyCodeVAT = data["SellerCompanyCodeVAT"];
            this.sellerCountryISOCode = data["SellerCountryISOCode"];
            this.sellerCountryZHCode = data["SellerCountryZHCode"];
            this.containerNo = data["ContainerNo"];
            this.invoiceNo = data["InvoiceNo"];
            this.grossWt = data["GrossWt"];
            this.grossUnit = data["GrossUnit"];
            this.measurement = data["Measurement"];
            this.measurementUnit = data["MeasurementUnit"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.materialNO = data["MaterialNO"];
            this.palletNo = data["PalletNo"];
            this.palletWeight = data["PalletWeight"];
            this.goodsDesZH = data["GoodsDesZH"];
            this.goodsDesEN = data["GoodsDesEN"];
            this.totalQuantity = data["TotalQuantity"];
            this.totalQuantityUnit = data["TotalQuantityUnit"];
            this.groupQuantity = data["GroupQuantity"];
            this.groupQuantityUnit = data["GroupQuantityUnit"];
            this.quantity = data["Quantity"];
            this.quantityUnit = data["QuantityUnit"];
            this.groupWeight = data["GroupWeight"];
            this.groupWeightUnit = data["GroupWeightUnit"];
            this.weight = data["Weight"];
            this.weightUnit = data["WeightUnit"];
            this.groupNetWeight = data["GroupNetWeight"];
            this.groupNetWeightUnit = data["GroupNetWeightUnit"];
            this.groupVolume = data["GroupVolume"];
            this.groupVolumeUnit = data["GroupVolumeUnit"];
            this.volume = data["Volume"];
            this.volumeUnit = data["VolumeUnit"];
            this.itemNo = data["ItemNo"];
            this.shippingSealNo = data["ShippingSealNo"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpSellerpkgdetail {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpSellerpkgdetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["SellerCompanyCodeVAT"] = this.sellerCompanyCodeVAT;
        data["SellerCountryISOCode"] = this.sellerCountryISOCode;
        data["SellerCountryZHCode"] = this.sellerCountryZHCode;
        data["ContainerNo"] = this.containerNo;
        data["InvoiceNo"] = this.invoiceNo;
        data["GrossWt"] = this.grossWt;
        data["GrossUnit"] = this.grossUnit;
        data["Measurement"] = this.measurement;
        data["MeasurementUnit"] = this.measurementUnit;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["MaterialNO"] = this.materialNO;
        data["PalletNo"] = this.palletNo;
        data["PalletWeight"] = this.palletWeight;
        data["GoodsDesZH"] = this.goodsDesZH;
        data["GoodsDesEN"] = this.goodsDesEN;
        data["TotalQuantity"] = this.totalQuantity;
        data["TotalQuantityUnit"] = this.totalQuantityUnit;
        data["GroupQuantity"] = this.groupQuantity;
        data["GroupQuantityUnit"] = this.groupQuantityUnit;
        data["Quantity"] = this.quantity;
        data["QuantityUnit"] = this.quantityUnit;
        data["GroupWeight"] = this.groupWeight;
        data["GroupWeightUnit"] = this.groupWeightUnit;
        data["Weight"] = this.weight;
        data["WeightUnit"] = this.weightUnit;
        data["GroupNetWeight"] = this.groupNetWeight;
        data["GroupNetWeightUnit"] = this.groupNetWeightUnit;
        data["GroupVolume"] = this.groupVolume;
        data["GroupVolumeUnit"] = this.groupVolumeUnit;
        data["Volume"] = this.volume;
        data["VolumeUnit"] = this.volumeUnit;
        data["ItemNo"] = this.itemNo;
        data["ShippingSealNo"] = this.shippingSealNo;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpSellerpkgdetail {
    id?: number | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    containerNo?: string | undefined;
    invoiceNo?: string | undefined;
    grossWt?: number | undefined;
    grossUnit?: string | undefined;
    measurement?: number | undefined;
    measurementUnit?: string | undefined;
    purchaseOrderNO?: string | undefined;
    materialNO?: string | undefined;
    palletNo?: string | undefined;
    palletWeight?: number | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupNetWeight?: number | undefined;
    groupNetWeightUnit?: string | undefined;
    groupVolume?: number | undefined;
    groupVolumeUnit?: string | undefined;
    volume?: number | undefined;
    volumeUnit?: string | undefined;
    itemNo?: number | undefined;
    shippingSealNo?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntInnerAseshJmyConfig implements IEntInnerAseshJmyConfig {
    id?: number | undefined;
    businessType?: number | undefined;
    pullType?: string | undefined;
    handleType?: string | undefined;
    emsNo?: string | undefined;
    tableName?: string | undefined;
    currentEffective?: number | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    dbHost?: string | undefined;
    dbPort?: number | undefined;
    dbServiceName?: string | undefined;
    dbUser?: string | undefined;
    dbPwd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.businessType = data["BusinessType"];
            this.pullType = data["PullType"];
            this.handleType = data["HandleType"];
            this.emsNo = data["EmsNo"];
            this.tableName = data["TableName"];
            this.currentEffective = data["CurrentEffective"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.dbHost = data["DbHost"];
            this.dbPort = data["DbPort"];
            this.dbServiceName = data["DbServiceName"];
            this.dbUser = data["DbUser"];
            this.dbPwd = data["DbPwd"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyConfig {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["BusinessType"] = this.businessType;
        data["PullType"] = this.pullType;
        data["HandleType"] = this.handleType;
        data["EmsNo"] = this.emsNo;
        data["TableName"] = this.tableName;
        data["CurrentEffective"] = this.currentEffective;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["DbHost"] = this.dbHost;
        data["DbPort"] = this.dbPort;
        data["DbServiceName"] = this.dbServiceName;
        data["DbUser"] = this.dbUser;
        data["DbPwd"] = this.dbPwd;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyConfig {
    id?: number | undefined;
    businessType?: number | undefined;
    pullType?: string | undefined;
    handleType?: string | undefined;
    emsNo?: string | undefined;
    tableName?: string | undefined;
    currentEffective?: number | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    dbHost?: string | undefined;
    dbPort?: number | undefined;
    dbServiceName?: string | undefined;
    dbUser?: string | undefined;
    dbPwd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenDcrHead implements IReturnResultOfPageListOfEntGoldenDcrHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenDcrHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenDcrHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenDcrHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenDcrHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenDcrHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenDcrHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenDcrHead | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenDcrHead implements IPageListOfEntGoldenDcrHead {
    dataSource?: EntGoldenDcrHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenDcrHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenDcrHead.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenDcrHead {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenDcrHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenDcrHead {
    dataSource?: EntGoldenDcrHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenDcrHead implements IEntGoldenDcrHead {
    inputDateTo?: Date | undefined;
    bills?: EntGoldenDcrBill[] | undefined;
    imgs?: EntGoldenDcrImg[] | undefined;
    serialNo?: number | undefined;
    iD?: number | undefined;
    emsNo?: string | undefined;
    dcrTimes?: number | undefined;
    dcrType?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    entryINum?: number | undefined;
    entryENum?: number | undefined;
    iTotalAmt?: number | undefined;
    eTotalAmt?: number | undefined;
    bhItpckCnt?: number | undefined;
    bhEtpckCnt?: number | undefined;
    lfmtTotalCnt?: number | undefined;
    imprTotalCnt?: number | undefined;
    inputDate?: Date | undefined;
    dcrDate?: Date | undefined;
    dcrTime?: Date | undefined;
    nOTE?: string | undefined;
    sTATUS?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    fileName?: string | undefined;
    fileCreateFlag?: string | undefined;
    seqNo?: string | undefined;
    tradeCode?: string | undefined;
    tradeCreditCode?: string | undefined;
    tradeName?: string | undefined;
    ownerCode?: string | undefined;
    ownerCreditCode?: string | undefined;
    ownerName?: string | undefined;
    inputCreditCode?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    declareCode?: string | undefined;
    declareName?: string | undefined;
    declareCreditCode?: string | undefined;
    customerCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenDcrHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inputDateTo = data["InputDateTo"] ? new Date(data["InputDateTo"].toString()) : <any>undefined;
            if (Array.isArray(data["Bills"])) {
                this.bills = [] as any;
                for (let item of data["Bills"])
                    this.bills!.push(EntGoldenDcrBill.fromJS(item));
            }
            if (Array.isArray(data["Imgs"])) {
                this.imgs = [] as any;
                for (let item of data["Imgs"])
                    this.imgs!.push(EntGoldenDcrImg.fromJS(item));
            }
            this.serialNo = data["SerialNo"];
            this.iD = data["ID"];
            this.emsNo = data["EmsNo"];
            this.dcrTimes = data["DcrTimes"];
            this.dcrType = data["DcrType"];
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.entryINum = data["EntryINum"];
            this.entryENum = data["EntryENum"];
            this.iTotalAmt = data["ITotalAmt"];
            this.eTotalAmt = data["ETotalAmt"];
            this.bhItpckCnt = data["BhItpckCnt"];
            this.bhEtpckCnt = data["BhEtpckCnt"];
            this.lfmtTotalCnt = data["LfmtTotalCnt"];
            this.imprTotalCnt = data["ImprTotalCnt"];
            this.inputDate = data["InputDate"] ? new Date(data["InputDate"].toString()) : <any>undefined;
            this.dcrDate = data["DcrDate"] ? new Date(data["DcrDate"].toString()) : <any>undefined;
            this.dcrTime = data["DcrTime"] ? new Date(data["DcrTime"].toString()) : <any>undefined;
            this.nOTE = data["NOTE"];
            this.sTATUS = data["STATUS"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.fileName = data["FileName"];
            this.fileCreateFlag = data["FileCreateFlag"];
            this.seqNo = data["SeqNo"];
            this.tradeCode = data["TradeCode"];
            this.tradeCreditCode = data["TradeCreditCode"];
            this.tradeName = data["TradeName"];
            this.ownerCode = data["OwnerCode"];
            this.ownerCreditCode = data["OwnerCreditCode"];
            this.ownerName = data["OwnerName"];
            this.inputCreditCode = data["InputCreditCode"];
            this.inputCode = data["InputCode"];
            this.inputName = data["InputName"];
            this.declareCode = data["DeclareCode"];
            this.declareName = data["DeclareName"];
            this.declareCreditCode = data["DeclareCreditCode"];
            this.customerCode = data["CustomerCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenDcrHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenDcrHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InputDateTo"] = this.inputDateTo ? this.inputDateTo.toISOString() : <any>undefined;
        if (Array.isArray(this.bills)) {
            data["Bills"] = [];
            for (let item of this.bills)
                data["Bills"].push(item.toJSON());
        }
        if (Array.isArray(this.imgs)) {
            data["Imgs"] = [];
            for (let item of this.imgs)
                data["Imgs"].push(item.toJSON());
        }
        data["SerialNo"] = this.serialNo;
        data["ID"] = this.iD;
        data["EmsNo"] = this.emsNo;
        data["DcrTimes"] = this.dcrTimes;
        data["DcrType"] = this.dcrType;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["EntryINum"] = this.entryINum;
        data["EntryENum"] = this.entryENum;
        data["ITotalAmt"] = this.iTotalAmt;
        data["ETotalAmt"] = this.eTotalAmt;
        data["BhItpckCnt"] = this.bhItpckCnt;
        data["BhEtpckCnt"] = this.bhEtpckCnt;
        data["LfmtTotalCnt"] = this.lfmtTotalCnt;
        data["ImprTotalCnt"] = this.imprTotalCnt;
        data["InputDate"] = this.inputDate ? this.inputDate.toISOString() : <any>undefined;
        data["DcrDate"] = this.dcrDate ? this.dcrDate.toISOString() : <any>undefined;
        data["DcrTime"] = this.dcrTime ? this.dcrTime.toISOString() : <any>undefined;
        data["NOTE"] = this.nOTE;
        data["STATUS"] = this.sTATUS;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["FileName"] = this.fileName;
        data["FileCreateFlag"] = this.fileCreateFlag;
        data["SeqNo"] = this.seqNo;
        data["TradeCode"] = this.tradeCode;
        data["TradeCreditCode"] = this.tradeCreditCode;
        data["TradeName"] = this.tradeName;
        data["OwnerCode"] = this.ownerCode;
        data["OwnerCreditCode"] = this.ownerCreditCode;
        data["OwnerName"] = this.ownerName;
        data["InputCreditCode"] = this.inputCreditCode;
        data["InputCode"] = this.inputCode;
        data["InputName"] = this.inputName;
        data["DeclareCode"] = this.declareCode;
        data["DeclareName"] = this.declareName;
        data["DeclareCreditCode"] = this.declareCreditCode;
        data["CustomerCode"] = this.customerCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenDcrHead {
    inputDateTo?: Date | undefined;
    bills?: EntGoldenDcrBill[] | undefined;
    imgs?: EntGoldenDcrImg[] | undefined;
    serialNo?: number | undefined;
    iD?: number | undefined;
    emsNo?: string | undefined;
    dcrTimes?: number | undefined;
    dcrType?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    entryINum?: number | undefined;
    entryENum?: number | undefined;
    iTotalAmt?: number | undefined;
    eTotalAmt?: number | undefined;
    bhItpckCnt?: number | undefined;
    bhEtpckCnt?: number | undefined;
    lfmtTotalCnt?: number | undefined;
    imprTotalCnt?: number | undefined;
    inputDate?: Date | undefined;
    dcrDate?: Date | undefined;
    dcrTime?: Date | undefined;
    nOTE?: string | undefined;
    sTATUS?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    fileName?: string | undefined;
    fileCreateFlag?: string | undefined;
    seqNo?: string | undefined;
    tradeCode?: string | undefined;
    tradeCreditCode?: string | undefined;
    tradeName?: string | undefined;
    ownerCode?: string | undefined;
    ownerCreditCode?: string | undefined;
    ownerName?: string | undefined;
    inputCreditCode?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    declareCode?: string | undefined;
    declareName?: string | undefined;
    declareCreditCode?: string | undefined;
    customerCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenDcrBill implements IEntGoldenDcrBill {
    excelLineNum?: number | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    addTime?: Date | undefined;
    emsNo?: string | undefined;
    dcrTimes?: number | undefined;
    bondInvtNo?: string | undefined;
    dclType?: string | undefined;
    gNo?: number | undefined;
    ieFlag?: string | undefined;
    nOTE?: string | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    importName?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenDcrBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.excelLineNum = data["ExcelLineNum"];
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.addTime = data["AddTime"] ? new Date(data["AddTime"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.dcrTimes = data["DcrTimes"];
            this.bondInvtNo = data["BondInvtNo"];
            this.dclType = data["DclType"];
            this.gNo = data["GNo"];
            this.ieFlag = data["IeFlag"];
            this.nOTE = data["NOTE"];
            this.modifyMark = data["ModifyMark"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.importName = data["ImportName"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenDcrBill {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenDcrBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ExcelLineNum"] = this.excelLineNum;
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["AddTime"] = this.addTime ? this.addTime.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["DcrTimes"] = this.dcrTimes;
        data["BondInvtNo"] = this.bondInvtNo;
        data["DclType"] = this.dclType;
        data["GNo"] = this.gNo;
        data["IeFlag"] = this.ieFlag;
        data["NOTE"] = this.nOTE;
        data["ModifyMark"] = this.modifyMark;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["ImportName"] = this.importName;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenDcrBill {
    excelLineNum?: number | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    addTime?: Date | undefined;
    emsNo?: string | undefined;
    dcrTimes?: number | undefined;
    bondInvtNo?: string | undefined;
    dclType?: string | undefined;
    gNo?: number | undefined;
    ieFlag?: string | undefined;
    nOTE?: string | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    importName?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenDcrImg implements IEntGoldenDcrImg {
    excelLineNum?: number | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    goodFlag?: string | undefined;
    hscode?: string | undefined;
    remainQty?: number | undefined;
    remainAmount?: number | undefined;
    actlRemainQty?: number | undefined;
    actlRemainAmount?: number | undefined;
    csmTotalQty?: number | undefined;
    csmTotalAmt?: number | undefined;
    impOrExpTotalQty?: number | undefined;
    sdinQty?: number | undefined;
    sdinTotalAmt?: number | undefined;
    endprdRetnExchExpQty?: number | undefined;
    endprdRetnExchImpQty?: number | undefined;
    lfmtImprQty?: string | undefined;
    lfmtImprTotalAmt?: string | undefined;
    nOTE?: string | undefined;
    dprcsCrdwImpexpQty?: number | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    reexpQty?: number | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    remainMtpckTrfoutQty?: number | undefined;
    mtpckEndprdDstryQty?: number | undefined;
    lfmtDstryQty?: number | undefined;
    vrfredQty?: number | undefined;
    updateDate?: Date | undefined;
    vrfaddQty?: number | undefined;
    tgblLossQty?: number | undefined;
    intgbLossQty?: number | undefined;
    dsmlQty?: number | undefined;
    dclcusInvtAvgUprcAmt?: number | undefined;
    dsmlAmt?: number | undefined;
    importName?: string | undefined;
    dsmlRate?: number | undefined;
    vclrPridInitQty?: number | undefined;
    fstSpareMarkcd?: string | undefined;
    spareAmt?: number | undefined;
    spareQty?: number | undefined;
    uNIT?: string | undefined;
    firstQty?: number | undefined;
    tcycleBalQty?: number | undefined;
    addTime?: Date | undefined;
    dsmlFlag?: string | undefined;
    gName?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenDcrImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.excelLineNum = data["ExcelLineNum"];
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.emsNo = data["EmsNo"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.goodFlag = data["GoodFlag"];
            this.hscode = data["Hscode"];
            this.remainQty = data["RemainQty"];
            this.remainAmount = data["RemainAmount"];
            this.actlRemainQty = data["ActlRemainQty"];
            this.actlRemainAmount = data["ActlRemainAmount"];
            this.csmTotalQty = data["CsmTotalQty"];
            this.csmTotalAmt = data["CsmTotalAmt"];
            this.impOrExpTotalQty = data["ImpOrExpTotalQty"];
            this.sdinQty = data["SdinQty"];
            this.sdinTotalAmt = data["SdinTotalAmt"];
            this.endprdRetnExchExpQty = data["EndprdRetnExchExpQty"];
            this.endprdRetnExchImpQty = data["EndprdRetnExchImpQty"];
            this.lfmtImprQty = data["LfmtImprQty"];
            this.lfmtImprTotalAmt = data["LfmtImprTotalAmt"];
            this.nOTE = data["NOTE"];
            this.dprcsCrdwImpexpQty = data["DprcsCrdwImpexpQty"];
            this.modifyMark = data["ModifyMark"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.reexpQty = data["ReexpQty"];
            this.createUser = data["CreateUser"];
            this.updateUser = data["UpdateUser"];
            this.remainMtpckTrfoutQty = data["RemainMtpckTrfoutQty"];
            this.mtpckEndprdDstryQty = data["MtpckEndprdDstryQty"];
            this.lfmtDstryQty = data["LfmtDstryQty"];
            this.vrfredQty = data["VrfredQty"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.vrfaddQty = data["VrfaddQty"];
            this.tgblLossQty = data["TgblLossQty"];
            this.intgbLossQty = data["IntgbLossQty"];
            this.dsmlQty = data["DsmlQty"];
            this.dclcusInvtAvgUprcAmt = data["DclcusInvtAvgUprcAmt"];
            this.dsmlAmt = data["DsmlAmt"];
            this.importName = data["ImportName"];
            this.dsmlRate = data["DsmlRate"];
            this.vclrPridInitQty = data["VclrPridInitQty"];
            this.fstSpareMarkcd = data["FstSpareMarkcd"];
            this.spareAmt = data["SpareAmt"];
            this.spareQty = data["SpareQty"];
            this.uNIT = data["UNIT"];
            this.firstQty = data["FirstQty"];
            this.tcycleBalQty = data["TcycleBalQty"];
            this.addTime = data["AddTime"] ? new Date(data["AddTime"].toString()) : <any>undefined;
            this.dsmlFlag = data["DsmlFlag"];
            this.gName = data["GName"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenDcrImg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenDcrImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ExcelLineNum"] = this.excelLineNum;
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["EmsNo"] = this.emsNo;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["GoodFlag"] = this.goodFlag;
        data["Hscode"] = this.hscode;
        data["RemainQty"] = this.remainQty;
        data["RemainAmount"] = this.remainAmount;
        data["ActlRemainQty"] = this.actlRemainQty;
        data["ActlRemainAmount"] = this.actlRemainAmount;
        data["CsmTotalQty"] = this.csmTotalQty;
        data["CsmTotalAmt"] = this.csmTotalAmt;
        data["ImpOrExpTotalQty"] = this.impOrExpTotalQty;
        data["SdinQty"] = this.sdinQty;
        data["SdinTotalAmt"] = this.sdinTotalAmt;
        data["EndprdRetnExchExpQty"] = this.endprdRetnExchExpQty;
        data["EndprdRetnExchImpQty"] = this.endprdRetnExchImpQty;
        data["LfmtImprQty"] = this.lfmtImprQty;
        data["LfmtImprTotalAmt"] = this.lfmtImprTotalAmt;
        data["NOTE"] = this.nOTE;
        data["DprcsCrdwImpexpQty"] = this.dprcsCrdwImpexpQty;
        data["ModifyMark"] = this.modifyMark;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["ReexpQty"] = this.reexpQty;
        data["CreateUser"] = this.createUser;
        data["UpdateUser"] = this.updateUser;
        data["RemainMtpckTrfoutQty"] = this.remainMtpckTrfoutQty;
        data["MtpckEndprdDstryQty"] = this.mtpckEndprdDstryQty;
        data["LfmtDstryQty"] = this.lfmtDstryQty;
        data["VrfredQty"] = this.vrfredQty;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["VrfaddQty"] = this.vrfaddQty;
        data["TgblLossQty"] = this.tgblLossQty;
        data["IntgbLossQty"] = this.intgbLossQty;
        data["DsmlQty"] = this.dsmlQty;
        data["DclcusInvtAvgUprcAmt"] = this.dclcusInvtAvgUprcAmt;
        data["DsmlAmt"] = this.dsmlAmt;
        data["ImportName"] = this.importName;
        data["DsmlRate"] = this.dsmlRate;
        data["VclrPridInitQty"] = this.vclrPridInitQty;
        data["FstSpareMarkcd"] = this.fstSpareMarkcd;
        data["SpareAmt"] = this.spareAmt;
        data["SpareQty"] = this.spareQty;
        data["UNIT"] = this.uNIT;
        data["FirstQty"] = this.firstQty;
        data["TcycleBalQty"] = this.tcycleBalQty;
        data["AddTime"] = this.addTime ? this.addTime.toISOString() : <any>undefined;
        data["DsmlFlag"] = this.dsmlFlag;
        data["GName"] = this.gName;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenDcrImg {
    excelLineNum?: number | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    goodFlag?: string | undefined;
    hscode?: string | undefined;
    remainQty?: number | undefined;
    remainAmount?: number | undefined;
    actlRemainQty?: number | undefined;
    actlRemainAmount?: number | undefined;
    csmTotalQty?: number | undefined;
    csmTotalAmt?: number | undefined;
    impOrExpTotalQty?: number | undefined;
    sdinQty?: number | undefined;
    sdinTotalAmt?: number | undefined;
    endprdRetnExchExpQty?: number | undefined;
    endprdRetnExchImpQty?: number | undefined;
    lfmtImprQty?: string | undefined;
    lfmtImprTotalAmt?: string | undefined;
    nOTE?: string | undefined;
    dprcsCrdwImpexpQty?: number | undefined;
    modifyMark?: string | undefined;
    createDate?: Date | undefined;
    reexpQty?: number | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    remainMtpckTrfoutQty?: number | undefined;
    mtpckEndprdDstryQty?: number | undefined;
    lfmtDstryQty?: number | undefined;
    vrfredQty?: number | undefined;
    updateDate?: Date | undefined;
    vrfaddQty?: number | undefined;
    tgblLossQty?: number | undefined;
    intgbLossQty?: number | undefined;
    dsmlQty?: number | undefined;
    dclcusInvtAvgUprcAmt?: number | undefined;
    dsmlAmt?: number | undefined;
    importName?: string | undefined;
    dsmlRate?: number | undefined;
    vclrPridInitQty?: number | undefined;
    fstSpareMarkcd?: string | undefined;
    spareAmt?: number | undefined;
    spareQty?: number | undefined;
    uNIT?: string | undefined;
    firstQty?: number | undefined;
    tcycleBalQty?: number | undefined;
    addTime?: Date | undefined;
    dsmlFlag?: string | undefined;
    gName?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenDcrBill implements IReturnResultOfPageListOfEntGoldenDcrBill {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenDcrBill | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenDcrBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenDcrBill.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenDcrBill {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenDcrBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenDcrBill {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenDcrBill | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenDcrBill implements IPageListOfEntGoldenDcrBill {
    dataSource?: EntGoldenDcrBill[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenDcrBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenDcrBill.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenDcrBill {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenDcrBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenDcrBill {
    dataSource?: EntGoldenDcrBill[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenDcrBillImgexginnerExt implements IEntGoldenDcrBillImgexginnerExt {
    loginName?: string | undefined;
    flag?: string | undefined;
    listInner?: EntGoldenDcrBill[] | undefined;
    headId?: string | undefined;

    constructor(data?: IEntGoldenDcrBillImgexginnerExt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginName = data["LoginName"];
            this.flag = data["Flag"];
            if (Array.isArray(data["ListInner"])) {
                this.listInner = [] as any;
                for (let item of data["ListInner"])
                    this.listInner!.push(EntGoldenDcrBill.fromJS(item));
            }
            this.headId = data["HeadId"];
        }
    }

    static fromJS(data: any): EntGoldenDcrBillImgexginnerExt {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenDcrBillImgexginnerExt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginName"] = this.loginName;
        data["Flag"] = this.flag;
        if (Array.isArray(this.listInner)) {
            data["ListInner"] = [];
            for (let item of this.listInner)
                data["ListInner"].push(item.toJSON());
        }
        data["HeadId"] = this.headId;
        return data; 
    }
}

export interface IEntGoldenDcrBillImgexginnerExt {
    loginName?: string | undefined;
    flag?: string | undefined;
    listInner?: EntGoldenDcrBill[] | undefined;
    headId?: string | undefined;
}

export class ReturnResultOfPageListOfEntGoldenDcrImg implements IReturnResultOfPageListOfEntGoldenDcrImg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenDcrImg | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenDcrImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenDcrImg.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenDcrImg {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenDcrImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenDcrImg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenDcrImg | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenDcrImg implements IPageListOfEntGoldenDcrImg {
    dataSource?: EntGoldenDcrImg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenDcrImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenDcrImg.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenDcrImg {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenDcrImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenDcrImg {
    dataSource?: EntGoldenDcrImg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenDcrImgexginnerExt implements IEntGoldenDcrImgexginnerExt {
    loginName?: string | undefined;
    flag?: string | undefined;
    listInner?: EntGoldenDcrImg[] | undefined;
    headId?: string | undefined;

    constructor(data?: IEntGoldenDcrImgexginnerExt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginName = data["LoginName"];
            this.flag = data["Flag"];
            if (Array.isArray(data["ListInner"])) {
                this.listInner = [] as any;
                for (let item of data["ListInner"])
                    this.listInner!.push(EntGoldenDcrImg.fromJS(item));
            }
            this.headId = data["HeadId"];
        }
    }

    static fromJS(data: any): EntGoldenDcrImgexginnerExt {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenDcrImgexginnerExt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginName"] = this.loginName;
        data["Flag"] = this.flag;
        if (Array.isArray(this.listInner)) {
            data["ListInner"] = [];
            for (let item of this.listInner)
                data["ListInner"].push(item.toJSON());
        }
        data["HeadId"] = this.headId;
        return data; 
    }
}

export interface IEntGoldenDcrImgexginnerExt {
    loginName?: string | undefined;
    flag?: string | undefined;
    listInner?: EntGoldenDcrImg[] | undefined;
    headId?: string | undefined;
}

export class EntSysDept implements IEntSysDept {
    id?: number | undefined;
    deptCode?: string | undefined;
    deptName?: string | undefined;
    descr?: string | undefined;
    status?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    plant?: string | undefined;
    showSeqence?: number | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysDept) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.deptCode = data["DeptCode"];
            this.deptName = data["DeptName"];
            this.descr = data["Descr"];
            this.status = data["Status"];
            this.createBy = data["CreateBy"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.plant = data["Plant"];
            this.showSeqence = data["ShowSeqence"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysDept {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysDept();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["DeptCode"] = this.deptCode;
        data["DeptName"] = this.deptName;
        data["Descr"] = this.descr;
        data["Status"] = this.status;
        data["CreateBy"] = this.createBy;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["Plant"] = this.plant;
        data["ShowSeqence"] = this.showSeqence;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysDept {
    id?: number | undefined;
    deptCode?: string | undefined;
    deptName?: string | undefined;
    descr?: string | undefined;
    status?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    plant?: string | undefined;
    showSeqence?: number | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsPrice implements IEntGoldenNxbsPrice {
    hasPrice?: string | undefined;
    iD?: number | undefined;
    imgNo?: string | undefined;
    price?: number | undefined;
    orignPrice?: number | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    remark?: string | undefined;
    headId?: number | undefined;
    netWeight?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasPrice = data["HasPrice"];
            this.iD = data["ID"];
            this.imgNo = data["ImgNo"];
            this.price = data["Price"];
            this.orignPrice = data["OrignPrice"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.remark = data["Remark"];
            this.headId = data["HeadId"];
            this.netWeight = data["NetWeight"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsPrice {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HasPrice"] = this.hasPrice;
        data["ID"] = this.iD;
        data["ImgNo"] = this.imgNo;
        data["Price"] = this.price;
        data["OrignPrice"] = this.orignPrice;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["Remark"] = this.remark;
        data["HeadId"] = this.headId;
        data["NetWeight"] = this.netWeight;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsPrice {
    hasPrice?: string | undefined;
    iD?: number | undefined;
    imgNo?: string | undefined;
    price?: number | undefined;
    orignPrice?: number | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    remark?: string | undefined;
    headId?: number | undefined;
    netWeight?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsPrice implements IReturnResultOfPageListOfEntGoldenNxbsPrice {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsPrice | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsPrice.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsPrice {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsPrice {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsPrice | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsPrice implements IPageListOfEntGoldenNxbsPrice {
    dataSource?: EntGoldenNxbsPrice[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsPrice.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsPrice {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsPrice {
    dataSource?: EntGoldenNxbsPrice[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsImgCollect implements IEntGoldenNxbsImgCollect {
    hasPrice?: string | undefined;
    uNITCnName?: string | undefined;
    iD?: number | undefined;
    imgNo?: string | undefined;
    qTY?: number | undefined;
    headId?: number | undefined;
    hSCODE?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    uNIT?: string | undefined;
    leftQty?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    matchFlag?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsImgCollect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasPrice = data["HasPrice"];
            this.uNITCnName = data["UNITCnName"];
            this.iD = data["ID"];
            this.imgNo = data["ImgNo"];
            this.qTY = data["QTY"];
            this.headId = data["HeadId"];
            this.hSCODE = data["HSCODE"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.uNIT = data["UNIT"];
            this.leftQty = data["LeftQty"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.matchFlag = data["MatchFlag"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsImgCollect {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsImgCollect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HasPrice"] = this.hasPrice;
        data["UNITCnName"] = this.uNITCnName;
        data["ID"] = this.iD;
        data["ImgNo"] = this.imgNo;
        data["QTY"] = this.qTY;
        data["HeadId"] = this.headId;
        data["HSCODE"] = this.hSCODE;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["UNIT"] = this.uNIT;
        data["LeftQty"] = this.leftQty;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["MatchFlag"] = this.matchFlag;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsImgCollect {
    hasPrice?: string | undefined;
    uNITCnName?: string | undefined;
    iD?: number | undefined;
    imgNo?: string | undefined;
    qTY?: number | undefined;
    headId?: number | undefined;
    hSCODE?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    uNIT?: string | undefined;
    leftQty?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    matchFlag?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsEntryHead implements IEntGoldenNxbsEntryHead {
    dDateStart?: string | undefined;
    dDateEnd?: string | undefined;
    id?: number | undefined;
    emsNo?: string | undefined;
    entryId?: string | undefined;
    listNo?: string | undefined;
    tradeCo?: string | undefined;
    fobType?: string | undefined;
    tradeMode?: string | undefined;
    dDate?: string | undefined;
    agentCode?: string | undefined;
    tradeName?: string | undefined;
    trnasMode?: string | undefined;
    ieFlag?: string | undefined;
    gMark?: string | undefined;
    createTime?: Date | undefined;
    feeMark?: string | undefined;
    feeRate?: string | undefined;
    feeCurr?: string | undefined;
    insurMark?: string | undefined;
    insurRate?: string | undefined;
    insurCurr?: string | undefined;
    netWeight?: number | undefined;
    ieDate?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createUser?: string | undefined;
    headId?: number | undefined;
    billNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsEntryHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dDateStart = data["DDateStart"];
            this.dDateEnd = data["DDateEnd"];
            this.id = data["Id"];
            this.emsNo = data["EmsNo"];
            this.entryId = data["EntryId"];
            this.listNo = data["ListNo"];
            this.tradeCo = data["TradeCo"];
            this.fobType = data["FobType"];
            this.tradeMode = data["TradeMode"];
            this.dDate = data["DDate"];
            this.agentCode = data["AgentCode"];
            this.tradeName = data["TradeName"];
            this.trnasMode = data["TrnasMode"];
            this.ieFlag = data["IeFlag"];
            this.gMark = data["GMark"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.feeMark = data["FeeMark"];
            this.feeRate = data["FeeRate"];
            this.feeCurr = data["FeeCurr"];
            this.insurMark = data["InsurMark"];
            this.insurRate = data["InsurRate"];
            this.insurCurr = data["InsurCurr"];
            this.netWeight = data["NetWeight"];
            this.ieDate = data["IeDate"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.createUser = data["CreateUser"];
            this.headId = data["HeadId"];
            this.billNo = data["BillNo"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsEntryHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsEntryHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DDateStart"] = this.dDateStart;
        data["DDateEnd"] = this.dDateEnd;
        data["Id"] = this.id;
        data["EmsNo"] = this.emsNo;
        data["EntryId"] = this.entryId;
        data["ListNo"] = this.listNo;
        data["TradeCo"] = this.tradeCo;
        data["FobType"] = this.fobType;
        data["TradeMode"] = this.tradeMode;
        data["DDate"] = this.dDate;
        data["AgentCode"] = this.agentCode;
        data["TradeName"] = this.tradeName;
        data["TrnasMode"] = this.trnasMode;
        data["IeFlag"] = this.ieFlag;
        data["GMark"] = this.gMark;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["FeeMark"] = this.feeMark;
        data["FeeRate"] = this.feeRate;
        data["FeeCurr"] = this.feeCurr;
        data["InsurMark"] = this.insurMark;
        data["InsurRate"] = this.insurRate;
        data["InsurCurr"] = this.insurCurr;
        data["NetWeight"] = this.netWeight;
        data["IeDate"] = this.ieDate;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["CreateUser"] = this.createUser;
        data["HeadId"] = this.headId;
        data["BillNo"] = this.billNo;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsEntryHead {
    dDateStart?: string | undefined;
    dDateEnd?: string | undefined;
    id?: number | undefined;
    emsNo?: string | undefined;
    entryId?: string | undefined;
    listNo?: string | undefined;
    tradeCo?: string | undefined;
    fobType?: string | undefined;
    tradeMode?: string | undefined;
    dDate?: string | undefined;
    agentCode?: string | undefined;
    tradeName?: string | undefined;
    trnasMode?: string | undefined;
    ieFlag?: string | undefined;
    gMark?: string | undefined;
    createTime?: Date | undefined;
    feeMark?: string | undefined;
    feeRate?: string | undefined;
    feeCurr?: string | undefined;
    insurMark?: string | undefined;
    insurRate?: string | undefined;
    insurCurr?: string | undefined;
    netWeight?: number | undefined;
    ieDate?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createUser?: string | undefined;
    headId?: number | undefined;
    billNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsEntryHead implements IReturnResultOfPageListOfEntGoldenNxbsEntryHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsEntryHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsEntryHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsEntryHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsEntryHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsEntryHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsEntryHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsEntryHead | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsEntryHead implements IPageListOfEntGoldenNxbsEntryHead {
    dataSource?: EntGoldenNxbsEntryHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsEntryHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsEntryHead.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsEntryHead {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsEntryHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsEntryHead {
    dataSource?: EntGoldenNxbsEntryHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsMatch implements IEntGoldenNxbsMatch {
    queryCreateEnd?: Date | undefined;
    emsNo?: string | undefined;
    registerNum?: string | undefined;
    customerCode?: string | undefined;
    iD?: number | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gModel?: string | undefined;
    gName?: string | undefined;
    hSCODE?: string | undefined;
    originQty?: number | undefined;
    leftQty?: number | undefined;
    headId?: number | undefined;
    entryId?: string | undefined;
    qTY?: number | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    qty1?: number | undefined;
    unit1?: string | undefined;
    qty2?: number | undefined;
    unit2?: string | undefined;
    cURR?: string | undefined;
    cOUNTRY?: string | undefined;
    versionNo?: string | undefined;
    matchPrice?: number | undefined;
    tradeMode?: string | undefined;
    dDate?: string | undefined;
    nxPrice?: number | undefined;
    invoiceNo?: string | undefined;
    nxTotal?: number | undefined;
    customTax?: number | undefined;
    addTax?: number | undefined;
    seqNo?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    originGNo?: number | undefined;
    qty1Price?: number | undefined;
    entryQty?: number | undefined;
    originEntryId?: string | undefined;
    fobType?: string | undefined;
    originCurr?: string | undefined;
    originPrice?: number | undefined;
    originUsdPrice?: number | undefined;
    originUsdcifPrice?: number | undefined;
    originTotal?: number | undefined;
    originUsdTotal?: number | undefined;
    originUsdcifTotal?: number | undefined;
    netCoefficient?: number | undefined;
    netWeight?: number | undefined;
    originCopNo?: string | undefined;
    tradeTotal?: number | undefined;
    matchFlag?: string | undefined;
    imgGuid?: number | undefined;
    entryGuid?: number | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    tgEntryGuid?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.queryCreateEnd = data["QueryCreateEnd"] ? new Date(data["QueryCreateEnd"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.registerNum = data["RegisterNum"];
            this.customerCode = data["CustomerCode"];
            this.iD = data["ID"];
            this.gNo = data["GNo"];
            this.copGNo = data["CopGNo"];
            this.gModel = data["GModel"];
            this.gName = data["GName"];
            this.hSCODE = data["HSCODE"];
            this.originQty = data["OriginQty"];
            this.leftQty = data["LeftQty"];
            this.headId = data["HeadId"];
            this.entryId = data["EntryId"];
            this.qTY = data["QTY"];
            this.uNIT = data["UNIT"];
            this.erpUnit = data["ErpUnit"];
            this.qty1 = data["Qty1"];
            this.unit1 = data["Unit1"];
            this.qty2 = data["Qty2"];
            this.unit2 = data["Unit2"];
            this.cURR = data["CURR"];
            this.cOUNTRY = data["COUNTRY"];
            this.versionNo = data["VersionNo"];
            this.matchPrice = data["MatchPrice"];
            this.tradeMode = data["TradeMode"];
            this.dDate = data["DDate"];
            this.nxPrice = data["NxPrice"];
            this.invoiceNo = data["InvoiceNo"];
            this.nxTotal = data["NxTotal"];
            this.customTax = data["CustomTax"];
            this.addTax = data["AddTax"];
            this.seqNo = data["SeqNo"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.originGNo = data["OriginGNo"];
            this.qty1Price = data["Qty1Price"];
            this.entryQty = data["EntryQty"];
            this.originEntryId = data["OriginEntryId"];
            this.fobType = data["FobType"];
            this.originCurr = data["OriginCurr"];
            this.originPrice = data["OriginPrice"];
            this.originUsdPrice = data["OriginUsdPrice"];
            this.originUsdcifPrice = data["OriginUsdcifPrice"];
            this.originTotal = data["OriginTotal"];
            this.originUsdTotal = data["OriginUsdTotal"];
            this.originUsdcifTotal = data["OriginUsdcifTotal"];
            this.netCoefficient = data["NetCoefficient"];
            this.netWeight = data["NetWeight"];
            this.originCopNo = data["OriginCopNo"];
            this.tradeTotal = data["TradeTotal"];
            this.matchFlag = data["MatchFlag"];
            this.imgGuid = data["ImgGuid"];
            this.entryGuid = data["EntryGuid"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.tgEntryGuid = data["TgEntryGuid"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsMatch {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsMatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["QueryCreateEnd"] = this.queryCreateEnd ? this.queryCreateEnd.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["RegisterNum"] = this.registerNum;
        data["CustomerCode"] = this.customerCode;
        data["ID"] = this.iD;
        data["GNo"] = this.gNo;
        data["CopGNo"] = this.copGNo;
        data["GModel"] = this.gModel;
        data["GName"] = this.gName;
        data["HSCODE"] = this.hSCODE;
        data["OriginQty"] = this.originQty;
        data["LeftQty"] = this.leftQty;
        data["HeadId"] = this.headId;
        data["EntryId"] = this.entryId;
        data["QTY"] = this.qTY;
        data["UNIT"] = this.uNIT;
        data["ErpUnit"] = this.erpUnit;
        data["Qty1"] = this.qty1;
        data["Unit1"] = this.unit1;
        data["Qty2"] = this.qty2;
        data["Unit2"] = this.unit2;
        data["CURR"] = this.cURR;
        data["COUNTRY"] = this.cOUNTRY;
        data["VersionNo"] = this.versionNo;
        data["MatchPrice"] = this.matchPrice;
        data["TradeMode"] = this.tradeMode;
        data["DDate"] = this.dDate;
        data["NxPrice"] = this.nxPrice;
        data["InvoiceNo"] = this.invoiceNo;
        data["NxTotal"] = this.nxTotal;
        data["CustomTax"] = this.customTax;
        data["AddTax"] = this.addTax;
        data["SeqNo"] = this.seqNo;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["OriginGNo"] = this.originGNo;
        data["Qty1Price"] = this.qty1Price;
        data["EntryQty"] = this.entryQty;
        data["OriginEntryId"] = this.originEntryId;
        data["FobType"] = this.fobType;
        data["OriginCurr"] = this.originCurr;
        data["OriginPrice"] = this.originPrice;
        data["OriginUsdPrice"] = this.originUsdPrice;
        data["OriginUsdcifPrice"] = this.originUsdcifPrice;
        data["OriginTotal"] = this.originTotal;
        data["OriginUsdTotal"] = this.originUsdTotal;
        data["OriginUsdcifTotal"] = this.originUsdcifTotal;
        data["NetCoefficient"] = this.netCoefficient;
        data["NetWeight"] = this.netWeight;
        data["OriginCopNo"] = this.originCopNo;
        data["TradeTotal"] = this.tradeTotal;
        data["MatchFlag"] = this.matchFlag;
        data["ImgGuid"] = this.imgGuid;
        data["EntryGuid"] = this.entryGuid;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["TgEntryGuid"] = this.tgEntryGuid;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsMatch {
    queryCreateEnd?: Date | undefined;
    emsNo?: string | undefined;
    registerNum?: string | undefined;
    customerCode?: string | undefined;
    iD?: number | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gModel?: string | undefined;
    gName?: string | undefined;
    hSCODE?: string | undefined;
    originQty?: number | undefined;
    leftQty?: number | undefined;
    headId?: number | undefined;
    entryId?: string | undefined;
    qTY?: number | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    qty1?: number | undefined;
    unit1?: string | undefined;
    qty2?: number | undefined;
    unit2?: string | undefined;
    cURR?: string | undefined;
    cOUNTRY?: string | undefined;
    versionNo?: string | undefined;
    matchPrice?: number | undefined;
    tradeMode?: string | undefined;
    dDate?: string | undefined;
    nxPrice?: number | undefined;
    invoiceNo?: string | undefined;
    nxTotal?: number | undefined;
    customTax?: number | undefined;
    addTax?: number | undefined;
    seqNo?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    originGNo?: number | undefined;
    qty1Price?: number | undefined;
    entryQty?: number | undefined;
    originEntryId?: string | undefined;
    fobType?: string | undefined;
    originCurr?: string | undefined;
    originPrice?: number | undefined;
    originUsdPrice?: number | undefined;
    originUsdcifPrice?: number | undefined;
    originTotal?: number | undefined;
    originUsdTotal?: number | undefined;
    originUsdcifTotal?: number | undefined;
    netCoefficient?: number | undefined;
    netWeight?: number | undefined;
    originCopNo?: string | undefined;
    tradeTotal?: number | undefined;
    matchFlag?: string | undefined;
    imgGuid?: number | undefined;
    entryGuid?: number | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    tgEntryGuid?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsHead implements IReturnResultOfPageListOfEntGoldenNxbsHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsHead | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsHead implements IPageListOfEntGoldenNxbsHead {
    dataSource?: EntGoldenNxbsHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsHead.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsHead {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsHead {
    dataSource?: EntGoldenNxbsHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsHead implements IEntGoldenNxbsHead {
    imgs?: EntGoldenNxbsImg[] | undefined;
    exgs?: EntGoldenNxbsExg[] | undefined;
    boms?: EntGoldenNxbsBom[] | undefined;
    imgCollects?: EntGoldenNxbsImgCollect[] | undefined;
    nxbsMactchTypeStr?: string | undefined;
    fobTypeStr?: string | undefined;
    priceMatchTypeStr?: string | undefined;
    matchStateStr?: string | undefined;
    iD?: number | undefined;
    registrationNum?: string | undefined;
    registrationDate?: string | undefined;
    entryMatchType?: string | undefined;
    fobType?: string | undefined;
    priceMatchType?: string | undefined;
    cURR?: string | undefined;
    entryFrom?: string | undefined;
    entryEnd?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    emsNo?: string | undefined;
    insurFee?: number | undefined;
    matchState?: string | undefined;
    transFee?: number | undefined;
    matchDate?: Date | undefined;
    netWt?: number | undefined;
    isCreateInvoice?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    billNo?: string | undefined;
    billState?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["Imgs"])) {
                this.imgs = [] as any;
                for (let item of data["Imgs"])
                    this.imgs!.push(EntGoldenNxbsImg.fromJS(item));
            }
            if (Array.isArray(data["Exgs"])) {
                this.exgs = [] as any;
                for (let item of data["Exgs"])
                    this.exgs!.push(EntGoldenNxbsExg.fromJS(item));
            }
            if (Array.isArray(data["Boms"])) {
                this.boms = [] as any;
                for (let item of data["Boms"])
                    this.boms!.push(EntGoldenNxbsBom.fromJS(item));
            }
            if (Array.isArray(data["ImgCollects"])) {
                this.imgCollects = [] as any;
                for (let item of data["ImgCollects"])
                    this.imgCollects!.push(EntGoldenNxbsImgCollect.fromJS(item));
            }
            this.nxbsMactchTypeStr = data["NxbsMactchTypeStr"];
            this.fobTypeStr = data["FobTypeStr"];
            this.priceMatchTypeStr = data["PriceMatchTypeStr"];
            this.matchStateStr = data["MatchStateStr"];
            this.iD = data["ID"];
            this.registrationNum = data["RegistrationNum"];
            this.registrationDate = data["RegistrationDate"];
            this.entryMatchType = data["EntryMatchType"];
            this.fobType = data["FobType"];
            this.priceMatchType = data["PriceMatchType"];
            this.cURR = data["CURR"];
            this.entryFrom = data["EntryFrom"];
            this.entryEnd = data["EntryEnd"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.emsNo = data["EmsNo"];
            this.insurFee = data["InsurFee"];
            this.matchState = data["MatchState"];
            this.transFee = data["TransFee"];
            this.matchDate = data["MatchDate"] ? new Date(data["MatchDate"].toString()) : <any>undefined;
            this.netWt = data["NetWt"];
            this.isCreateInvoice = data["IsCreateInvoice"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.billNo = data["BillNo"];
            this.billState = data["BillState"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.imgs)) {
            data["Imgs"] = [];
            for (let item of this.imgs)
                data["Imgs"].push(item.toJSON());
        }
        if (Array.isArray(this.exgs)) {
            data["Exgs"] = [];
            for (let item of this.exgs)
                data["Exgs"].push(item.toJSON());
        }
        if (Array.isArray(this.boms)) {
            data["Boms"] = [];
            for (let item of this.boms)
                data["Boms"].push(item.toJSON());
        }
        if (Array.isArray(this.imgCollects)) {
            data["ImgCollects"] = [];
            for (let item of this.imgCollects)
                data["ImgCollects"].push(item.toJSON());
        }
        data["NxbsMactchTypeStr"] = this.nxbsMactchTypeStr;
        data["FobTypeStr"] = this.fobTypeStr;
        data["PriceMatchTypeStr"] = this.priceMatchTypeStr;
        data["MatchStateStr"] = this.matchStateStr;
        data["ID"] = this.iD;
        data["RegistrationNum"] = this.registrationNum;
        data["RegistrationDate"] = this.registrationDate;
        data["EntryMatchType"] = this.entryMatchType;
        data["FobType"] = this.fobType;
        data["PriceMatchType"] = this.priceMatchType;
        data["CURR"] = this.cURR;
        data["EntryFrom"] = this.entryFrom;
        data["EntryEnd"] = this.entryEnd;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["EmsNo"] = this.emsNo;
        data["InsurFee"] = this.insurFee;
        data["MatchState"] = this.matchState;
        data["TransFee"] = this.transFee;
        data["MatchDate"] = this.matchDate ? this.matchDate.toISOString() : <any>undefined;
        data["NetWt"] = this.netWt;
        data["IsCreateInvoice"] = this.isCreateInvoice;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["BillNo"] = this.billNo;
        data["BillState"] = this.billState;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsHead {
    imgs?: EntGoldenNxbsImg[] | undefined;
    exgs?: EntGoldenNxbsExg[] | undefined;
    boms?: EntGoldenNxbsBom[] | undefined;
    imgCollects?: EntGoldenNxbsImgCollect[] | undefined;
    nxbsMactchTypeStr?: string | undefined;
    fobTypeStr?: string | undefined;
    priceMatchTypeStr?: string | undefined;
    matchStateStr?: string | undefined;
    iD?: number | undefined;
    registrationNum?: string | undefined;
    registrationDate?: string | undefined;
    entryMatchType?: string | undefined;
    fobType?: string | undefined;
    priceMatchType?: string | undefined;
    cURR?: string | undefined;
    entryFrom?: string | undefined;
    entryEnd?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    emsNo?: string | undefined;
    insurFee?: number | undefined;
    matchState?: string | undefined;
    transFee?: number | undefined;
    matchDate?: Date | undefined;
    netWt?: number | undefined;
    isCreateInvoice?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    billNo?: string | undefined;
    billState?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsImg implements IEntGoldenNxbsImg {
    iD?: number | undefined;
    headId?: number | undefined;
    copGNo?: string | undefined;
    qTY?: number | undefined;
    hSCODE?: string | undefined;
    erpUnit?: string | undefined;
    rEASON?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    goodsFlag?: string | undefined;
    importName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.copGNo = data["CopGNo"];
            this.qTY = data["QTY"];
            this.hSCODE = data["HSCODE"];
            this.erpUnit = data["ErpUnit"];
            this.rEASON = data["REASON"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.goodsFlag = data["GoodsFlag"];
            this.importName = data["ImportName"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsImg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["CopGNo"] = this.copGNo;
        data["QTY"] = this.qTY;
        data["HSCODE"] = this.hSCODE;
        data["ErpUnit"] = this.erpUnit;
        data["REASON"] = this.rEASON;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["GoodsFlag"] = this.goodsFlag;
        data["ImportName"] = this.importName;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsImg {
    iD?: number | undefined;
    headId?: number | undefined;
    copGNo?: string | undefined;
    qTY?: number | undefined;
    hSCODE?: string | undefined;
    erpUnit?: string | undefined;
    rEASON?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    goodsFlag?: string | undefined;
    importName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsExg implements IEntGoldenNxbsExg {
    iD?: number | undefined;
    headId?: number | undefined;
    copGNo?: string | undefined;
    qTY?: number | undefined;
    beginDate?: string | undefined;
    hSCODE?: string | undefined;
    erpUnit?: string | undefined;
    rEASON?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    goodsFlag?: string | undefined;
    importName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsExg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.copGNo = data["CopGNo"];
            this.qTY = data["QTY"];
            this.beginDate = data["BeginDate"];
            this.hSCODE = data["HSCODE"];
            this.erpUnit = data["ErpUnit"];
            this.rEASON = data["REASON"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.goodsFlag = data["GoodsFlag"];
            this.importName = data["ImportName"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsExg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsExg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["CopGNo"] = this.copGNo;
        data["QTY"] = this.qTY;
        data["BeginDate"] = this.beginDate;
        data["HSCODE"] = this.hSCODE;
        data["ErpUnit"] = this.erpUnit;
        data["REASON"] = this.rEASON;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["GoodsFlag"] = this.goodsFlag;
        data["ImportName"] = this.importName;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsExg {
    iD?: number | undefined;
    headId?: number | undefined;
    copGNo?: string | undefined;
    qTY?: number | undefined;
    beginDate?: string | undefined;
    hSCODE?: string | undefined;
    erpUnit?: string | undefined;
    rEASON?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    goodsFlag?: string | undefined;
    importName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsBom implements IEntGoldenNxbsBom {
    iD?: number | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    beginDate?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    decCm?: number | undefined;
    otherCm?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    exgGName?: string | undefined;
    headId?: number | undefined;
    importName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.exgNo = data["ExgNo"];
            this.imgNo = data["ImgNo"];
            this.beginDate = data["BeginDate"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.decCm = data["DecCm"];
            this.otherCm = data["OtherCm"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.exgGName = data["ExgGName"];
            this.headId = data["HeadId"];
            this.importName = data["ImportName"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsBom {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["ExgNo"] = this.exgNo;
        data["ImgNo"] = this.imgNo;
        data["BeginDate"] = this.beginDate;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["DecCm"] = this.decCm;
        data["OtherCm"] = this.otherCm;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["ExgGName"] = this.exgGName;
        data["HeadId"] = this.headId;
        data["ImportName"] = this.importName;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsBom {
    iD?: number | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    beginDate?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    decCm?: number | undefined;
    otherCm?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    exgGName?: string | undefined;
    headId?: number | undefined;
    importName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsExg implements IReturnResultOfPageListOfEntGoldenNxbsExg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsExg | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsExg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsExg.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsExg {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsExg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsExg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsExg | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsExg implements IPageListOfEntGoldenNxbsExg {
    dataSource?: EntGoldenNxbsExg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsExg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsExg.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsExg {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsExg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsExg {
    dataSource?: EntGoldenNxbsExg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsImg implements IReturnResultOfPageListOfEntGoldenNxbsImg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsImg | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsImg.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsImg {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsImg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsImg | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsImg implements IPageListOfEntGoldenNxbsImg {
    dataSource?: EntGoldenNxbsImg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsImg.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsImg {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsImg {
    dataSource?: EntGoldenNxbsImg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsBom implements IReturnResultOfPageListOfEntGoldenNxbsBom {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsBom | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsBom.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsBom {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsBom {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsBom | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsBom implements IPageListOfEntGoldenNxbsBom {
    dataSource?: EntGoldenNxbsBom[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsBom.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsBom {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsBom {
    dataSource?: EntGoldenNxbsBom[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsImgCollect implements IReturnResultOfPageListOfEntGoldenNxbsImgCollect {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsImgCollect | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsImgCollect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsImgCollect.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsImgCollect {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsImgCollect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsImgCollect {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsImgCollect | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsImgCollect implements IPageListOfEntGoldenNxbsImgCollect {
    dataSource?: EntGoldenNxbsImgCollect[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsImgCollect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsImgCollect.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsImgCollect {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsImgCollect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsImgCollect {
    dataSource?: EntGoldenNxbsImgCollect[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsInvoiceHead implements IEntGoldenNxbsInvoiceHead {
    registrationNum?: string | undefined;
    matchState?: string | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    id?: number | undefined;
    entryId?: string | undefined;
    invoiceNo?: string | undefined;
    orderNo?: string | undefined;
    ieFlag?: string | undefined;
    emsNo?: string | undefined;
    nxFlag?: string | undefined;
    netWt?: number | undefined;
    grossWt?: number | undefined;
    dOZEN?: string | undefined;
    packageType?: string | undefined;
    tradeTotal?: number | undefined;
    cURR?: string | undefined;
    fobType?: string | undefined;
    customTax?: number | undefined;
    addTax?: number | undefined;
    payAddTax?: number | undefined;
    transMode?: string | undefined;
    inDate?: string | undefined;
    dataCenterId?: string | undefined;
    payCustomTax?: number | undefined;
    customTaxInterest?: number | undefined;
    addTaxInterest?: number | undefined;
    agentCode?: string | undefined;
    agentCredit?: string | undefined;
    agentName?: string | undefined;
    tradeMode?: string | undefined;
    dDate?: string | undefined;
    hxRelationNo?: string | undefined;
    easeInterest?: string | undefined;
    tradeCode?: string | undefined;
    tradeCredit?: string | undefined;
    tradeName?: string | undefined;
    receiveCode?: string | undefined;
    receiveCredit?: string | undefined;
    receiveName?: string | undefined;
    headId?: number | undefined;
    sendCustomDate?: Date | undefined;
    sendCustomFlag?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsInvoiceHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.registrationNum = data["RegistrationNum"];
            this.matchState = data["MatchState"];
            this.copGNo = data["CopGNo"];
            this.gName = data["GName"];
            this.id = data["Id"];
            this.entryId = data["EntryId"];
            this.invoiceNo = data["InvoiceNo"];
            this.orderNo = data["OrderNo"];
            this.ieFlag = data["IeFlag"];
            this.emsNo = data["EmsNo"];
            this.nxFlag = data["NxFlag"];
            this.netWt = data["NetWt"];
            this.grossWt = data["GrossWt"];
            this.dOZEN = data["DOZEN"];
            this.packageType = data["PackageType"];
            this.tradeTotal = data["TradeTotal"];
            this.cURR = data["CURR"];
            this.fobType = data["FobType"];
            this.customTax = data["CustomTax"];
            this.addTax = data["AddTax"];
            this.payAddTax = data["PayAddTax"];
            this.transMode = data["TransMode"];
            this.inDate = data["InDate"];
            this.dataCenterId = data["DataCenterId"];
            this.payCustomTax = data["PayCustomTax"];
            this.customTaxInterest = data["CustomTaxInterest"];
            this.addTaxInterest = data["AddTaxInterest"];
            this.agentCode = data["AgentCode"];
            this.agentCredit = data["AgentCredit"];
            this.agentName = data["AgentName"];
            this.tradeMode = data["TradeMode"];
            this.dDate = data["DDate"];
            this.hxRelationNo = data["HxRelationNo"];
            this.easeInterest = data["EaseInterest"];
            this.tradeCode = data["TradeCode"];
            this.tradeCredit = data["TradeCredit"];
            this.tradeName = data["TradeName"];
            this.receiveCode = data["ReceiveCode"];
            this.receiveCredit = data["ReceiveCredit"];
            this.receiveName = data["ReceiveName"];
            this.headId = data["HeadId"];
            this.sendCustomDate = data["SendCustomDate"] ? new Date(data["SendCustomDate"].toString()) : <any>undefined;
            this.sendCustomFlag = data["SendCustomFlag"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsInvoiceHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsInvoiceHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RegistrationNum"] = this.registrationNum;
        data["MatchState"] = this.matchState;
        data["CopGNo"] = this.copGNo;
        data["GName"] = this.gName;
        data["Id"] = this.id;
        data["EntryId"] = this.entryId;
        data["InvoiceNo"] = this.invoiceNo;
        data["OrderNo"] = this.orderNo;
        data["IeFlag"] = this.ieFlag;
        data["EmsNo"] = this.emsNo;
        data["NxFlag"] = this.nxFlag;
        data["NetWt"] = this.netWt;
        data["GrossWt"] = this.grossWt;
        data["DOZEN"] = this.dOZEN;
        data["PackageType"] = this.packageType;
        data["TradeTotal"] = this.tradeTotal;
        data["CURR"] = this.cURR;
        data["FobType"] = this.fobType;
        data["CustomTax"] = this.customTax;
        data["AddTax"] = this.addTax;
        data["PayAddTax"] = this.payAddTax;
        data["TransMode"] = this.transMode;
        data["InDate"] = this.inDate;
        data["DataCenterId"] = this.dataCenterId;
        data["PayCustomTax"] = this.payCustomTax;
        data["CustomTaxInterest"] = this.customTaxInterest;
        data["AddTaxInterest"] = this.addTaxInterest;
        data["AgentCode"] = this.agentCode;
        data["AgentCredit"] = this.agentCredit;
        data["AgentName"] = this.agentName;
        data["TradeMode"] = this.tradeMode;
        data["DDate"] = this.dDate;
        data["HxRelationNo"] = this.hxRelationNo;
        data["EaseInterest"] = this.easeInterest;
        data["TradeCode"] = this.tradeCode;
        data["TradeCredit"] = this.tradeCredit;
        data["TradeName"] = this.tradeName;
        data["ReceiveCode"] = this.receiveCode;
        data["ReceiveCredit"] = this.receiveCredit;
        data["ReceiveName"] = this.receiveName;
        data["HeadId"] = this.headId;
        data["SendCustomDate"] = this.sendCustomDate ? this.sendCustomDate.toISOString() : <any>undefined;
        data["SendCustomFlag"] = this.sendCustomFlag;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsInvoiceHead {
    registrationNum?: string | undefined;
    matchState?: string | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    id?: number | undefined;
    entryId?: string | undefined;
    invoiceNo?: string | undefined;
    orderNo?: string | undefined;
    ieFlag?: string | undefined;
    emsNo?: string | undefined;
    nxFlag?: string | undefined;
    netWt?: number | undefined;
    grossWt?: number | undefined;
    dOZEN?: string | undefined;
    packageType?: string | undefined;
    tradeTotal?: number | undefined;
    cURR?: string | undefined;
    fobType?: string | undefined;
    customTax?: number | undefined;
    addTax?: number | undefined;
    payAddTax?: number | undefined;
    transMode?: string | undefined;
    inDate?: string | undefined;
    dataCenterId?: string | undefined;
    payCustomTax?: number | undefined;
    customTaxInterest?: number | undefined;
    addTaxInterest?: number | undefined;
    agentCode?: string | undefined;
    agentCredit?: string | undefined;
    agentName?: string | undefined;
    tradeMode?: string | undefined;
    dDate?: string | undefined;
    hxRelationNo?: string | undefined;
    easeInterest?: string | undefined;
    tradeCode?: string | undefined;
    tradeCredit?: string | undefined;
    tradeName?: string | undefined;
    receiveCode?: string | undefined;
    receiveCredit?: string | undefined;
    receiveName?: string | undefined;
    headId?: number | undefined;
    sendCustomDate?: Date | undefined;
    sendCustomFlag?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfEntGoldenNxbsInvoiceHead implements IReturnResultOfEntGoldenNxbsInvoiceHead {
    success?: boolean | undefined;
    data?: EntGoldenNxbsInvoiceHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntGoldenNxbsInvoiceHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntGoldenNxbsInvoiceHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntGoldenNxbsInvoiceHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntGoldenNxbsInvoiceHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntGoldenNxbsInvoiceHead {
    success?: boolean | undefined;
    data?: EntGoldenNxbsInvoiceHead | undefined;
    messge?: string | undefined;
}

export class EntGoldenNxbsConvert implements IEntGoldenNxbsConvert {
    iD?: number | undefined;
    exgNo?: string | undefined;
    qTY?: number | undefined;
    beginDate?: string | undefined;
    decCm?: number | undefined;
    imgNo?: string | undefined;
    totalCm?: number | undefined;
    gNo?: number | undefined;
    headId?: number | undefined;
    exgId?: number | undefined;
    createTime?: Date | undefined;
    goodsFlag?: string | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsConvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.exgNo = data["ExgNo"];
            this.qTY = data["QTY"];
            this.beginDate = data["BeginDate"];
            this.decCm = data["DecCm"];
            this.imgNo = data["ImgNo"];
            this.totalCm = data["TotalCm"];
            this.gNo = data["GNo"];
            this.headId = data["HeadId"];
            this.exgId = data["ExgId"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.goodsFlag = data["GoodsFlag"];
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsConvert {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsConvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["ExgNo"] = this.exgNo;
        data["QTY"] = this.qTY;
        data["BeginDate"] = this.beginDate;
        data["DecCm"] = this.decCm;
        data["ImgNo"] = this.imgNo;
        data["TotalCm"] = this.totalCm;
        data["GNo"] = this.gNo;
        data["HeadId"] = this.headId;
        data["ExgId"] = this.exgId;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["GoodsFlag"] = this.goodsFlag;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsConvert {
    iD?: number | undefined;
    exgNo?: string | undefined;
    qTY?: number | undefined;
    beginDate?: string | undefined;
    decCm?: number | undefined;
    imgNo?: string | undefined;
    totalCm?: number | undefined;
    gNo?: number | undefined;
    headId?: number | undefined;
    exgId?: number | undefined;
    createTime?: Date | undefined;
    goodsFlag?: string | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsConvert implements IReturnResultOfPageListOfEntGoldenNxbsConvert {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsConvert | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsConvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsConvert.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsConvert {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsConvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsConvert {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsConvert | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsConvert implements IPageListOfEntGoldenNxbsConvert {
    dataSource?: EntGoldenNxbsConvert[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsConvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsConvert.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsConvert {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsConvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsConvert {
    dataSource?: EntGoldenNxbsConvert[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenNxbsGnoCollect implements IEntGoldenNxbsGnoCollect {
    id?: number | undefined;
    qTY?: number | undefined;
    headId?: number | undefined;
    hSCODE?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    cURR?: string | undefined;
    uNIT?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenNxbsGnoCollect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.qTY = data["QTY"];
            this.headId = data["HeadId"];
            this.hSCODE = data["HSCODE"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.cURR = data["CURR"];
            this.uNIT = data["UNIT"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenNxbsGnoCollect {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenNxbsGnoCollect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["QTY"] = this.qTY;
        data["HeadId"] = this.headId;
        data["HSCODE"] = this.hSCODE;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["CURR"] = this.cURR;
        data["UNIT"] = this.uNIT;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenNxbsGnoCollect {
    id?: number | undefined;
    qTY?: number | undefined;
    headId?: number | undefined;
    hSCODE?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    cURR?: string | undefined;
    uNIT?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenNxbsGnoCollect implements IReturnResultOfPageListOfEntGoldenNxbsGnoCollect {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsGnoCollect | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenNxbsGnoCollect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenNxbsGnoCollect.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenNxbsGnoCollect {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenNxbsGnoCollect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenNxbsGnoCollect {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenNxbsGnoCollect | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenNxbsGnoCollect implements IPageListOfEntGoldenNxbsGnoCollect {
    dataSource?: EntGoldenNxbsGnoCollect[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenNxbsGnoCollect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenNxbsGnoCollect.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenNxbsGnoCollect {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenNxbsGnoCollect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenNxbsGnoCollect {
    dataSource?: EntGoldenNxbsGnoCollect[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntNxbsHeadApiDto implements IEntNxbsHeadApiDto {
    ids?: number[] | undefined;
    userName?: string | undefined;

    constructor(data?: IEntNxbsHeadApiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["Ids"])) {
                this.ids = [] as any;
                for (let item of data["Ids"])
                    this.ids!.push(item);
            }
            this.userName = data["UserName"];
        }
    }

    static fromJS(data: any): EntNxbsHeadApiDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntNxbsHeadApiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["Ids"] = [];
            for (let item of this.ids)
                data["Ids"].push(item);
        }
        data["UserName"] = this.userName;
        return data; 
    }
}

export interface IEntNxbsHeadApiDto {
    ids?: number[] | undefined;
    userName?: string | undefined;
}

export class EntGoldenOrgHead implements IEntGoldenOrgHead {
    inputDateTo?: Date | undefined;
    iD?: number | undefined;
    emsId?: string | undefined;
    emsNo?: string | undefined;
    preEmsNo?: string | undefined;
    copEmsNo?: string | undefined;
    tradeCode?: string | undefined;
    tradeName?: string | undefined;
    tradeSocialCreditCode?: string | undefined;
    houseNo?: string | undefined;
    ownerCode?: string | undefined;
    ownerSocialCreditCode?: string | undefined;
    ownerName?: string | undefined;
    declareCode?: string | undefined;
    declareName?: string | undefined;
    cUSTOM?: string | undefined;
    customCn?: string | undefined;
    districtCode?: number | undefined;
    aDDRESS?: string | undefined;
    pHONE?: string | undefined;
    emsType?: string | undefined;
    emsStatus?: string | undefined;
    declareStatus?: string | undefined;
    declareType?: string | undefined;
    investMode?: string | undefined;
    ownerType?: string | undefined;
    declareErType?: string | undefined;
    tradeMode?: number | undefined;
    imgAmount?: number | undefined;
    exgAmount?: number | undefined;
    imgWeight?: number | undefined;
    exgWeight?: number | undefined;
    imgItems?: number | undefined;
    exgItems?: number | undefined;
    investAmount?: number | undefined;
    noteAmount?: number | undefined;
    noteQty?: number | undefined;
    emsApprNo?: string | undefined;
    licenseNo?: string | undefined;
    lastEmsNo?: string | undefined;
    corrEmsNo?: string | undefined;
    contrNo?: string | undefined;
    idCard?: string | undefined;
    idCardPwd?: string | undefined;
    inputEr?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    nOTE?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    inputDate?: Date | undefined;
    declareDate?: Date | undefined;
    declareTime?: Date | undefined;
    modifyTimes?: number | undefined;
    emsApprMark?: string | undefined;
    emsCertify?: string | undefined;
    largeTurnAmount?: number | undefined;
    productRatio?: number | undefined;
    modifyMark?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    fileName?: string | undefined;
    currentEffective?: number | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    recordContent?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    inputCreditCode?: string | undefined;
    seqNo?: string | undefined;
    vclrPridVal?: number | undefined;
    ucnsVernoCntrFlag?: string | undefined;
    vclrTypecd?: string | undefined;
    recordDate?: Date | undefined;
    updateRecordDate?: Date | undefined;
    hxDate?: Date | undefined;
    ucnsDclSegcd?: string | undefined;
    declareSocialCreditCode?: string | undefined;
    exeMarkcd?: string | undefined;
    maxImgAmount?: number | undefined;
    declareTypecn?: string | undefined;
    declareStatuscn?: string | undefined;
    emsTypecn?: string | undefined;
    modifyMarkcn?: string | undefined;
    ucnsDclSegcdcn?: string | undefined;
    exeMarkcdcn?: string | undefined;
    declareErTypecn?: string | undefined;
    checkFlag?: string | undefined;
    organizationCode?: string | undefined;
    usageTypeCd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inputDateTo = data["InputDateTo"] ? new Date(data["InputDateTo"].toString()) : <any>undefined;
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.preEmsNo = data["PreEmsNo"];
            this.copEmsNo = data["CopEmsNo"];
            this.tradeCode = data["TradeCode"];
            this.tradeName = data["TradeName"];
            this.tradeSocialCreditCode = data["TradeSocialCreditCode"];
            this.houseNo = data["HouseNo"];
            this.ownerCode = data["OwnerCode"];
            this.ownerSocialCreditCode = data["OwnerSocialCreditCode"];
            this.ownerName = data["OwnerName"];
            this.declareCode = data["DeclareCode"];
            this.declareName = data["DeclareName"];
            this.cUSTOM = data["CUSTOM"];
            this.customCn = data["CustomCn"];
            this.districtCode = data["DistrictCode"];
            this.aDDRESS = data["ADDRESS"];
            this.pHONE = data["PHONE"];
            this.emsType = data["EmsType"];
            this.emsStatus = data["EmsStatus"];
            this.declareStatus = data["DeclareStatus"];
            this.declareType = data["DeclareType"];
            this.investMode = data["InvestMode"];
            this.ownerType = data["OwnerType"];
            this.declareErType = data["DeclareErType"];
            this.tradeMode = data["TradeMode"];
            this.imgAmount = data["ImgAmount"];
            this.exgAmount = data["ExgAmount"];
            this.imgWeight = data["ImgWeight"];
            this.exgWeight = data["ExgWeight"];
            this.imgItems = data["ImgItems"];
            this.exgItems = data["ExgItems"];
            this.investAmount = data["InvestAmount"];
            this.noteAmount = data["NoteAmount"];
            this.noteQty = data["NoteQty"];
            this.emsApprNo = data["EmsApprNo"];
            this.licenseNo = data["LicenseNo"];
            this.lastEmsNo = data["LastEmsNo"];
            this.corrEmsNo = data["CorrEmsNo"];
            this.contrNo = data["ContrNo"];
            this.idCard = data["IdCard"];
            this.idCardPwd = data["IdCardPwd"];
            this.inputEr = data["InputEr"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.nOTE = data["NOTE"];
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.inputDate = data["InputDate"] ? new Date(data["InputDate"].toString()) : <any>undefined;
            this.declareDate = data["DeclareDate"] ? new Date(data["DeclareDate"].toString()) : <any>undefined;
            this.declareTime = data["DeclareTime"] ? new Date(data["DeclareTime"].toString()) : <any>undefined;
            this.modifyTimes = data["ModifyTimes"];
            this.emsApprMark = data["EmsApprMark"];
            this.emsCertify = data["EmsCertify"];
            this.largeTurnAmount = data["LargeTurnAmount"];
            this.productRatio = data["ProductRatio"];
            this.modifyMark = data["ModifyMark"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.fileName = data["FileName"];
            this.currentEffective = data["CurrentEffective"];
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.recordContent = data["RecordContent"];
            this.inputCode = data["InputCode"];
            this.inputName = data["InputName"];
            this.inputCreditCode = data["InputCreditCode"];
            this.seqNo = data["SeqNo"];
            this.vclrPridVal = data["VclrPridVal"];
            this.ucnsVernoCntrFlag = data["UcnsVernoCntrFlag"];
            this.vclrTypecd = data["VclrTypecd"];
            this.recordDate = data["RecordDate"] ? new Date(data["RecordDate"].toString()) : <any>undefined;
            this.updateRecordDate = data["UpdateRecordDate"] ? new Date(data["UpdateRecordDate"].toString()) : <any>undefined;
            this.hxDate = data["HxDate"] ? new Date(data["HxDate"].toString()) : <any>undefined;
            this.ucnsDclSegcd = data["UcnsDclSegcd"];
            this.declareSocialCreditCode = data["DeclareSocialCreditCode"];
            this.exeMarkcd = data["ExeMarkcd"];
            this.maxImgAmount = data["MaxImgAmount"];
            this.declareTypecn = data["DeclareTypecn"];
            this.declareStatuscn = data["DeclareStatuscn"];
            this.emsTypecn = data["EmsTypecn"];
            this.modifyMarkcn = data["ModifyMarkcn"];
            this.ucnsDclSegcdcn = data["UcnsDclSegcdcn"];
            this.exeMarkcdcn = data["ExeMarkcdcn"];
            this.declareErTypecn = data["DeclareErTypecn"];
            this.checkFlag = data["CheckFlag"];
            this.organizationCode = data["OrganizationCode"];
            this.usageTypeCd = data["UsageTypeCd"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InputDateTo"] = this.inputDateTo ? this.inputDateTo.toISOString() : <any>undefined;
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["PreEmsNo"] = this.preEmsNo;
        data["CopEmsNo"] = this.copEmsNo;
        data["TradeCode"] = this.tradeCode;
        data["TradeName"] = this.tradeName;
        data["TradeSocialCreditCode"] = this.tradeSocialCreditCode;
        data["HouseNo"] = this.houseNo;
        data["OwnerCode"] = this.ownerCode;
        data["OwnerSocialCreditCode"] = this.ownerSocialCreditCode;
        data["OwnerName"] = this.ownerName;
        data["DeclareCode"] = this.declareCode;
        data["DeclareName"] = this.declareName;
        data["CUSTOM"] = this.cUSTOM;
        data["CustomCn"] = this.customCn;
        data["DistrictCode"] = this.districtCode;
        data["ADDRESS"] = this.aDDRESS;
        data["PHONE"] = this.pHONE;
        data["EmsType"] = this.emsType;
        data["EmsStatus"] = this.emsStatus;
        data["DeclareStatus"] = this.declareStatus;
        data["DeclareType"] = this.declareType;
        data["InvestMode"] = this.investMode;
        data["OwnerType"] = this.ownerType;
        data["DeclareErType"] = this.declareErType;
        data["TradeMode"] = this.tradeMode;
        data["ImgAmount"] = this.imgAmount;
        data["ExgAmount"] = this.exgAmount;
        data["ImgWeight"] = this.imgWeight;
        data["ExgWeight"] = this.exgWeight;
        data["ImgItems"] = this.imgItems;
        data["ExgItems"] = this.exgItems;
        data["InvestAmount"] = this.investAmount;
        data["NoteAmount"] = this.noteAmount;
        data["NoteQty"] = this.noteQty;
        data["EmsApprNo"] = this.emsApprNo;
        data["LicenseNo"] = this.licenseNo;
        data["LastEmsNo"] = this.lastEmsNo;
        data["CorrEmsNo"] = this.corrEmsNo;
        data["ContrNo"] = this.contrNo;
        data["IdCard"] = this.idCard;
        data["IdCardPwd"] = this.idCardPwd;
        data["InputEr"] = this.inputEr;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["NOTE"] = this.nOTE;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["InputDate"] = this.inputDate ? this.inputDate.toISOString() : <any>undefined;
        data["DeclareDate"] = this.declareDate ? this.declareDate.toISOString() : <any>undefined;
        data["DeclareTime"] = this.declareTime ? this.declareTime.toISOString() : <any>undefined;
        data["ModifyTimes"] = this.modifyTimes;
        data["EmsApprMark"] = this.emsApprMark;
        data["EmsCertify"] = this.emsCertify;
        data["LargeTurnAmount"] = this.largeTurnAmount;
        data["ProductRatio"] = this.productRatio;
        data["ModifyMark"] = this.modifyMark;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["FileName"] = this.fileName;
        data["CurrentEffective"] = this.currentEffective;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["RecordContent"] = this.recordContent;
        data["InputCode"] = this.inputCode;
        data["InputName"] = this.inputName;
        data["InputCreditCode"] = this.inputCreditCode;
        data["SeqNo"] = this.seqNo;
        data["VclrPridVal"] = this.vclrPridVal;
        data["UcnsVernoCntrFlag"] = this.ucnsVernoCntrFlag;
        data["VclrTypecd"] = this.vclrTypecd;
        data["RecordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["UpdateRecordDate"] = this.updateRecordDate ? this.updateRecordDate.toISOString() : <any>undefined;
        data["HxDate"] = this.hxDate ? this.hxDate.toISOString() : <any>undefined;
        data["UcnsDclSegcd"] = this.ucnsDclSegcd;
        data["DeclareSocialCreditCode"] = this.declareSocialCreditCode;
        data["ExeMarkcd"] = this.exeMarkcd;
        data["MaxImgAmount"] = this.maxImgAmount;
        data["DeclareTypecn"] = this.declareTypecn;
        data["DeclareStatuscn"] = this.declareStatuscn;
        data["EmsTypecn"] = this.emsTypecn;
        data["ModifyMarkcn"] = this.modifyMarkcn;
        data["UcnsDclSegcdcn"] = this.ucnsDclSegcdcn;
        data["ExeMarkcdcn"] = this.exeMarkcdcn;
        data["DeclareErTypecn"] = this.declareErTypecn;
        data["CheckFlag"] = this.checkFlag;
        data["OrganizationCode"] = this.organizationCode;
        data["UsageTypeCd"] = this.usageTypeCd;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgHead {
    inputDateTo?: Date | undefined;
    iD?: number | undefined;
    emsId?: string | undefined;
    emsNo?: string | undefined;
    preEmsNo?: string | undefined;
    copEmsNo?: string | undefined;
    tradeCode?: string | undefined;
    tradeName?: string | undefined;
    tradeSocialCreditCode?: string | undefined;
    houseNo?: string | undefined;
    ownerCode?: string | undefined;
    ownerSocialCreditCode?: string | undefined;
    ownerName?: string | undefined;
    declareCode?: string | undefined;
    declareName?: string | undefined;
    cUSTOM?: string | undefined;
    customCn?: string | undefined;
    districtCode?: number | undefined;
    aDDRESS?: string | undefined;
    pHONE?: string | undefined;
    emsType?: string | undefined;
    emsStatus?: string | undefined;
    declareStatus?: string | undefined;
    declareType?: string | undefined;
    investMode?: string | undefined;
    ownerType?: string | undefined;
    declareErType?: string | undefined;
    tradeMode?: number | undefined;
    imgAmount?: number | undefined;
    exgAmount?: number | undefined;
    imgWeight?: number | undefined;
    exgWeight?: number | undefined;
    imgItems?: number | undefined;
    exgItems?: number | undefined;
    investAmount?: number | undefined;
    noteAmount?: number | undefined;
    noteQty?: number | undefined;
    emsApprNo?: string | undefined;
    licenseNo?: string | undefined;
    lastEmsNo?: string | undefined;
    corrEmsNo?: string | undefined;
    contrNo?: string | undefined;
    idCard?: string | undefined;
    idCardPwd?: string | undefined;
    inputEr?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    nOTE?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    inputDate?: Date | undefined;
    declareDate?: Date | undefined;
    declareTime?: Date | undefined;
    modifyTimes?: number | undefined;
    emsApprMark?: string | undefined;
    emsCertify?: string | undefined;
    largeTurnAmount?: number | undefined;
    productRatio?: number | undefined;
    modifyMark?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    fileName?: string | undefined;
    currentEffective?: number | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    recordContent?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    inputCreditCode?: string | undefined;
    seqNo?: string | undefined;
    vclrPridVal?: number | undefined;
    ucnsVernoCntrFlag?: string | undefined;
    vclrTypecd?: string | undefined;
    recordDate?: Date | undefined;
    updateRecordDate?: Date | undefined;
    hxDate?: Date | undefined;
    ucnsDclSegcd?: string | undefined;
    declareSocialCreditCode?: string | undefined;
    exeMarkcd?: string | undefined;
    maxImgAmount?: number | undefined;
    declareTypecn?: string | undefined;
    declareStatuscn?: string | undefined;
    emsTypecn?: string | undefined;
    modifyMarkcn?: string | undefined;
    ucnsDclSegcdcn?: string | undefined;
    exeMarkcdcn?: string | undefined;
    declareErTypecn?: string | undefined;
    checkFlag?: string | undefined;
    organizationCode?: string | undefined;
    usageTypeCd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgImg implements IEntGoldenOrgImg {
    str?: string | undefined;
    flag?: string | undefined;
    user?: string | undefined;
    head?: string | undefined;
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    imgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    useType?: number | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    classMark?: string | undefined;
    recordFlag?: string | undefined;
    materialFlag?: string | undefined;
    modifyMark?: string | undefined;
    modifyTimes?: number | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.str = data["str"];
            this.flag = data["flag"];
            this.user = data["user"];
            this.head = data["head"];
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.imgNo = data["ImgNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.uNIT = data["UNIT"];
            this.erpUnit = data["ErpUnit"];
            this.decPrice = data["DecPrice"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.firstQty = data["FirstQty"];
            this.useType = data["UseType"];
            this.iEType = data["IEType"];
            this.sourceMark = data["SourceMark"];
            this.classMark = data["ClassMark"];
            this.recordFlag = data["RecordFlag"];
            this.materialFlag = data["MaterialFlag"];
            this.modifyMark = data["ModifyMark"];
            this.modifyTimes = data["ModifyTimes"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.nOTE = data["NOTE"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.lvyrlfModecd = data["LvyrlfModecd"];
            this.etpsExeMarkcd = data["EtpsExeMarkcd"];
            this.qtyCntrMarkcd = data["QtyCntrMarkcd"];
            this.cusmExeMarkcd = data["CusmExeMarkcd"];
            this.hsCodeNew = data["HsCodeNew"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgImg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["str"] = this.str;
        data["flag"] = this.flag;
        data["user"] = this.user;
        data["head"] = this.head;
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["ImgNo"] = this.imgNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["UNIT"] = this.uNIT;
        data["ErpUnit"] = this.erpUnit;
        data["DecPrice"] = this.decPrice;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["FirstQty"] = this.firstQty;
        data["UseType"] = this.useType;
        data["IEType"] = this.iEType;
        data["SourceMark"] = this.sourceMark;
        data["ClassMark"] = this.classMark;
        data["RecordFlag"] = this.recordFlag;
        data["MaterialFlag"] = this.materialFlag;
        data["ModifyMark"] = this.modifyMark;
        data["ModifyTimes"] = this.modifyTimes;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["NOTE"] = this.nOTE;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["LvyrlfModecd"] = this.lvyrlfModecd;
        data["EtpsExeMarkcd"] = this.etpsExeMarkcd;
        data["QtyCntrMarkcd"] = this.qtyCntrMarkcd;
        data["CusmExeMarkcd"] = this.cusmExeMarkcd;
        data["HsCodeNew"] = this.hsCodeNew;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgImg {
    str?: string | undefined;
    flag?: string | undefined;
    user?: string | undefined;
    head?: string | undefined;
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    imgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    useType?: number | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    classMark?: string | undefined;
    recordFlag?: string | undefined;
    materialFlag?: string | undefined;
    modifyMark?: string | undefined;
    modifyTimes?: number | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgImgHistory implements IEntGoldenOrgImgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    imgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    useType?: number | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    classMark?: string | undefined;
    recordFlag?: string | undefined;
    materialFlag?: string | undefined;
    modifyMark?: string | undefined;
    modifyTimes?: number | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    organizationCode?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgImgHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.imgNo = data["ImgNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.uNIT = data["UNIT"];
            this.erpUnit = data["ErpUnit"];
            this.decPrice = data["DecPrice"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.firstQty = data["FirstQty"];
            this.useType = data["UseType"];
            this.iEType = data["IEType"];
            this.sourceMark = data["SourceMark"];
            this.classMark = data["ClassMark"];
            this.recordFlag = data["RecordFlag"];
            this.materialFlag = data["MaterialFlag"];
            this.modifyMark = data["ModifyMark"];
            this.modifyTimes = data["ModifyTimes"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.nOTE = data["NOTE"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.currentEffective = data["CurrentEffective"];
            this.lvyrlfModecd = data["LvyrlfModecd"];
            this.etpsExeMarkcd = data["EtpsExeMarkcd"];
            this.qtyCntrMarkcd = data["QtyCntrMarkcd"];
            this.cusmExeMarkcd = data["CusmExeMarkcd"];
            this.organizationCode = data["OrganizationCode"];
            this.hsCodeNew = data["HsCodeNew"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgImgHistory {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgImgHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["ImgNo"] = this.imgNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["UNIT"] = this.uNIT;
        data["ErpUnit"] = this.erpUnit;
        data["DecPrice"] = this.decPrice;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["FirstQty"] = this.firstQty;
        data["UseType"] = this.useType;
        data["IEType"] = this.iEType;
        data["SourceMark"] = this.sourceMark;
        data["ClassMark"] = this.classMark;
        data["RecordFlag"] = this.recordFlag;
        data["MaterialFlag"] = this.materialFlag;
        data["ModifyMark"] = this.modifyMark;
        data["ModifyTimes"] = this.modifyTimes;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["NOTE"] = this.nOTE;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CurrentEffective"] = this.currentEffective;
        data["LvyrlfModecd"] = this.lvyrlfModecd;
        data["EtpsExeMarkcd"] = this.etpsExeMarkcd;
        data["QtyCntrMarkcd"] = this.qtyCntrMarkcd;
        data["CusmExeMarkcd"] = this.cusmExeMarkcd;
        data["OrganizationCode"] = this.organizationCode;
        data["HsCodeNew"] = this.hsCodeNew;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgImgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    imgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    useType?: number | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    classMark?: string | undefined;
    recordFlag?: string | undefined;
    materialFlag?: string | undefined;
    modifyMark?: string | undefined;
    modifyTimes?: number | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    organizationCode?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgExg implements IEntGoldenOrgExg {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    exgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    decPrice?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    decPriceRmb?: number | undefined;
    firstQty?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    materialFlag?: string | undefined;
    ucnsTqsnFlag?: string | undefined;
    csttnFlag?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgExg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.exgNo = data["ExgNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.classMark = data["ClassMark"];
            this.uNIT = data["UNIT"];
            this.erpUnit = data["ErpUnit"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.decPrice = data["DecPrice"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.firstQty = data["FirstQty"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.iEType = data["IEType"];
            this.sourceMark = data["SourceMark"];
            this.useType = data["UseType"];
            this.modifyTimes = data["ModifyTimes"];
            this.recordFlag = data["RecordFlag"];
            this.modifyMark = data["ModifyMark"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.lvyrlfModecd = data["LvyrlfModecd"];
            this.etpsExeMarkcd = data["EtpsExeMarkcd"];
            this.qtyCntrMarkcd = data["QtyCntrMarkcd"];
            this.cusmExeMarkcd = data["CusmExeMarkcd"];
            this.materialFlag = data["MaterialFlag"];
            this.ucnsTqsnFlag = data["UcnsTqsnFlag"];
            this.csttnFlag = data["CsttnFlag"];
            this.hsCodeNew = data["HsCodeNew"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgExg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgExg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["ExgNo"] = this.exgNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["ClassMark"] = this.classMark;
        data["UNIT"] = this.uNIT;
        data["ErpUnit"] = this.erpUnit;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["DecPrice"] = this.decPrice;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["FirstQty"] = this.firstQty;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["IEType"] = this.iEType;
        data["SourceMark"] = this.sourceMark;
        data["UseType"] = this.useType;
        data["ModifyTimes"] = this.modifyTimes;
        data["RecordFlag"] = this.recordFlag;
        data["ModifyMark"] = this.modifyMark;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["LvyrlfModecd"] = this.lvyrlfModecd;
        data["EtpsExeMarkcd"] = this.etpsExeMarkcd;
        data["QtyCntrMarkcd"] = this.qtyCntrMarkcd;
        data["CusmExeMarkcd"] = this.cusmExeMarkcd;
        data["MaterialFlag"] = this.materialFlag;
        data["UcnsTqsnFlag"] = this.ucnsTqsnFlag;
        data["CsttnFlag"] = this.csttnFlag;
        data["HsCodeNew"] = this.hsCodeNew;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgExg {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    exgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    decPrice?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    decPriceRmb?: number | undefined;
    firstQty?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    materialFlag?: string | undefined;
    ucnsTqsnFlag?: string | undefined;
    csttnFlag?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgExgHistory implements IEntGoldenOrgExgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    exgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    decPrice?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    decPriceRmb?: number | undefined;
    firstQty?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    materialFlag?: string | undefined;
    organizationCode?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgExgHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.exgNo = data["ExgNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.classMark = data["ClassMark"];
            this.uNIT = data["UNIT"];
            this.erpUnit = data["ErpUnit"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.decPrice = data["DecPrice"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.firstQty = data["FirstQty"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.iEType = data["IEType"];
            this.sourceMark = data["SourceMark"];
            this.useType = data["UseType"];
            this.modifyTimes = data["ModifyTimes"];
            this.recordFlag = data["RecordFlag"];
            this.modifyMark = data["ModifyMark"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.currentEffective = data["CurrentEffective"];
            this.lvyrlfModecd = data["LvyrlfModecd"];
            this.etpsExeMarkcd = data["EtpsExeMarkcd"];
            this.qtyCntrMarkcd = data["QtyCntrMarkcd"];
            this.cusmExeMarkcd = data["CusmExeMarkcd"];
            this.materialFlag = data["MaterialFlag"];
            this.organizationCode = data["OrganizationCode"];
            this.hsCodeNew = data["HsCodeNew"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgExgHistory {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgExgHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["ExgNo"] = this.exgNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["ClassMark"] = this.classMark;
        data["UNIT"] = this.uNIT;
        data["ErpUnit"] = this.erpUnit;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["DecPrice"] = this.decPrice;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["FirstQty"] = this.firstQty;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["IEType"] = this.iEType;
        data["SourceMark"] = this.sourceMark;
        data["UseType"] = this.useType;
        data["ModifyTimes"] = this.modifyTimes;
        data["RecordFlag"] = this.recordFlag;
        data["ModifyMark"] = this.modifyMark;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CurrentEffective"] = this.currentEffective;
        data["LvyrlfModecd"] = this.lvyrlfModecd;
        data["EtpsExeMarkcd"] = this.etpsExeMarkcd;
        data["QtyCntrMarkcd"] = this.qtyCntrMarkcd;
        data["CusmExeMarkcd"] = this.cusmExeMarkcd;
        data["MaterialFlag"] = this.materialFlag;
        data["OrganizationCode"] = this.organizationCode;
        data["HsCodeNew"] = this.hsCodeNew;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgExgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    exgNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    erpUnit?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    decPrice?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    decPriceRmb?: number | undefined;
    firstQty?: number | undefined;
    countryCode?: number | undefined;
    cURR?: string | undefined;
    iEType?: string | undefined;
    sourceMark?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    lvyrlfModecd?: string | undefined;
    etpsExeMarkcd?: string | undefined;
    qtyCntrMarkcd?: string | undefined;
    cusmExeMarkcd?: string | undefined;
    materialFlag?: string | undefined;
    organizationCode?: string | undefined;
    hsCodeNew?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgBom implements IEntGoldenOrgBom {
    iD?: number | undefined;
    emsNo?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    erpExgUnit?: string | undefined;
    erpImgUnit?: string | undefined;
    ucnsQty?: number | undefined;
    decDm?: number | undefined;
    wastageRate?: number | undefined;
    otherCm?: number | undefined;
    otherDm?: number | undefined;
    cmMark?: string | undefined;
    productMark?: string | undefined;
    productType?: string | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    controlMark?: string | undefined;
    modifyTimes?: number | undefined;
    beginDate?: string | undefined;
    endDate?: string | undefined;
    emsId?: number | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    importFile?: string | undefined;
    gNoImg?: number | undefined;
    gNoExg?: number | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    ucnsDclStucd?: string | undefined;
    netUseupQty?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgBom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsNo = data["EmsNo"];
            this.exgNo = data["ExgNo"];
            this.imgNo = data["ImgNo"];
            this.erpExgUnit = data["ErpExgUnit"];
            this.erpImgUnit = data["ErpImgUnit"];
            this.ucnsQty = data["UcnsQty"];
            this.decDm = data["DecDm"];
            this.wastageRate = data["WastageRate"];
            this.otherCm = data["OtherCm"];
            this.otherDm = data["OtherDm"];
            this.cmMark = data["CmMark"];
            this.productMark = data["ProductMark"];
            this.productType = data["ProductType"];
            this.recordFlag = data["RecordFlag"];
            this.modifyMark = data["ModifyMark"];
            this.controlMark = data["ControlMark"];
            this.modifyTimes = data["ModifyTimes"];
            this.beginDate = data["BeginDate"];
            this.endDate = data["EndDate"];
            this.emsId = data["EmsId"];
            this.nOTE = data["NOTE"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.importFile = data["ImportFile"];
            this.gNoImg = data["GNoImg"];
            this.gNoExg = data["GNoExg"];
            this.tgblLossRate = data["TgblLossRate"];
            this.intgbLossRate = data["IntgbLossRate"];
            this.bondMtpckPrpr = data["BondMtpckPrpr"];
            this.ucnsDclStucd = data["UcnsDclStucd"];
            this.netUseupQty = data["NetUseupQty"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgBom {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgBom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsNo"] = this.emsNo;
        data["ExgNo"] = this.exgNo;
        data["ImgNo"] = this.imgNo;
        data["ErpExgUnit"] = this.erpExgUnit;
        data["ErpImgUnit"] = this.erpImgUnit;
        data["UcnsQty"] = this.ucnsQty;
        data["DecDm"] = this.decDm;
        data["WastageRate"] = this.wastageRate;
        data["OtherCm"] = this.otherCm;
        data["OtherDm"] = this.otherDm;
        data["CmMark"] = this.cmMark;
        data["ProductMark"] = this.productMark;
        data["ProductType"] = this.productType;
        data["RecordFlag"] = this.recordFlag;
        data["ModifyMark"] = this.modifyMark;
        data["ControlMark"] = this.controlMark;
        data["ModifyTimes"] = this.modifyTimes;
        data["BeginDate"] = this.beginDate;
        data["EndDate"] = this.endDate;
        data["EmsId"] = this.emsId;
        data["NOTE"] = this.nOTE;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["ImportFile"] = this.importFile;
        data["GNoImg"] = this.gNoImg;
        data["GNoExg"] = this.gNoExg;
        data["TgblLossRate"] = this.tgblLossRate;
        data["IntgbLossRate"] = this.intgbLossRate;
        data["BondMtpckPrpr"] = this.bondMtpckPrpr;
        data["UcnsDclStucd"] = this.ucnsDclStucd;
        data["NetUseupQty"] = this.netUseupQty;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgBom {
    iD?: number | undefined;
    emsNo?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    erpExgUnit?: string | undefined;
    erpImgUnit?: string | undefined;
    ucnsQty?: number | undefined;
    decDm?: number | undefined;
    wastageRate?: number | undefined;
    otherCm?: number | undefined;
    otherDm?: number | undefined;
    cmMark?: string | undefined;
    productMark?: string | undefined;
    productType?: string | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    controlMark?: string | undefined;
    modifyTimes?: number | undefined;
    beginDate?: string | undefined;
    endDate?: string | undefined;
    emsId?: number | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    importFile?: string | undefined;
    gNoImg?: number | undefined;
    gNoExg?: number | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    ucnsDclStucd?: string | undefined;
    netUseupQty?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgBomHistory implements IEntGoldenOrgBomHistory {
    iD?: number | undefined;
    emsNo?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    erpExgUnit?: string | undefined;
    erpImgUnit?: string | undefined;
    ucnsQty?: number | undefined;
    decDm?: number | undefined;
    wastageRate?: number | undefined;
    otherCm?: number | undefined;
    otherDm?: number | undefined;
    cmMark?: string | undefined;
    productMark?: string | undefined;
    productType?: string | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    controlMark?: string | undefined;
    modifyTimes?: number | undefined;
    beginDate?: string | undefined;
    endDate?: string | undefined;
    emsId?: number | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    gNoImg?: number | undefined;
    gNoExg?: number | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    ucnsDclStucd?: string | undefined;
    netUseupQty?: number | undefined;
    organizationCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgBomHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsNo = data["EmsNo"];
            this.exgNo = data["ExgNo"];
            this.imgNo = data["ImgNo"];
            this.erpExgUnit = data["ErpExgUnit"];
            this.erpImgUnit = data["ErpImgUnit"];
            this.ucnsQty = data["UcnsQty"];
            this.decDm = data["DecDm"];
            this.wastageRate = data["WastageRate"];
            this.otherCm = data["OtherCm"];
            this.otherDm = data["OtherDm"];
            this.cmMark = data["CmMark"];
            this.productMark = data["ProductMark"];
            this.productType = data["ProductType"];
            this.recordFlag = data["RecordFlag"];
            this.modifyMark = data["ModifyMark"];
            this.controlMark = data["ControlMark"];
            this.modifyTimes = data["ModifyTimes"];
            this.beginDate = data["BeginDate"];
            this.endDate = data["EndDate"];
            this.emsId = data["EmsId"];
            this.nOTE = data["NOTE"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.currentEffective = data["CurrentEffective"];
            this.gNoImg = data["GNoImg"];
            this.gNoExg = data["GNoExg"];
            this.tgblLossRate = data["TgblLossRate"];
            this.intgbLossRate = data["IntgbLossRate"];
            this.bondMtpckPrpr = data["BondMtpckPrpr"];
            this.ucnsDclStucd = data["UcnsDclStucd"];
            this.netUseupQty = data["NetUseupQty"];
            this.organizationCode = data["OrganizationCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgBomHistory {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgBomHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsNo"] = this.emsNo;
        data["ExgNo"] = this.exgNo;
        data["ImgNo"] = this.imgNo;
        data["ErpExgUnit"] = this.erpExgUnit;
        data["ErpImgUnit"] = this.erpImgUnit;
        data["UcnsQty"] = this.ucnsQty;
        data["DecDm"] = this.decDm;
        data["WastageRate"] = this.wastageRate;
        data["OtherCm"] = this.otherCm;
        data["OtherDm"] = this.otherDm;
        data["CmMark"] = this.cmMark;
        data["ProductMark"] = this.productMark;
        data["ProductType"] = this.productType;
        data["RecordFlag"] = this.recordFlag;
        data["ModifyMark"] = this.modifyMark;
        data["ControlMark"] = this.controlMark;
        data["ModifyTimes"] = this.modifyTimes;
        data["BeginDate"] = this.beginDate;
        data["EndDate"] = this.endDate;
        data["EmsId"] = this.emsId;
        data["NOTE"] = this.nOTE;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CurrentEffective"] = this.currentEffective;
        data["GNoImg"] = this.gNoImg;
        data["GNoExg"] = this.gNoExg;
        data["TgblLossRate"] = this.tgblLossRate;
        data["IntgbLossRate"] = this.intgbLossRate;
        data["BondMtpckPrpr"] = this.bondMtpckPrpr;
        data["UcnsDclStucd"] = this.ucnsDclStucd;
        data["NetUseupQty"] = this.netUseupQty;
        data["OrganizationCode"] = this.organizationCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgBomHistory {
    iD?: number | undefined;
    emsNo?: string | undefined;
    exgNo?: string | undefined;
    imgNo?: string | undefined;
    erpExgUnit?: string | undefined;
    erpImgUnit?: string | undefined;
    ucnsQty?: number | undefined;
    decDm?: number | undefined;
    wastageRate?: number | undefined;
    otherCm?: number | undefined;
    otherDm?: number | undefined;
    cmMark?: string | undefined;
    productMark?: string | undefined;
    productType?: string | undefined;
    recordFlag?: string | undefined;
    modifyMark?: string | undefined;
    controlMark?: string | undefined;
    modifyTimes?: number | undefined;
    beginDate?: string | undefined;
    endDate?: string | undefined;
    emsId?: number | undefined;
    nOTE?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    gNoImg?: number | undefined;
    gNoExg?: number | undefined;
    tgblLossRate?: number | undefined;
    intgbLossRate?: number | undefined;
    bondMtpckPrpr?: number | undefined;
    ucnsDclStucd?: string | undefined;
    netUseupQty?: number | undefined;
    organizationCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenTradeImgHistory implements IEntGoldenTradeImgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    iEType?: string | undefined;
    modifyMark?: string | undefined;
    sourceMark?: string | undefined;
    modifyTimes?: number | undefined;
    useType?: number | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    recordFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenTradeImgHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.organizationCode = data["OrganizationCode"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.copGNo = data["CopGNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.classMark = data["ClassMark"];
            this.uNIT = data["UNIT"];
            this.decPrice = data["DecPrice"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.firstQty = data["FirstQty"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.iEType = data["IEType"];
            this.modifyMark = data["ModifyMark"];
            this.sourceMark = data["SourceMark"];
            this.modifyTimes = data["ModifyTimes"];
            this.useType = data["UseType"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.currentEffective = data["CurrentEffective"];
            this.recordFlag = data["RecordFlag"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenTradeImgHistory {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenTradeImgHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["OrganizationCode"] = this.organizationCode;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["CopGNo"] = this.copGNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["ClassMark"] = this.classMark;
        data["UNIT"] = this.uNIT;
        data["DecPrice"] = this.decPrice;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["FirstQty"] = this.firstQty;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["IEType"] = this.iEType;
        data["ModifyMark"] = this.modifyMark;
        data["SourceMark"] = this.sourceMark;
        data["ModifyTimes"] = this.modifyTimes;
        data["UseType"] = this.useType;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CurrentEffective"] = this.currentEffective;
        data["RecordFlag"] = this.recordFlag;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenTradeImgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    iEType?: string | undefined;
    modifyMark?: string | undefined;
    sourceMark?: string | undefined;
    modifyTimes?: number | undefined;
    useType?: number | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    recordFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenTradeExgHistory implements IEntGoldenTradeExgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    iEType?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    sourceMark?: string | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    recordFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenTradeExgHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.organizationCode = data["OrganizationCode"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.copGNo = data["CopGNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.classMark = data["ClassMark"];
            this.uNIT = data["UNIT"];
            this.decPrice = data["DecPrice"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.firstQty = data["FirstQty"];
            this.iEType = data["IEType"];
            this.useType = data["UseType"];
            this.modifyTimes = data["ModifyTimes"];
            this.sourceMark = data["SourceMark"];
            this.modifyMark = data["ModifyMark"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.currentEffective = data["CurrentEffective"];
            this.recordFlag = data["RecordFlag"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenTradeExgHistory {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenTradeExgHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["OrganizationCode"] = this.organizationCode;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["CopGNo"] = this.copGNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["ClassMark"] = this.classMark;
        data["UNIT"] = this.uNIT;
        data["DecPrice"] = this.decPrice;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["FirstQty"] = this.firstQty;
        data["IEType"] = this.iEType;
        data["UseType"] = this.useType;
        data["ModifyTimes"] = this.modifyTimes;
        data["SourceMark"] = this.sourceMark;
        data["ModifyMark"] = this.modifyMark;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CurrentEffective"] = this.currentEffective;
        data["RecordFlag"] = this.recordFlag;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenTradeExgHistory {
    iD?: number | undefined;
    emsId?: number | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    iEType?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    sourceMark?: string | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    currentEffective?: number | undefined;
    recordFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgImgexginnerExt implements IEntGoldenOrgImgexginnerExt {
    loginName?: string | undefined;
    flag?: string | undefined;
    listInner?: EntGoldenOrgImgexginner[] | undefined;
    headId?: string | undefined;

    constructor(data?: IEntGoldenOrgImgexginnerExt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginName = data["LoginName"];
            this.flag = data["Flag"];
            if (Array.isArray(data["ListInner"])) {
                this.listInner = [] as any;
                for (let item of data["ListInner"])
                    this.listInner!.push(EntGoldenOrgImgexginner.fromJS(item));
            }
            this.headId = data["HeadId"];
        }
    }

    static fromJS(data: any): EntGoldenOrgImgexginnerExt {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgImgexginnerExt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginName"] = this.loginName;
        data["Flag"] = this.flag;
        if (Array.isArray(this.listInner)) {
            data["ListInner"] = [];
            for (let item of this.listInner)
                data["ListInner"].push(item.toJSON());
        }
        data["HeadId"] = this.headId;
        return data; 
    }
}

export interface IEntGoldenOrgImgexginnerExt {
    loginName?: string | undefined;
    flag?: string | undefined;
    listInner?: EntGoldenOrgImgexginner[] | undefined;
    headId?: string | undefined;
}

export class EntGoldenOrgImgexginner implements IEntGoldenOrgImgexginner {
    id?: number | undefined;
    copGNo?: string | undefined;
    hsCode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    unit?: string | undefined;
    materialFlag?: string | undefined;
    modifyMark?: string | undefined;
    qty?: number | undefined;
    decPrice?: number | undefined;
    curr?: string | undefined;
    lvyrlfModecd?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    uUid?: number | undefined;
    remark?: string | undefined;
    excelLineNum?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgImgexginner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.copGNo = data["CopGNo"];
            this.hsCode = data["HsCode"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.unit = data["Unit"];
            this.materialFlag = data["MaterialFlag"];
            this.modifyMark = data["ModifyMark"];
            this.qty = data["Qty"];
            this.decPrice = data["DecPrice"];
            this.curr = data["Curr"];
            this.lvyrlfModecd = data["LvyrlfModecd"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.uUid = data["UUid"];
            this.remark = data["Remark"];
            this.excelLineNum = data["ExcelLineNum"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgImgexginner {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgImgexginner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CopGNo"] = this.copGNo;
        data["HsCode"] = this.hsCode;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["Unit"] = this.unit;
        data["MaterialFlag"] = this.materialFlag;
        data["ModifyMark"] = this.modifyMark;
        data["Qty"] = this.qty;
        data["DecPrice"] = this.decPrice;
        data["Curr"] = this.curr;
        data["LvyrlfModecd"] = this.lvyrlfModecd;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UUid"] = this.uUid;
        data["Remark"] = this.remark;
        data["ExcelLineNum"] = this.excelLineNum;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgImgexginner {
    id?: number | undefined;
    copGNo?: string | undefined;
    hsCode?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    unit?: string | undefined;
    materialFlag?: string | undefined;
    modifyMark?: string | undefined;
    qty?: number | undefined;
    decPrice?: number | undefined;
    curr?: string | undefined;
    lvyrlfModecd?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    uUid?: number | undefined;
    remark?: string | undefined;
    excelLineNum?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenOrgBomInnerExt implements IEntGoldenOrgBomInnerExt {
    loginName?: string | undefined;
    listInner?: EntGoldenOrgBomInner[] | undefined;
    headId?: string | undefined;

    constructor(data?: IEntGoldenOrgBomInnerExt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginName = data["LoginName"];
            if (Array.isArray(data["ListInner"])) {
                this.listInner = [] as any;
                for (let item of data["ListInner"])
                    this.listInner!.push(EntGoldenOrgBomInner.fromJS(item));
            }
            this.headId = data["HeadId"];
        }
    }

    static fromJS(data: any): EntGoldenOrgBomInnerExt {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgBomInnerExt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginName"] = this.loginName;
        if (Array.isArray(this.listInner)) {
            data["ListInner"] = [];
            for (let item of this.listInner)
                data["ListInner"].push(item.toJSON());
        }
        data["HeadId"] = this.headId;
        return data; 
    }
}

export interface IEntGoldenOrgBomInnerExt {
    loginName?: string | undefined;
    listInner?: EntGoldenOrgBomInner[] | undefined;
    headId?: string | undefined;
}

export class EntGoldenOrgBomInner implements IEntGoldenOrgBomInner {
    id?: number | undefined;
    imgNo?: string | undefined;
    exgNo?: string | undefined;
    beginDate?: string | undefined;
    netUseQty?: number | undefined;
    youSun?: number | undefined;
    wuSun?: number | undefined;
    bondScale?: number | undefined;
    endDate?: string | undefined;
    modifyMark?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    uUid?: number | undefined;
    excelLineNum?: number | undefined;
    organizationCode?: string | undefined;
    ucnsDclStucd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenOrgBomInner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.imgNo = data["ImgNo"];
            this.exgNo = data["ExgNo"];
            this.beginDate = data["BeginDate"];
            this.netUseQty = data["NetUseQty"];
            this.youSun = data["YouSun"];
            this.wuSun = data["WuSun"];
            this.bondScale = data["BondScale"];
            this.endDate = data["EndDate"];
            this.modifyMark = data["ModifyMark"];
            this.remark = data["Remark"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.uUid = data["UUid"];
            this.excelLineNum = data["ExcelLineNum"];
            this.organizationCode = data["OrganizationCode"];
            this.ucnsDclStucd = data["UcnsDclStucd"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenOrgBomInner {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenOrgBomInner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ImgNo"] = this.imgNo;
        data["ExgNo"] = this.exgNo;
        data["BeginDate"] = this.beginDate;
        data["NetUseQty"] = this.netUseQty;
        data["YouSun"] = this.youSun;
        data["WuSun"] = this.wuSun;
        data["BondScale"] = this.bondScale;
        data["EndDate"] = this.endDate;
        data["ModifyMark"] = this.modifyMark;
        data["Remark"] = this.remark;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UUid"] = this.uUid;
        data["ExcelLineNum"] = this.excelLineNum;
        data["OrganizationCode"] = this.organizationCode;
        data["UcnsDclStucd"] = this.ucnsDclStucd;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenOrgBomInner {
    id?: number | undefined;
    imgNo?: string | undefined;
    exgNo?: string | undefined;
    beginDate?: string | undefined;
    netUseQty?: number | undefined;
    youSun?: number | undefined;
    wuSun?: number | undefined;
    bondScale?: number | undefined;
    endDate?: string | undefined;
    modifyMark?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    uUid?: number | undefined;
    excelLineNum?: number | undefined;
    organizationCode?: string | undefined;
    ucnsDclStucd?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessOtherpack implements IEntTgBusinessOtherpack {
    guid?: number | undefined;
    entryId?: string | undefined;
    packType?: string | undefined;
    packQty?: number | undefined;
    headGuid?: number | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessOtherpack) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.entryId = data["EntryId"];
            this.packType = data["PackType"];
            this.packQty = data["PackQty"];
            this.headGuid = data["HeadGuid"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessOtherpack {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessOtherpack();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["EntryId"] = this.entryId;
        data["PackType"] = this.packType;
        data["PackQty"] = this.packQty;
        data["HeadGuid"] = this.headGuid;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessOtherpack {
    guid?: number | undefined;
    entryId?: string | undefined;
    packType?: string | undefined;
    packQty?: number | undefined;
    headGuid?: number | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessHead implements IEntTgBusinessHead {
    createDateBegin?: Date | undefined;
    createDateEnd?: Date | undefined;
    queryFlag?: string | undefined;
    approveRejectReason?: string | undefined;
    approveRejectDescription?: string | undefined;
    approveResult?: string | undefined;
    approveDate?: Date | undefined;
    approveUser?: string | undefined;
    guid?: number | undefined;
    entryId?: string | undefined;
    entryType?: string | undefined;
    tradeMode?: string | undefined;
    custom?: string | undefined;
    gMark?: string | undefined;
    iePort?: string | undefined;
    ieDate?: string | undefined;
    dDate?: string | undefined;
    billNo?: string | undefined;
    contractNo?: string | undefined;
    emsNo?: string | undefined;
    orderNo?: string | undefined;
    transMode?: string | undefined;
    transName?: string | undefined;
    tradeCo?: string | undefined;
    tradeName?: string | undefined;
    agentCode?: string | undefined;
    agentName?: string | undefined;
    receiveCo?: string | undefined;
    receiveName?: string | undefined;
    companyType?: string | undefined;
    ownerArea?: string | undefined;
    controlMa?: string | undefined;
    taxP?: string | undefined;
    shipCountry?: string | undefined;
    shipPort?: string | undefined;
    dutyMode?: string | undefined;
    taxMode?: string | undefined;
    licenseNo?: string | undefined;
    approveNo?: string | undefined;
    fobType?: string | undefined;
    feeMark?: string | undefined;
    feeRate?: string | undefined;
    feeCurr?: string | undefined;
    insurMark?: string | undefined;
    insurRate?: string | undefined;
    insurCurr?: string | undefined;
    otherMark?: string | undefined;
    otherRate?: string | undefined;
    otherCurr?: string | undefined;
    packageType?: string | undefined;
    dozen?: string | undefined;
    netWt?: string | undefined;
    grossWt?: string | undefined;
    exSource?: string | undefined;
    typeEr?: string | undefined;
    credentialNo?: string | undefined;
    containerQty?: string | undefined;
    relationEntryno?: string | undefined;
    relationEmsno?: string | undefined;
    overlookNo?: string | undefined;
    warehouseCode?: string | undefined;
    bsyFlag?: string | undefined;
    cusNo?: string | undefined;
    voyageNo?: string | undefined;
    noteMark?: string | undefined;
    importFlag?: string | undefined;
    attachmentFlag?: string | undefined;
    openFlag?: string | undefined;
    entryIdall?: string | undefined;
    companyCode?: string | undefined;
    status?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    remark1?: string | undefined;
    remark2?: string | undefined;
    remark3?: string | undefined;
    remark4?: string | undefined;
    remark5?: string | undefined;
    checkStatus?: string | undefined;
    receiveDate?: string | undefined;
    ieTypeFlag?: string | undefined;
    seriCount?: number | undefined;
    tradeCountry?: string | undefined;
    entryIdHg?: string | undefined;
    agentCredit?: string | undefined;
    receiveCredit?: string | undefined;
    tradeCredit?: string | undefined;
    promiseOption?: string | undefined;
    billType?: string | undefined;
    ediCode?: string | undefined;
    taxTotal?: string | undefined;
    taxFlag?: string | undefined;
    listType?: string | undefined;
    assureFlag?: string | undefined;
    passFlag?: string | undefined;
    taxAaminMark?: string | undefined;
    checkFlow?: string | undefined;
    markNo?: string | undefined;
    despPortCode?: string | undefined;
    entyPortCode?: string | undefined;
    goodsPlace?: string | undefined;
    bLNo?: string | undefined;
    inspOrgCode?: string | undefined;
    specDeclFlag?: string | undefined;
    purpOrgCode?: string | undefined;
    despDate?: string | undefined;
    cmplDschrgDt?: string | undefined;
    correlationReasonFlag?: string | undefined;
    vsaOrgCode?: string | undefined;
    origBoxFlag?: string | undefined;
    declareName?: string | undefined;
    noOtherPack?: string | undefined;
    orgCode?: string | undefined;
    overseasConsignorCode?: string | undefined;
    overseasConsignorCname?: string | undefined;
    overseasConsignorEname?: string | undefined;
    overseasConsignorAddr?: string | undefined;
    overseasConsigneeCode?: string | undefined;
    overseasConsigneeEname?: string | undefined;
    domesticConsigneeEname?: string | undefined;
    correlationNo?: string | undefined;
    ediRemark2?: string | undefined;
    ediRemark?: string | undefined;
    declCiqCode?: string | undefined;
    ownerCiqCode?: string | undefined;
    tradeCiqCode?: string | undefined;
    declareType?: string | undefined;
    seqNo?: string | undefined;
    oneDate?: Date | undefined;
    finishDate?: Date | undefined;
    wPartFlag?: string | undefined;
    sendFlag?: number | undefined;
    hnNn?: string | undefined;
    auditFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createDateBegin = data["CreateDateBegin"] ? new Date(data["CreateDateBegin"].toString()) : <any>undefined;
            this.createDateEnd = data["CreateDateEnd"] ? new Date(data["CreateDateEnd"].toString()) : <any>undefined;
            this.queryFlag = data["QueryFlag"];
            this.approveRejectReason = data["ApproveRejectReason"];
            this.approveRejectDescription = data["ApproveRejectDescription"];
            this.approveResult = data["ApproveResult"];
            this.approveDate = data["ApproveDate"] ? new Date(data["ApproveDate"].toString()) : <any>undefined;
            this.approveUser = data["ApproveUser"];
            this.guid = data["Guid"];
            this.entryId = data["EntryId"];
            this.entryType = data["EntryType"];
            this.tradeMode = data["TradeMode"];
            this.custom = data["Custom"];
            this.gMark = data["GMark"];
            this.iePort = data["IePort"];
            this.ieDate = data["IeDate"];
            this.dDate = data["DDate"];
            this.billNo = data["BillNo"];
            this.contractNo = data["ContractNo"];
            this.emsNo = data["EmsNo"];
            this.orderNo = data["OrderNo"];
            this.transMode = data["TransMode"];
            this.transName = data["TransName"];
            this.tradeCo = data["TradeCo"];
            this.tradeName = data["TradeName"];
            this.agentCode = data["AgentCode"];
            this.agentName = data["AgentName"];
            this.receiveCo = data["ReceiveCo"];
            this.receiveName = data["ReceiveName"];
            this.companyType = data["CompanyType"];
            this.ownerArea = data["OwnerArea"];
            this.controlMa = data["ControlMa"];
            this.taxP = data["TaxP"];
            this.shipCountry = data["ShipCountry"];
            this.shipPort = data["ShipPort"];
            this.dutyMode = data["DutyMode"];
            this.taxMode = data["TaxMode"];
            this.licenseNo = data["LicenseNo"];
            this.approveNo = data["ApproveNo"];
            this.fobType = data["FobType"];
            this.feeMark = data["FeeMark"];
            this.feeRate = data["FeeRate"];
            this.feeCurr = data["FeeCurr"];
            this.insurMark = data["InsurMark"];
            this.insurRate = data["InsurRate"];
            this.insurCurr = data["InsurCurr"];
            this.otherMark = data["OtherMark"];
            this.otherRate = data["OtherRate"];
            this.otherCurr = data["OtherCurr"];
            this.packageType = data["PackageType"];
            this.dozen = data["Dozen"];
            this.netWt = data["NetWt"];
            this.grossWt = data["GrossWt"];
            this.exSource = data["ExSource"];
            this.typeEr = data["TypeEr"];
            this.credentialNo = data["CredentialNo"];
            this.containerQty = data["ContainerQty"];
            this.relationEntryno = data["RelationEntryno"];
            this.relationEmsno = data["RelationEmsno"];
            this.overlookNo = data["OverlookNo"];
            this.warehouseCode = data["WarehouseCode"];
            this.bsyFlag = data["BsyFlag"];
            this.cusNo = data["CusNo"];
            this.voyageNo = data["VoyageNo"];
            this.noteMark = data["NoteMark"];
            this.importFlag = data["ImportFlag"];
            this.attachmentFlag = data["AttachmentFlag"];
            this.openFlag = data["OpenFlag"];
            this.entryIdall = data["EntryIdall"];
            this.companyCode = data["CompanyCode"];
            this.status = data["Status"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.remark1 = data["Remark1"];
            this.remark2 = data["Remark2"];
            this.remark3 = data["Remark3"];
            this.remark4 = data["Remark4"];
            this.remark5 = data["Remark5"];
            this.checkStatus = data["CheckStatus"];
            this.receiveDate = data["ReceiveDate"];
            this.ieTypeFlag = data["IeTypeFlag"];
            this.seriCount = data["SeriCount"];
            this.tradeCountry = data["TradeCountry"];
            this.entryIdHg = data["EntryIdHg"];
            this.agentCredit = data["AgentCredit"];
            this.receiveCredit = data["ReceiveCredit"];
            this.tradeCredit = data["TradeCredit"];
            this.promiseOption = data["PromiseOption"];
            this.billType = data["BillType"];
            this.ediCode = data["EdiCode"];
            this.taxTotal = data["TaxTotal"];
            this.taxFlag = data["TaxFlag"];
            this.listType = data["ListType"];
            this.assureFlag = data["AssureFlag"];
            this.passFlag = data["PassFlag"];
            this.taxAaminMark = data["TaxAaminMark"];
            this.checkFlow = data["CheckFlow"];
            this.markNo = data["MarkNo"];
            this.despPortCode = data["DespPortCode"];
            this.entyPortCode = data["EntyPortCode"];
            this.goodsPlace = data["GoodsPlace"];
            this.bLNo = data["BLNo"];
            this.inspOrgCode = data["InspOrgCode"];
            this.specDeclFlag = data["SpecDeclFlag"];
            this.purpOrgCode = data["PurpOrgCode"];
            this.despDate = data["DespDate"];
            this.cmplDschrgDt = data["CmplDschrgDt"];
            this.correlationReasonFlag = data["CorrelationReasonFlag"];
            this.vsaOrgCode = data["VsaOrgCode"];
            this.origBoxFlag = data["OrigBoxFlag"];
            this.declareName = data["DeclareName"];
            this.noOtherPack = data["NoOtherPack"];
            this.orgCode = data["OrgCode"];
            this.overseasConsignorCode = data["OverseasConsignorCode"];
            this.overseasConsignorCname = data["OverseasConsignorCname"];
            this.overseasConsignorEname = data["OverseasConsignorEname"];
            this.overseasConsignorAddr = data["OverseasConsignorAddr"];
            this.overseasConsigneeCode = data["OverseasConsigneeCode"];
            this.overseasConsigneeEname = data["OverseasConsigneeEname"];
            this.domesticConsigneeEname = data["DomesticConsigneeEname"];
            this.correlationNo = data["CorrelationNo"];
            this.ediRemark2 = data["EdiRemark2"];
            this.ediRemark = data["EdiRemark"];
            this.declCiqCode = data["DeclCiqCode"];
            this.ownerCiqCode = data["OwnerCiqCode"];
            this.tradeCiqCode = data["TradeCiqCode"];
            this.declareType = data["DeclareType"];
            this.seqNo = data["SeqNo"];
            this.oneDate = data["OneDate"] ? new Date(data["OneDate"].toString()) : <any>undefined;
            this.finishDate = data["FinishDate"] ? new Date(data["FinishDate"].toString()) : <any>undefined;
            this.wPartFlag = data["WPartFlag"];
            this.sendFlag = data["SendFlag"];
            this.hnNn = data["HnNn"];
            this.auditFlag = data["AuditFlag"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreateDateBegin"] = this.createDateBegin ? this.createDateBegin.toISOString() : <any>undefined;
        data["CreateDateEnd"] = this.createDateEnd ? this.createDateEnd.toISOString() : <any>undefined;
        data["QueryFlag"] = this.queryFlag;
        data["ApproveRejectReason"] = this.approveRejectReason;
        data["ApproveRejectDescription"] = this.approveRejectDescription;
        data["ApproveResult"] = this.approveResult;
        data["ApproveDate"] = this.approveDate ? this.approveDate.toISOString() : <any>undefined;
        data["ApproveUser"] = this.approveUser;
        data["Guid"] = this.guid;
        data["EntryId"] = this.entryId;
        data["EntryType"] = this.entryType;
        data["TradeMode"] = this.tradeMode;
        data["Custom"] = this.custom;
        data["GMark"] = this.gMark;
        data["IePort"] = this.iePort;
        data["IeDate"] = this.ieDate;
        data["DDate"] = this.dDate;
        data["BillNo"] = this.billNo;
        data["ContractNo"] = this.contractNo;
        data["EmsNo"] = this.emsNo;
        data["OrderNo"] = this.orderNo;
        data["TransMode"] = this.transMode;
        data["TransName"] = this.transName;
        data["TradeCo"] = this.tradeCo;
        data["TradeName"] = this.tradeName;
        data["AgentCode"] = this.agentCode;
        data["AgentName"] = this.agentName;
        data["ReceiveCo"] = this.receiveCo;
        data["ReceiveName"] = this.receiveName;
        data["CompanyType"] = this.companyType;
        data["OwnerArea"] = this.ownerArea;
        data["ControlMa"] = this.controlMa;
        data["TaxP"] = this.taxP;
        data["ShipCountry"] = this.shipCountry;
        data["ShipPort"] = this.shipPort;
        data["DutyMode"] = this.dutyMode;
        data["TaxMode"] = this.taxMode;
        data["LicenseNo"] = this.licenseNo;
        data["ApproveNo"] = this.approveNo;
        data["FobType"] = this.fobType;
        data["FeeMark"] = this.feeMark;
        data["FeeRate"] = this.feeRate;
        data["FeeCurr"] = this.feeCurr;
        data["InsurMark"] = this.insurMark;
        data["InsurRate"] = this.insurRate;
        data["InsurCurr"] = this.insurCurr;
        data["OtherMark"] = this.otherMark;
        data["OtherRate"] = this.otherRate;
        data["OtherCurr"] = this.otherCurr;
        data["PackageType"] = this.packageType;
        data["Dozen"] = this.dozen;
        data["NetWt"] = this.netWt;
        data["GrossWt"] = this.grossWt;
        data["ExSource"] = this.exSource;
        data["TypeEr"] = this.typeEr;
        data["CredentialNo"] = this.credentialNo;
        data["ContainerQty"] = this.containerQty;
        data["RelationEntryno"] = this.relationEntryno;
        data["RelationEmsno"] = this.relationEmsno;
        data["OverlookNo"] = this.overlookNo;
        data["WarehouseCode"] = this.warehouseCode;
        data["BsyFlag"] = this.bsyFlag;
        data["CusNo"] = this.cusNo;
        data["VoyageNo"] = this.voyageNo;
        data["NoteMark"] = this.noteMark;
        data["ImportFlag"] = this.importFlag;
        data["AttachmentFlag"] = this.attachmentFlag;
        data["OpenFlag"] = this.openFlag;
        data["EntryIdall"] = this.entryIdall;
        data["CompanyCode"] = this.companyCode;
        data["Status"] = this.status;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["Remark1"] = this.remark1;
        data["Remark2"] = this.remark2;
        data["Remark3"] = this.remark3;
        data["Remark4"] = this.remark4;
        data["Remark5"] = this.remark5;
        data["CheckStatus"] = this.checkStatus;
        data["ReceiveDate"] = this.receiveDate;
        data["IeTypeFlag"] = this.ieTypeFlag;
        data["SeriCount"] = this.seriCount;
        data["TradeCountry"] = this.tradeCountry;
        data["EntryIdHg"] = this.entryIdHg;
        data["AgentCredit"] = this.agentCredit;
        data["ReceiveCredit"] = this.receiveCredit;
        data["TradeCredit"] = this.tradeCredit;
        data["PromiseOption"] = this.promiseOption;
        data["BillType"] = this.billType;
        data["EdiCode"] = this.ediCode;
        data["TaxTotal"] = this.taxTotal;
        data["TaxFlag"] = this.taxFlag;
        data["ListType"] = this.listType;
        data["AssureFlag"] = this.assureFlag;
        data["PassFlag"] = this.passFlag;
        data["TaxAaminMark"] = this.taxAaminMark;
        data["CheckFlow"] = this.checkFlow;
        data["MarkNo"] = this.markNo;
        data["DespPortCode"] = this.despPortCode;
        data["EntyPortCode"] = this.entyPortCode;
        data["GoodsPlace"] = this.goodsPlace;
        data["BLNo"] = this.bLNo;
        data["InspOrgCode"] = this.inspOrgCode;
        data["SpecDeclFlag"] = this.specDeclFlag;
        data["PurpOrgCode"] = this.purpOrgCode;
        data["DespDate"] = this.despDate;
        data["CmplDschrgDt"] = this.cmplDschrgDt;
        data["CorrelationReasonFlag"] = this.correlationReasonFlag;
        data["VsaOrgCode"] = this.vsaOrgCode;
        data["OrigBoxFlag"] = this.origBoxFlag;
        data["DeclareName"] = this.declareName;
        data["NoOtherPack"] = this.noOtherPack;
        data["OrgCode"] = this.orgCode;
        data["OverseasConsignorCode"] = this.overseasConsignorCode;
        data["OverseasConsignorCname"] = this.overseasConsignorCname;
        data["OverseasConsignorEname"] = this.overseasConsignorEname;
        data["OverseasConsignorAddr"] = this.overseasConsignorAddr;
        data["OverseasConsigneeCode"] = this.overseasConsigneeCode;
        data["OverseasConsigneeEname"] = this.overseasConsigneeEname;
        data["DomesticConsigneeEname"] = this.domesticConsigneeEname;
        data["CorrelationNo"] = this.correlationNo;
        data["EdiRemark2"] = this.ediRemark2;
        data["EdiRemark"] = this.ediRemark;
        data["DeclCiqCode"] = this.declCiqCode;
        data["OwnerCiqCode"] = this.ownerCiqCode;
        data["TradeCiqCode"] = this.tradeCiqCode;
        data["DeclareType"] = this.declareType;
        data["SeqNo"] = this.seqNo;
        data["OneDate"] = this.oneDate ? this.oneDate.toISOString() : <any>undefined;
        data["FinishDate"] = this.finishDate ? this.finishDate.toISOString() : <any>undefined;
        data["WPartFlag"] = this.wPartFlag;
        data["SendFlag"] = this.sendFlag;
        data["HnNn"] = this.hnNn;
        data["AuditFlag"] = this.auditFlag;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessHead {
    createDateBegin?: Date | undefined;
    createDateEnd?: Date | undefined;
    queryFlag?: string | undefined;
    approveRejectReason?: string | undefined;
    approveRejectDescription?: string | undefined;
    approveResult?: string | undefined;
    approveDate?: Date | undefined;
    approveUser?: string | undefined;
    guid?: number | undefined;
    entryId?: string | undefined;
    entryType?: string | undefined;
    tradeMode?: string | undefined;
    custom?: string | undefined;
    gMark?: string | undefined;
    iePort?: string | undefined;
    ieDate?: string | undefined;
    dDate?: string | undefined;
    billNo?: string | undefined;
    contractNo?: string | undefined;
    emsNo?: string | undefined;
    orderNo?: string | undefined;
    transMode?: string | undefined;
    transName?: string | undefined;
    tradeCo?: string | undefined;
    tradeName?: string | undefined;
    agentCode?: string | undefined;
    agentName?: string | undefined;
    receiveCo?: string | undefined;
    receiveName?: string | undefined;
    companyType?: string | undefined;
    ownerArea?: string | undefined;
    controlMa?: string | undefined;
    taxP?: string | undefined;
    shipCountry?: string | undefined;
    shipPort?: string | undefined;
    dutyMode?: string | undefined;
    taxMode?: string | undefined;
    licenseNo?: string | undefined;
    approveNo?: string | undefined;
    fobType?: string | undefined;
    feeMark?: string | undefined;
    feeRate?: string | undefined;
    feeCurr?: string | undefined;
    insurMark?: string | undefined;
    insurRate?: string | undefined;
    insurCurr?: string | undefined;
    otherMark?: string | undefined;
    otherRate?: string | undefined;
    otherCurr?: string | undefined;
    packageType?: string | undefined;
    dozen?: string | undefined;
    netWt?: string | undefined;
    grossWt?: string | undefined;
    exSource?: string | undefined;
    typeEr?: string | undefined;
    credentialNo?: string | undefined;
    containerQty?: string | undefined;
    relationEntryno?: string | undefined;
    relationEmsno?: string | undefined;
    overlookNo?: string | undefined;
    warehouseCode?: string | undefined;
    bsyFlag?: string | undefined;
    cusNo?: string | undefined;
    voyageNo?: string | undefined;
    noteMark?: string | undefined;
    importFlag?: string | undefined;
    attachmentFlag?: string | undefined;
    openFlag?: string | undefined;
    entryIdall?: string | undefined;
    companyCode?: string | undefined;
    status?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    remark1?: string | undefined;
    remark2?: string | undefined;
    remark3?: string | undefined;
    remark4?: string | undefined;
    remark5?: string | undefined;
    checkStatus?: string | undefined;
    receiveDate?: string | undefined;
    ieTypeFlag?: string | undefined;
    seriCount?: number | undefined;
    tradeCountry?: string | undefined;
    entryIdHg?: string | undefined;
    agentCredit?: string | undefined;
    receiveCredit?: string | undefined;
    tradeCredit?: string | undefined;
    promiseOption?: string | undefined;
    billType?: string | undefined;
    ediCode?: string | undefined;
    taxTotal?: string | undefined;
    taxFlag?: string | undefined;
    listType?: string | undefined;
    assureFlag?: string | undefined;
    passFlag?: string | undefined;
    taxAaminMark?: string | undefined;
    checkFlow?: string | undefined;
    markNo?: string | undefined;
    despPortCode?: string | undefined;
    entyPortCode?: string | undefined;
    goodsPlace?: string | undefined;
    bLNo?: string | undefined;
    inspOrgCode?: string | undefined;
    specDeclFlag?: string | undefined;
    purpOrgCode?: string | undefined;
    despDate?: string | undefined;
    cmplDschrgDt?: string | undefined;
    correlationReasonFlag?: string | undefined;
    vsaOrgCode?: string | undefined;
    origBoxFlag?: string | undefined;
    declareName?: string | undefined;
    noOtherPack?: string | undefined;
    orgCode?: string | undefined;
    overseasConsignorCode?: string | undefined;
    overseasConsignorCname?: string | undefined;
    overseasConsignorEname?: string | undefined;
    overseasConsignorAddr?: string | undefined;
    overseasConsigneeCode?: string | undefined;
    overseasConsigneeEname?: string | undefined;
    domesticConsigneeEname?: string | undefined;
    correlationNo?: string | undefined;
    ediRemark2?: string | undefined;
    ediRemark?: string | undefined;
    declCiqCode?: string | undefined;
    ownerCiqCode?: string | undefined;
    tradeCiqCode?: string | undefined;
    declareType?: string | undefined;
    seqNo?: string | undefined;
    oneDate?: Date | undefined;
    finishDate?: Date | undefined;
    wPartFlag?: string | undefined;
    sendFlag?: number | undefined;
    hnNn?: string | undefined;
    auditFlag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class TgBusinessHeadDto implements ITgBusinessHeadDto {
    head?: EntTgBusinessHead | undefined;
    list?: EntTgBusinessList[] | undefined;
    listContainers?: EntTgBusinessContainer[] | undefined;
    listExSource?: EntTgBusinessExsource[] | undefined;
    billEntryRel?: EntTgBusinessIeentryrel | undefined;

    constructor(data?: ITgBusinessHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.head = data["Head"] ? EntTgBusinessHead.fromJS(data["Head"]) : <any>undefined;
            if (Array.isArray(data["List"])) {
                this.list = [] as any;
                for (let item of data["List"])
                    this.list!.push(EntTgBusinessList.fromJS(item));
            }
            if (Array.isArray(data["ListContainers"])) {
                this.listContainers = [] as any;
                for (let item of data["ListContainers"])
                    this.listContainers!.push(EntTgBusinessContainer.fromJS(item));
            }
            if (Array.isArray(data["ListExSource"])) {
                this.listExSource = [] as any;
                for (let item of data["ListExSource"])
                    this.listExSource!.push(EntTgBusinessExsource.fromJS(item));
            }
            this.billEntryRel = data["BillEntryRel"] ? EntTgBusinessIeentryrel.fromJS(data["BillEntryRel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TgBusinessHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new TgBusinessHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Head"] = this.head ? this.head.toJSON() : <any>undefined;
        if (Array.isArray(this.list)) {
            data["List"] = [];
            for (let item of this.list)
                data["List"].push(item.toJSON());
        }
        if (Array.isArray(this.listContainers)) {
            data["ListContainers"] = [];
            for (let item of this.listContainers)
                data["ListContainers"].push(item.toJSON());
        }
        if (Array.isArray(this.listExSource)) {
            data["ListExSource"] = [];
            for (let item of this.listExSource)
                data["ListExSource"].push(item.toJSON());
        }
        data["BillEntryRel"] = this.billEntryRel ? this.billEntryRel.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITgBusinessHeadDto {
    head?: EntTgBusinessHead | undefined;
    list?: EntTgBusinessList[] | undefined;
    listContainers?: EntTgBusinessContainer[] | undefined;
    listExSource?: EntTgBusinessExsource[] | undefined;
    billEntryRel?: EntTgBusinessIeentryrel | undefined;
}

export class EntTgBusinessList implements IEntTgBusinessList {
    guid?: number | undefined;
    headGuid?: number | undefined;
    purId?: string | undefined;
    invNo?: string | undefined;
    seqNo?: number | undefined;
    copGNo?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    gNo?: string | undefined;
    listGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    qty?: string | undefined;
    unit?: string | undefined;
    price?: string | undefined;
    total?: string | undefined;
    curr?: string | undefined;
    qty1?: string | undefined;
    unit1?: string | undefined;
    qty2?: string | undefined;
    unit2?: string | undefined;
    country?: string | undefined;
    note?: string | undefined;
    dutyMode?: string | undefined;
    useType?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    status?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    purGuid?: string | undefined;
    companyCode?: string | undefined;
    itemNo?: string | undefined;
    priceAverage?: string | undefined;
    totalAll?: string | undefined;
    qtyAll?: string | undefined;
    entryId?: string | undefined;
    complexFlag?: string | undefined;
    wORKUSD?: string | undefined;
    secNo?: number | undefined;
    destinationCountry?: string | undefined;
    netWeight?: string | undefined;
    ciqCode?: string | undefined;
    declGoodsEname?: string | undefined;
    origPlaceCode?: string | undefined;
    purpose?: string | undefined;
    prodValidDt?: string | undefined;
    prodQgp?: string | undefined;
    goodsAttr?: string | undefined;
    stuff?: string | undefined;
    uncode?: string | undefined;
    dangName?: string | undefined;
    dangPackType?: string | undefined;
    dangPackSpec?: string | undefined;
    engManEntCnm?: string | undefined;
    noDangFlag?: string | undefined;
    destCode?: string | undefined;
    goodsSpec?: string | undefined;
    goodsModel?: string | undefined;
    goodsBrand?: string | undefined;
    produceDate?: string | undefined;
    prodBatchNo?: string | undefined;
    districtCode?: string | undefined;
    ciqName?: string | undefined;
    mnuFctrRegNo?: string | undefined;
    mnuFctrRegName?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.headGuid = data["HeadGuid"];
            this.purId = data["PurId"];
            this.invNo = data["InvNo"];
            this.seqNo = data["SeqNo"];
            this.copGNo = data["CopGNo"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.gNo = data["GNo"];
            this.listGNo = data["ListGNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.qty = data["Qty"];
            this.unit = data["Unit"];
            this.price = data["Price"];
            this.total = data["Total"];
            this.curr = data["Curr"];
            this.qty1 = data["Qty1"];
            this.unit1 = data["Unit1"];
            this.qty2 = data["Qty2"];
            this.unit2 = data["Unit2"];
            this.country = data["Country"];
            this.note = data["Note"];
            this.dutyMode = data["DutyMode"];
            this.useType = data["UseType"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.status = data["Status"];
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.purGuid = data["PurGuid"];
            this.companyCode = data["CompanyCode"];
            this.itemNo = data["ItemNo"];
            this.priceAverage = data["PriceAverage"];
            this.totalAll = data["TotalAll"];
            this.qtyAll = data["QtyAll"];
            this.entryId = data["EntryId"];
            this.complexFlag = data["ComplexFlag"];
            this.wORKUSD = data["WORKUSD"];
            this.secNo = data["SecNo"];
            this.destinationCountry = data["DestinationCountry"];
            this.netWeight = data["NetWeight"];
            this.ciqCode = data["CiqCode"];
            this.declGoodsEname = data["DeclGoodsEname"];
            this.origPlaceCode = data["OrigPlaceCode"];
            this.purpose = data["Purpose"];
            this.prodValidDt = data["ProdValidDt"];
            this.prodQgp = data["ProdQgp"];
            this.goodsAttr = data["GoodsAttr"];
            this.stuff = data["Stuff"];
            this.uncode = data["Uncode"];
            this.dangName = data["DangName"];
            this.dangPackType = data["DangPackType"];
            this.dangPackSpec = data["DangPackSpec"];
            this.engManEntCnm = data["EngManEntCnm"];
            this.noDangFlag = data["NoDangFlag"];
            this.destCode = data["DestCode"];
            this.goodsSpec = data["GoodsSpec"];
            this.goodsModel = data["GoodsModel"];
            this.goodsBrand = data["GoodsBrand"];
            this.produceDate = data["ProduceDate"];
            this.prodBatchNo = data["ProdBatchNo"];
            this.districtCode = data["DistrictCode"];
            this.ciqName = data["CiqName"];
            this.mnuFctrRegNo = data["MnuFctrRegNo"];
            this.mnuFctrRegName = data["MnuFctrRegName"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessList {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["HeadGuid"] = this.headGuid;
        data["PurId"] = this.purId;
        data["InvNo"] = this.invNo;
        data["SeqNo"] = this.seqNo;
        data["CopGNo"] = this.copGNo;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["GNo"] = this.gNo;
        data["ListGNo"] = this.listGNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["Qty"] = this.qty;
        data["Unit"] = this.unit;
        data["Price"] = this.price;
        data["Total"] = this.total;
        data["Curr"] = this.curr;
        data["Qty1"] = this.qty1;
        data["Unit1"] = this.unit1;
        data["Qty2"] = this.qty2;
        data["Unit2"] = this.unit2;
        data["Country"] = this.country;
        data["Note"] = this.note;
        data["DutyMode"] = this.dutyMode;
        data["UseType"] = this.useType;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["Status"] = this.status;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["PurGuid"] = this.purGuid;
        data["CompanyCode"] = this.companyCode;
        data["ItemNo"] = this.itemNo;
        data["PriceAverage"] = this.priceAverage;
        data["TotalAll"] = this.totalAll;
        data["QtyAll"] = this.qtyAll;
        data["EntryId"] = this.entryId;
        data["ComplexFlag"] = this.complexFlag;
        data["WORKUSD"] = this.wORKUSD;
        data["SecNo"] = this.secNo;
        data["DestinationCountry"] = this.destinationCountry;
        data["NetWeight"] = this.netWeight;
        data["CiqCode"] = this.ciqCode;
        data["DeclGoodsEname"] = this.declGoodsEname;
        data["OrigPlaceCode"] = this.origPlaceCode;
        data["Purpose"] = this.purpose;
        data["ProdValidDt"] = this.prodValidDt;
        data["ProdQgp"] = this.prodQgp;
        data["GoodsAttr"] = this.goodsAttr;
        data["Stuff"] = this.stuff;
        data["Uncode"] = this.uncode;
        data["DangName"] = this.dangName;
        data["DangPackType"] = this.dangPackType;
        data["DangPackSpec"] = this.dangPackSpec;
        data["EngManEntCnm"] = this.engManEntCnm;
        data["NoDangFlag"] = this.noDangFlag;
        data["DestCode"] = this.destCode;
        data["GoodsSpec"] = this.goodsSpec;
        data["GoodsModel"] = this.goodsModel;
        data["GoodsBrand"] = this.goodsBrand;
        data["ProduceDate"] = this.produceDate;
        data["ProdBatchNo"] = this.prodBatchNo;
        data["DistrictCode"] = this.districtCode;
        data["CiqName"] = this.ciqName;
        data["MnuFctrRegNo"] = this.mnuFctrRegNo;
        data["MnuFctrRegName"] = this.mnuFctrRegName;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessList {
    guid?: number | undefined;
    headGuid?: number | undefined;
    purId?: string | undefined;
    invNo?: string | undefined;
    seqNo?: number | undefined;
    copGNo?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    gNo?: string | undefined;
    listGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    qty?: string | undefined;
    unit?: string | undefined;
    price?: string | undefined;
    total?: string | undefined;
    curr?: string | undefined;
    qty1?: string | undefined;
    unit1?: string | undefined;
    qty2?: string | undefined;
    unit2?: string | undefined;
    country?: string | undefined;
    note?: string | undefined;
    dutyMode?: string | undefined;
    useType?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    status?: string | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    purGuid?: string | undefined;
    companyCode?: string | undefined;
    itemNo?: string | undefined;
    priceAverage?: string | undefined;
    totalAll?: string | undefined;
    qtyAll?: string | undefined;
    entryId?: string | undefined;
    complexFlag?: string | undefined;
    wORKUSD?: string | undefined;
    secNo?: number | undefined;
    destinationCountry?: string | undefined;
    netWeight?: string | undefined;
    ciqCode?: string | undefined;
    declGoodsEname?: string | undefined;
    origPlaceCode?: string | undefined;
    purpose?: string | undefined;
    prodValidDt?: string | undefined;
    prodQgp?: string | undefined;
    goodsAttr?: string | undefined;
    stuff?: string | undefined;
    uncode?: string | undefined;
    dangName?: string | undefined;
    dangPackType?: string | undefined;
    dangPackSpec?: string | undefined;
    engManEntCnm?: string | undefined;
    noDangFlag?: string | undefined;
    destCode?: string | undefined;
    goodsSpec?: string | undefined;
    goodsModel?: string | undefined;
    goodsBrand?: string | undefined;
    produceDate?: string | undefined;
    prodBatchNo?: string | undefined;
    districtCode?: string | undefined;
    ciqName?: string | undefined;
    mnuFctrRegNo?: string | undefined;
    mnuFctrRegName?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessContainer implements IEntTgBusinessContainer {
    guid?: number | undefined;
    headGuid?: number | undefined;
    gNo?: string | undefined;
    containerNo?: string | undefined;
    containerModel?: string | undefined;
    containerWeight?: number | undefined;
    entryId?: string | undefined;
    goodsNo?: string | undefined;
    lclFlag?: string | undefined;
    goodsContaWt?: number | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessContainer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.headGuid = data["HeadGuid"];
            this.gNo = data["GNo"];
            this.containerNo = data["ContainerNo"];
            this.containerModel = data["ContainerModel"];
            this.containerWeight = data["ContainerWeight"];
            this.entryId = data["EntryId"];
            this.goodsNo = data["GoodsNo"];
            this.lclFlag = data["LclFlag"];
            this.goodsContaWt = data["GoodsContaWt"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessContainer {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessContainer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["HeadGuid"] = this.headGuid;
        data["GNo"] = this.gNo;
        data["ContainerNo"] = this.containerNo;
        data["ContainerModel"] = this.containerModel;
        data["ContainerWeight"] = this.containerWeight;
        data["EntryId"] = this.entryId;
        data["GoodsNo"] = this.goodsNo;
        data["LclFlag"] = this.lclFlag;
        data["GoodsContaWt"] = this.goodsContaWt;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessContainer {
    guid?: number | undefined;
    headGuid?: number | undefined;
    gNo?: string | undefined;
    containerNo?: string | undefined;
    containerModel?: string | undefined;
    containerWeight?: number | undefined;
    entryId?: string | undefined;
    goodsNo?: string | undefined;
    lclFlag?: string | undefined;
    goodsContaWt?: number | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessExsource implements IEntTgBusinessExsource {
    guid?: number | undefined;
    headGuid?: number | undefined;
    gNo?: string | undefined;
    exsource?: string | undefined;
    exsourceNo?: string | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessExsource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.headGuid = data["HeadGuid"];
            this.gNo = data["GNo"];
            this.exsource = data["Exsource"];
            this.exsourceNo = data["ExsourceNo"];
            this.entryId = data["EntryId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessExsource {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessExsource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["HeadGuid"] = this.headGuid;
        data["GNo"] = this.gNo;
        data["Exsource"] = this.exsource;
        data["ExsourceNo"] = this.exsourceNo;
        data["EntryId"] = this.entryId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessExsource {
    guid?: number | undefined;
    headGuid?: number | undefined;
    gNo?: string | undefined;
    exsource?: string | undefined;
    exsourceNo?: string | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessIeentryrel implements IEntTgBusinessIeentryrel {
    id?: number | undefined;
    billNo?: string | undefined;
    entryId?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessIeentryrel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.billNo = data["BillNo"];
            this.entryId = data["EntryId"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessIeentryrel {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessIeentryrel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["BillNo"] = this.billNo;
        data["EntryId"] = this.entryId;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessIeentryrel {
    id?: number | undefined;
    billNo?: string | undefined;
    entryId?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class HsCodeSelectDto implements IHsCodeSelectDto {
    tradeCo?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    customerCode?: string | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IHsCodeSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tradeCo = data["TradeCo"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.customerCode = data["CustomerCode"];
            this.emsNo = data["EmsNo"];
            this.copGNo = data["CopGNo"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): HsCodeSelectDto {
        data = typeof data === 'object' ? data : {};
        let result = new HsCodeSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TradeCo"] = this.tradeCo;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CustomerCode"] = this.customerCode;
        data["EmsNo"] = this.emsNo;
        data["CopGNo"] = this.copGNo;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IHsCodeSelectDto {
    tradeCo?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    customerCode?: string | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessUser implements IEntTgBusinessUser {
    guid?: number | undefined;
    useOrgPersonCode?: string | undefined;
    useOrgPersonTel?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.useOrgPersonCode = data["UseOrgPersonCode"];
            this.useOrgPersonTel = data["UseOrgPersonTel"];
            this.headGuid = data["HeadGuid"];
            this.entryId = data["EntryId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessUser {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["UseOrgPersonCode"] = this.useOrgPersonCode;
        data["UseOrgPersonTel"] = this.useOrgPersonTel;
        data["HeadGuid"] = this.headGuid;
        data["EntryId"] = this.entryId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessUser {
    guid?: number | undefined;
    useOrgPersonCode?: string | undefined;
    useOrgPersonTel?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessMarklob implements IEntTgBusinessMarklob {
    guid?: number | undefined;
    preEntryId?: string | undefined;
    attachName?: string | undefined;
    attachType?: string | undefined;
    attachPath?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessMarklob) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.preEntryId = data["PreEntryId"];
            this.attachName = data["AttachName"];
            this.attachType = data["AttachType"];
            this.attachPath = data["AttachPath"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessMarklob {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessMarklob();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["PreEntryId"] = this.preEntryId;
        data["AttachName"] = this.attachName;
        data["AttachType"] = this.attachType;
        data["AttachPath"] = this.attachPath;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessMarklob {
    guid?: number | undefined;
    preEntryId?: string | undefined;
    attachName?: string | undefined;
    attachType?: string | undefined;
    attachPath?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessCoplimit implements IEntTgBusinessCoplimit {
    guid?: number | undefined;
    entQualifNo?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    entQualifTypeCode?: string | undefined;
    entCommitment?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessCoplimit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.entQualifNo = data["EntQualifNo"];
            this.headGuid = data["HeadGuid"];
            this.entryId = data["EntryId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.entQualifTypeCode = data["EntQualifTypeCode"];
            this.entCommitment = data["EntCommitment"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessCoplimit {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessCoplimit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["EntQualifNo"] = this.entQualifNo;
        data["HeadGuid"] = this.headGuid;
        data["EntryId"] = this.entryId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["EntQualifTypeCode"] = this.entQualifTypeCode;
        data["EntCommitment"] = this.entCommitment;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessCoplimit {
    guid?: number | undefined;
    entQualifNo?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    entQualifTypeCode?: string | undefined;
    entCommitment?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessGoodslimit implements IEntTgBusinessGoodslimit {
    guid?: number | undefined;
    entryId?: string | undefined;
    seqNo?: number | undefined;
    licTypeCode?: string | undefined;
    licenceNo?: string | undefined;
    licWrtofDetailNo?: string | undefined;
    licWrtofQty?: string | undefined;
    headGuid?: number | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessGoodslimit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.entryId = data["EntryId"];
            this.seqNo = data["SeqNo"];
            this.licTypeCode = data["LicTypeCode"];
            this.licenceNo = data["LicenceNo"];
            this.licWrtofDetailNo = data["LicWrtofDetailNo"];
            this.licWrtofQty = data["LicWrtofQty"];
            this.headGuid = data["HeadGuid"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessGoodslimit {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessGoodslimit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["EntryId"] = this.entryId;
        data["SeqNo"] = this.seqNo;
        data["LicTypeCode"] = this.licTypeCode;
        data["LicenceNo"] = this.licenceNo;
        data["LicWrtofDetailNo"] = this.licWrtofDetailNo;
        data["LicWrtofQty"] = this.licWrtofQty;
        data["HeadGuid"] = this.headGuid;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessGoodslimit {
    guid?: number | undefined;
    entryId?: string | undefined;
    seqNo?: number | undefined;
    licTypeCode?: string | undefined;
    licenceNo?: string | undefined;
    licWrtofDetailNo?: string | undefined;
    licWrtofQty?: string | undefined;
    headGuid?: number | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessGoodslimitvin implements IEntTgBusinessGoodslimitvin {
    guid?: number | undefined;
    licTypeCode?: string | undefined;
    licenceNo?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    vinNo?: string | undefined;
    billLadDate?: Date | undefined;
    qualityQgp?: string | undefined;
    motorNo?: string | undefined;
    vinCode?: string | undefined;
    chassisNo?: string | undefined;
    invoiceNum?: number | undefined;
    prodCnnm?: string | undefined;
    prodEnnm?: string | undefined;
    modelEn?: string | undefined;
    pricePerUnit?: string | undefined;
    invoiceNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessGoodslimitvin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.licTypeCode = data["LicTypeCode"];
            this.licenceNo = data["LicenceNo"];
            this.headGuid = data["HeadGuid"];
            this.entryId = data["EntryId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.vinNo = data["VinNo"];
            this.billLadDate = data["BillLadDate"] ? new Date(data["BillLadDate"].toString()) : <any>undefined;
            this.qualityQgp = data["QualityQgp"];
            this.motorNo = data["MotorNo"];
            this.vinCode = data["VinCode"];
            this.chassisNo = data["ChassisNo"];
            this.invoiceNum = data["InvoiceNum"];
            this.prodCnnm = data["ProdCnnm"];
            this.prodEnnm = data["ProdEnnm"];
            this.modelEn = data["ModelEn"];
            this.pricePerUnit = data["PricePerUnit"];
            this.invoiceNo = data["InvoiceNo"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessGoodslimitvin {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessGoodslimitvin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["LicTypeCode"] = this.licTypeCode;
        data["LicenceNo"] = this.licenceNo;
        data["HeadGuid"] = this.headGuid;
        data["EntryId"] = this.entryId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["VinNo"] = this.vinNo;
        data["BillLadDate"] = this.billLadDate ? this.billLadDate.toISOString() : <any>undefined;
        data["QualityQgp"] = this.qualityQgp;
        data["MotorNo"] = this.motorNo;
        data["VinCode"] = this.vinCode;
        data["ChassisNo"] = this.chassisNo;
        data["InvoiceNum"] = this.invoiceNum;
        data["ProdCnnm"] = this.prodCnnm;
        data["ProdEnnm"] = this.prodEnnm;
        data["ModelEn"] = this.modelEn;
        data["PricePerUnit"] = this.pricePerUnit;
        data["InvoiceNo"] = this.invoiceNo;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessGoodslimitvin {
    guid?: number | undefined;
    licTypeCode?: string | undefined;
    licenceNo?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    vinNo?: string | undefined;
    billLadDate?: Date | undefined;
    qualityQgp?: string | undefined;
    motorNo?: string | undefined;
    vinCode?: string | undefined;
    chassisNo?: string | undefined;
    invoiceNum?: number | undefined;
    prodCnnm?: string | undefined;
    prodEnnm?: string | undefined;
    modelEn?: string | undefined;
    pricePerUnit?: string | undefined;
    invoiceNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessRequestcert implements IEntTgBusinessRequestcert {
    guid?: number | undefined;
    appCertCode?: string | undefined;
    applOri?: string | undefined;
    applCopyQuan?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessRequestcert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.appCertCode = data["AppCertCode"];
            this.applOri = data["ApplOri"];
            this.applCopyQuan = data["ApplCopyQuan"];
            this.headGuid = data["HeadGuid"];
            this.entryId = data["EntryId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessRequestcert {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessRequestcert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["AppCertCode"] = this.appCertCode;
        data["ApplOri"] = this.applOri;
        data["ApplCopyQuan"] = this.applCopyQuan;
        data["HeadGuid"] = this.headGuid;
        data["EntryId"] = this.entryId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessRequestcert {
    guid?: number | undefined;
    appCertCode?: string | undefined;
    applOri?: string | undefined;
    applCopyQuan?: string | undefined;
    headGuid?: number | undefined;
    entryId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpSalesinvoice implements IEntCustomsErpSalesinvoice {
    invoiceDateBegin?: Date | undefined;
    invoiceDateEnd?: Date | undefined;
    id?: number | undefined;
    invoiceNo?: string | undefined;
    referenceNo?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    invoicePrice?: number | undefined;
    detailAmount?: number | undefined;
    transportCost?: number | undefined;
    insuranceCost?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    invoiceDate?: Date | undefined;
    invoiceType?: string | undefined;
    invoiceTypeDetail?: string | undefined;
    iBAN?: string | undefined;
    bICSwift?: string | undefined;
    bank?: string | undefined;
    transportMode?: string | undefined;
    oceanVessel?: string | undefined;
    voyageNo?: string | undefined;
    billNo?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpSalesinvoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.invoiceDateBegin = data["InvoiceDateBegin"] ? new Date(data["InvoiceDateBegin"].toString()) : <any>undefined;
            this.invoiceDateEnd = data["InvoiceDateEnd"] ? new Date(data["InvoiceDateEnd"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.invoiceNo = data["InvoiceNo"];
            this.referenceNo = data["ReferenceNo"];
            this.sellerCompanyCodeVAT = data["SellerCompanyCodeVAT"];
            this.sellerCountryISOCode = data["SellerCountryISOCode"];
            this.sellerCountryZHCode = data["SellerCountryZHCode"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.contractNO = data["ContractNO"];
            this.invoicePrice = data["InvoicePrice"];
            this.detailAmount = data["DetailAmount"];
            this.transportCost = data["TransportCost"];
            this.insuranceCost = data["InsuranceCost"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.invoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.invoiceType = data["InvoiceType"];
            this.invoiceTypeDetail = data["InvoiceTypeDetail"];
            this.iBAN = data["IBAN"];
            this.bICSwift = data["BICSwift"];
            this.bank = data["Bank"];
            this.transportMode = data["TransportMode"];
            this.oceanVessel = data["OceanVessel"];
            this.voyageNo = data["VoyageNo"];
            this.billNo = data["BillNo"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpSalesinvoice {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpSalesinvoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InvoiceDateBegin"] = this.invoiceDateBegin ? this.invoiceDateBegin.toISOString() : <any>undefined;
        data["InvoiceDateEnd"] = this.invoiceDateEnd ? this.invoiceDateEnd.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["InvoiceNo"] = this.invoiceNo;
        data["ReferenceNo"] = this.referenceNo;
        data["SellerCompanyCodeVAT"] = this.sellerCompanyCodeVAT;
        data["SellerCountryISOCode"] = this.sellerCountryISOCode;
        data["SellerCountryZHCode"] = this.sellerCountryZHCode;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["ContractNO"] = this.contractNO;
        data["InvoicePrice"] = this.invoicePrice;
        data["DetailAmount"] = this.detailAmount;
        data["TransportCost"] = this.transportCost;
        data["InsuranceCost"] = this.insuranceCost;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["InvoiceType"] = this.invoiceType;
        data["InvoiceTypeDetail"] = this.invoiceTypeDetail;
        data["IBAN"] = this.iBAN;
        data["BICSwift"] = this.bICSwift;
        data["Bank"] = this.bank;
        data["TransportMode"] = this.transportMode;
        data["OceanVessel"] = this.oceanVessel;
        data["VoyageNo"] = this.voyageNo;
        data["BillNo"] = this.billNo;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpSalesinvoice {
    invoiceDateBegin?: Date | undefined;
    invoiceDateEnd?: Date | undefined;
    id?: number | undefined;
    invoiceNo?: string | undefined;
    referenceNo?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    invoicePrice?: number | undefined;
    detailAmount?: number | undefined;
    transportCost?: number | undefined;
    insuranceCost?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    invoiceDate?: Date | undefined;
    invoiceType?: string | undefined;
    invoiceTypeDetail?: string | undefined;
    iBAN?: string | undefined;
    bICSwift?: string | undefined;
    bank?: string | undefined;
    transportMode?: string | undefined;
    oceanVessel?: string | undefined;
    voyageNo?: string | undefined;
    billNo?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpSalesinvoicelist implements IEntCustomsErpSalesinvoicelist {
    id?: number | undefined;
    invoiceNo?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    purchaseOrderNO?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    totalPrice?: number | undefined;
    othreCosts?: number | undefined;
    exchangeRate?: number | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    originCountryCode?: string | undefined;
    originCountryISOCode?: string | undefined;
    originCountryNameEn?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupNetWeight?: number | undefined;
    groupNetWeightUnit?: string | undefined;
    netWeight?: number | undefined;
    netWeightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    hsCode?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpSalesinvoicelist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.invoiceNo = data["InvoiceNo"];
            this.sellerCompanyCodeVAT = data["SellerCompanyCodeVAT"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.item = data["Item"];
            this.materialNO = data["MaterialNO"];
            this.totalPrice = data["TotalPrice"];
            this.othreCosts = data["OthreCosts"];
            this.exchangeRate = data["ExchangeRate"];
            this.goodsDesZH = data["GoodsDesZH"];
            this.goodsDesEN = data["GoodsDesEN"];
            this.originCountryCode = data["OriginCountryCode"];
            this.originCountryISOCode = data["OriginCountryISOCode"];
            this.originCountryNameEn = data["OriginCountryNameEn"];
            this.groupQuantity = data["GroupQuantity"];
            this.groupQuantityUnit = data["GroupQuantityUnit"];
            this.quantity = data["Quantity"];
            this.quantityUnit = data["QuantityUnit"];
            this.groupWeight = data["GroupWeight"];
            this.groupWeightUnit = data["GroupWeightUnit"];
            this.weight = data["Weight"];
            this.weightUnit = data["WeightUnit"];
            this.groupNetWeight = data["GroupNetWeight"];
            this.groupNetWeightUnit = data["GroupNetWeightUnit"];
            this.netWeight = data["NetWeight"];
            this.netWeightUnit = data["NetWeightUnit"];
            this.groupUnitPrice = data["GroupUnitPrice"];
            this.unitPrice = data["UnitPrice"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.totalQuantity = data["TotalQuantity"];
            this.totalQuantityUnit = data["TotalQuantityUnit"];
            this.hsCode = data["HsCode"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpSalesinvoicelist {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpSalesinvoicelist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["InvoiceNo"] = this.invoiceNo;
        data["SellerCompanyCodeVAT"] = this.sellerCompanyCodeVAT;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["Item"] = this.item;
        data["MaterialNO"] = this.materialNO;
        data["TotalPrice"] = this.totalPrice;
        data["OthreCosts"] = this.othreCosts;
        data["ExchangeRate"] = this.exchangeRate;
        data["GoodsDesZH"] = this.goodsDesZH;
        data["GoodsDesEN"] = this.goodsDesEN;
        data["OriginCountryCode"] = this.originCountryCode;
        data["OriginCountryISOCode"] = this.originCountryISOCode;
        data["OriginCountryNameEn"] = this.originCountryNameEn;
        data["GroupQuantity"] = this.groupQuantity;
        data["GroupQuantityUnit"] = this.groupQuantityUnit;
        data["Quantity"] = this.quantity;
        data["QuantityUnit"] = this.quantityUnit;
        data["GroupWeight"] = this.groupWeight;
        data["GroupWeightUnit"] = this.groupWeightUnit;
        data["Weight"] = this.weight;
        data["WeightUnit"] = this.weightUnit;
        data["GroupNetWeight"] = this.groupNetWeight;
        data["GroupNetWeightUnit"] = this.groupNetWeightUnit;
        data["NetWeight"] = this.netWeight;
        data["NetWeightUnit"] = this.netWeightUnit;
        data["GroupUnitPrice"] = this.groupUnitPrice;
        data["UnitPrice"] = this.unitPrice;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["TotalQuantity"] = this.totalQuantity;
        data["TotalQuantityUnit"] = this.totalQuantityUnit;
        data["HsCode"] = this.hsCode;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpSalesinvoicelist {
    id?: number | undefined;
    invoiceNo?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    purchaseOrderNO?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    totalPrice?: number | undefined;
    othreCosts?: number | undefined;
    exchangeRate?: number | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    originCountryCode?: string | undefined;
    originCountryISOCode?: string | undefined;
    originCountryNameEn?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupNetWeight?: number | undefined;
    groupNetWeightUnit?: string | undefined;
    netWeight?: number | undefined;
    netWeightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    hsCode?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class OperFileModel implements IOperFileModel {
    name?: string | undefined;
    relativeUri?: string | undefined;
    size?: string | undefined;

    constructor(data?: IOperFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.relativeUri = data["RelativeUri"];
            this.size = data["Size"];
        }
    }

    static fromJS(data: any): OperFileModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperFileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["RelativeUri"] = this.relativeUri;
        data["Size"] = this.size;
        return data; 
    }
}

export interface IOperFileModel {
    name?: string | undefined;
    relativeUri?: string | undefined;
    size?: string | undefined;
}

export class ParameterMgr implements IParameterMgr {
    sb?: any | undefined;
    parasList?: { [key: string]: any; } | undefined;
    orderBy?: string | undefined;
    sqlText?: string | undefined;
    whereStr?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;

    constructor(data?: IParameterMgr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sb = data["Sb"];
            if (data["ParasList"]) {
                this.parasList = {} as any;
                for (let key in data["ParasList"]) {
                    if (data["ParasList"].hasOwnProperty(key))
                        this.parasList![key] = data["ParasList"][key];
                }
            }
            this.orderBy = data["OrderBy"];
            this.sqlText = data["SqlText"];
            this.whereStr = data["WhereStr"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
        }
    }

    static fromJS(data: any): ParameterMgr {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterMgr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Sb"] = this.sb;
        if (this.parasList) {
            data["ParasList"] = {};
            for (let key in this.parasList) {
                if (this.parasList.hasOwnProperty(key))
                    data["ParasList"][key] = this.parasList[key];
            }
        }
        data["OrderBy"] = this.orderBy;
        data["SqlText"] = this.sqlText;
        data["WhereStr"] = this.whereStr;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        return data; 
    }
}

export interface IParameterMgr {
    sb?: any | undefined;
    parasList?: { [key: string]: any; } | undefined;
    orderBy?: string | undefined;
    sqlText?: string | undefined;
    whereStr?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
}

export class EntBasCustomerEmsno implements IEntBasCustomerEmsno {
    isEffectiveText?: string | undefined;
    id?: number | undefined;
    copErpNo?: string | undefined;
    copEmsNo?: string | undefined;
    declareDate?: Date | undefined;
    endDate?: Date | undefined;
    createTime?: Date | undefined;
    isEffective?: string | undefined;
    customerCode?: string | undefined;
    copType?: number | undefined;
    oftype?: number | undefined;
    createBy?: string | undefined;
    emsNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntBasCustomerEmsno) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEffectiveText = data["IsEffectiveText"];
            this.id = data["Id"];
            this.copErpNo = data["CopErpNo"];
            this.copEmsNo = data["CopEmsNo"];
            this.declareDate = data["DeclareDate"] ? new Date(data["DeclareDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.isEffective = data["IsEffective"];
            this.customerCode = data["CustomerCode"];
            this.copType = data["CopType"];
            this.oftype = data["Oftype"];
            this.createBy = data["CreateBy"];
            this.emsNo = data["EmsNo"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntBasCustomerEmsno {
        data = typeof data === 'object' ? data : {};
        let result = new EntBasCustomerEmsno();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsEffectiveText"] = this.isEffectiveText;
        data["Id"] = this.id;
        data["CopErpNo"] = this.copErpNo;
        data["CopEmsNo"] = this.copEmsNo;
        data["DeclareDate"] = this.declareDate ? this.declareDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["IsEffective"] = this.isEffective;
        data["CustomerCode"] = this.customerCode;
        data["CopType"] = this.copType;
        data["Oftype"] = this.oftype;
        data["CreateBy"] = this.createBy;
        data["EmsNo"] = this.emsNo;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntBasCustomerEmsno {
    isEffectiveText?: string | undefined;
    id?: number | undefined;
    copErpNo?: string | undefined;
    copEmsNo?: string | undefined;
    declareDate?: Date | undefined;
    endDate?: Date | undefined;
    createTime?: Date | undefined;
    isEffective?: string | undefined;
    customerCode?: string | undefined;
    copType?: number | undefined;
    oftype?: number | undefined;
    createBy?: string | undefined;
    emsNo?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBusFeeTemplate implements IEntGoldenBusFeeTemplate {
    busTypeName?: string | undefined;
    busModeName?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    customerName?: string | undefined;
    busType?: string | undefined;
    busMode?: string | undefined;
    feeCode?: string | undefined;
    feeName?: string | undefined;
    feeMoney?: number | undefined;
    taxRate?: number | undefined;
    curr?: string | undefined;
    currCn?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    receivableDirection?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBusFeeTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.busTypeName = data["BusTypeName"];
            this.busModeName = data["BusModeName"];
            this.id = data["Id"];
            this.customerCode = data["CustomerCode"];
            this.customerName = data["CustomerName"];
            this.busType = data["BusType"];
            this.busMode = data["BusMode"];
            this.feeCode = data["FeeCode"];
            this.feeName = data["FeeName"];
            this.feeMoney = data["FeeMoney"];
            this.taxRate = data["TaxRate"];
            this.curr = data["Curr"];
            this.currCn = data["CurrCn"];
            this.remark = data["Remark"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.receivableDirection = data["ReceivableDirection"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBusFeeTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBusFeeTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BusTypeName"] = this.busTypeName;
        data["BusModeName"] = this.busModeName;
        data["Id"] = this.id;
        data["CustomerCode"] = this.customerCode;
        data["CustomerName"] = this.customerName;
        data["BusType"] = this.busType;
        data["BusMode"] = this.busMode;
        data["FeeCode"] = this.feeCode;
        data["FeeName"] = this.feeName;
        data["FeeMoney"] = this.feeMoney;
        data["TaxRate"] = this.taxRate;
        data["Curr"] = this.curr;
        data["CurrCn"] = this.currCn;
        data["Remark"] = this.remark;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["ReceivableDirection"] = this.receivableDirection;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBusFeeTemplate {
    busTypeName?: string | undefined;
    busModeName?: string | undefined;
    id?: number | undefined;
    customerCode?: string | undefined;
    customerName?: string | undefined;
    busType?: string | undefined;
    busMode?: string | undefined;
    feeCode?: string | undefined;
    feeName?: string | undefined;
    feeMoney?: number | undefined;
    taxRate?: number | undefined;
    curr?: string | undefined;
    currCn?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    receivableDirection?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenBusFeeTemplate implements IReturnResultOfPageListOfEntGoldenBusFeeTemplate {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenBusFeeTemplate | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenBusFeeTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenBusFeeTemplate.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenBusFeeTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenBusFeeTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenBusFeeTemplate {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenBusFeeTemplate | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenBusFeeTemplate implements IPageListOfEntGoldenBusFeeTemplate {
    dataSource?: EntGoldenBusFeeTemplate[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenBusFeeTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenBusFeeTemplate.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenBusFeeTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenBusFeeTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenBusFeeTemplate {
    dataSource?: EntGoldenBusFeeTemplate[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBusTurn implements IEntGoldenBusTurn {
    id?: number | undefined;
    busNo?: string | undefined;
    handleCode?: string | undefined;
    handleName?: string | undefined;
    handleUser?: string | undefined;
    handleDate?: Date | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBusTurn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.busNo = data["BusNo"];
            this.handleCode = data["HandleCode"];
            this.handleName = data["HandleName"];
            this.handleUser = data["HandleUser"];
            this.handleDate = data["HandleDate"] ? new Date(data["HandleDate"].toString()) : <any>undefined;
            this.remark = data["Remark"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBusTurn {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBusTurn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["BusNo"] = this.busNo;
        data["HandleCode"] = this.handleCode;
        data["HandleName"] = this.handleName;
        data["HandleUser"] = this.handleUser;
        data["HandleDate"] = this.handleDate ? this.handleDate.toISOString() : <any>undefined;
        data["Remark"] = this.remark;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBusTurn {
    id?: number | undefined;
    busNo?: string | undefined;
    handleCode?: string | undefined;
    handleName?: string | undefined;
    handleUser?: string | undefined;
    handleDate?: Date | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntHscodes implements IEntHscodes {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
    declareElements?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    mfnImportTaxRate?: number | undefined;
    importTaxRate?: number | undefined;
    tempImportTaxRate?: number | undefined;
    consumptionTaxRate?: number | undefined;
    exportTaxRate?: number | undefined;
    exportReturnTaxRate?: number | undefined;
    addedValueTaxRate?: number | undefined;
    customsSupervision?: string | undefined;
    ciqCategory?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    enterpriseNo?: string | undefined;
    additionCode?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntHscodes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.code = data["Code"];
            this.name = data["Name"];
            this.declareElements = data["DeclareElements"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.mfnImportTaxRate = data["MfnImportTaxRate"];
            this.importTaxRate = data["ImportTaxRate"];
            this.tempImportTaxRate = data["TempImportTaxRate"];
            this.consumptionTaxRate = data["ConsumptionTaxRate"];
            this.exportTaxRate = data["ExportTaxRate"];
            this.exportReturnTaxRate = data["ExportReturnTaxRate"];
            this.addedValueTaxRate = data["AddedValueTaxRate"];
            this.customsSupervision = data["CustomsSupervision"];
            this.ciqCategory = data["CiqCategory"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.enterpriseNo = data["EnterpriseNo"];
            this.additionCode = data["AdditionCode"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntHscodes {
        data = typeof data === 'object' ? data : {};
        let result = new EntHscodes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Code"] = this.code;
        data["Name"] = this.name;
        data["DeclareElements"] = this.declareElements;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["MfnImportTaxRate"] = this.mfnImportTaxRate;
        data["ImportTaxRate"] = this.importTaxRate;
        data["TempImportTaxRate"] = this.tempImportTaxRate;
        data["ConsumptionTaxRate"] = this.consumptionTaxRate;
        data["ExportTaxRate"] = this.exportTaxRate;
        data["ExportReturnTaxRate"] = this.exportReturnTaxRate;
        data["AddedValueTaxRate"] = this.addedValueTaxRate;
        data["CustomsSupervision"] = this.customsSupervision;
        data["CiqCategory"] = this.ciqCategory;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["EnterpriseNo"] = this.enterpriseNo;
        data["AdditionCode"] = this.additionCode;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntHscodes {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
    declareElements?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    mfnImportTaxRate?: number | undefined;
    importTaxRate?: number | undefined;
    tempImportTaxRate?: number | undefined;
    consumptionTaxRate?: number | undefined;
    exportTaxRate?: number | undefined;
    exportReturnTaxRate?: number | undefined;
    addedValueTaxRate?: number | undefined;
    customsSupervision?: string | undefined;
    ciqCategory?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    enterpriseNo?: string | undefined;
    additionCode?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpInbound implements IEntCustomsErpInbound {
    id?: number | undefined;
    invoiceNo?: string | undefined;
    referenceNo?: string | undefined;
    cNCompanyCode?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    transportMode?: string | undefined;
    oceanVessel?: string | undefined;
    voyageNo?: string | undefined;
    billNo?: string | undefined;
    bookingNumber?: string | undefined;
    status?: string | undefined;
    receiveDate?: Date | undefined;
    shipperName?: string | undefined;
    shipperCompanyCode?: string | undefined;
    forwardingAgent?: string | undefined;
    forwarderCompanyCode?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpInbound) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.invoiceNo = data["InvoiceNo"];
            this.referenceNo = data["ReferenceNo"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.sellerCompanyCodeVAT = data["SellerCompanyCodeVAT"];
            this.sellerCountryISOCode = data["SellerCountryISOCode"];
            this.sellerCountryZHCode = data["SellerCountryZHCode"];
            this.contractNO = data["ContractNO"];
            this.agreementID = data["AgreementID"];
            this.transportMode = data["TransportMode"];
            this.oceanVessel = data["OceanVessel"];
            this.voyageNo = data["VoyageNo"];
            this.billNo = data["BillNo"];
            this.bookingNumber = data["BookingNumber"];
            this.status = data["Status"];
            this.receiveDate = data["ReceiveDate"] ? new Date(data["ReceiveDate"].toString()) : <any>undefined;
            this.shipperName = data["ShipperName"];
            this.shipperCompanyCode = data["ShipperCompanyCode"];
            this.forwardingAgent = data["ForwardingAgent"];
            this.forwarderCompanyCode = data["ForwarderCompanyCode"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpInbound {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpInbound();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["InvoiceNo"] = this.invoiceNo;
        data["ReferenceNo"] = this.referenceNo;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["SellerCompanyCodeVAT"] = this.sellerCompanyCodeVAT;
        data["SellerCountryISOCode"] = this.sellerCountryISOCode;
        data["SellerCountryZHCode"] = this.sellerCountryZHCode;
        data["ContractNO"] = this.contractNO;
        data["AgreementID"] = this.agreementID;
        data["TransportMode"] = this.transportMode;
        data["OceanVessel"] = this.oceanVessel;
        data["VoyageNo"] = this.voyageNo;
        data["BillNo"] = this.billNo;
        data["BookingNumber"] = this.bookingNumber;
        data["Status"] = this.status;
        data["ReceiveDate"] = this.receiveDate ? this.receiveDate.toISOString() : <any>undefined;
        data["ShipperName"] = this.shipperName;
        data["ShipperCompanyCode"] = this.shipperCompanyCode;
        data["ForwardingAgent"] = this.forwardingAgent;
        data["ForwarderCompanyCode"] = this.forwarderCompanyCode;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpInbound {
    id?: number | undefined;
    invoiceNo?: string | undefined;
    referenceNo?: string | undefined;
    cNCompanyCode?: string | undefined;
    sellerCompanyCodeVAT?: string | undefined;
    sellerCountryISOCode?: string | undefined;
    sellerCountryZHCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    transportMode?: string | undefined;
    oceanVessel?: string | undefined;
    voyageNo?: string | undefined;
    billNo?: string | undefined;
    bookingNumber?: string | undefined;
    status?: string | undefined;
    receiveDate?: Date | undefined;
    shipperName?: string | undefined;
    shipperCompanyCode?: string | undefined;
    forwardingAgent?: string | undefined;
    forwarderCompanyCode?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpInbounddetail implements IEntCustomsErpInbounddetail {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    cNCompanyCode?: string | undefined;
    containerNo?: string | undefined;
    invoiceNo?: string | undefined;
    grossWt?: number | undefined;
    grossUnit?: string | undefined;
    measurement?: number | undefined;
    measurementUnit?: string | undefined;
    materialNO?: string | undefined;
    palletNo?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupNetWeight?: number | undefined;
    groupNetWeightUnit?: string | undefined;
    groupVolume?: number | undefined;
    groupVolumeUnit?: string | undefined;
    volume?: number | undefined;
    volumeUnit?: string | undefined;
    shippingSealNo?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpInbounddetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.containerNo = data["ContainerNo"];
            this.invoiceNo = data["InvoiceNo"];
            this.grossWt = data["GrossWt"];
            this.grossUnit = data["GrossUnit"];
            this.measurement = data["Measurement"];
            this.measurementUnit = data["MeasurementUnit"];
            this.materialNO = data["MaterialNO"];
            this.palletNo = data["PalletNo"];
            this.goodsDesZH = data["GoodsDesZH"];
            this.goodsDesEN = data["GoodsDesEN"];
            this.totalQuantity = data["TotalQuantity"];
            this.totalQuantityUnit = data["TotalQuantityUnit"];
            this.groupQuantity = data["GroupQuantity"];
            this.groupQuantityUnit = data["GroupQuantityUnit"];
            this.quantity = data["Quantity"];
            this.quantityUnit = data["QuantityUnit"];
            this.groupWeight = data["GroupWeight"];
            this.groupWeightUnit = data["GroupWeightUnit"];
            this.weight = data["Weight"];
            this.weightUnit = data["WeightUnit"];
            this.groupNetWeight = data["GroupNetWeight"];
            this.groupNetWeightUnit = data["GroupNetWeightUnit"];
            this.groupVolume = data["GroupVolume"];
            this.groupVolumeUnit = data["GroupVolumeUnit"];
            this.volume = data["Volume"];
            this.volumeUnit = data["VolumeUnit"];
            this.shippingSealNo = data["ShippingSealNo"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpInbounddetail {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpInbounddetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["ContainerNo"] = this.containerNo;
        data["InvoiceNo"] = this.invoiceNo;
        data["GrossWt"] = this.grossWt;
        data["GrossUnit"] = this.grossUnit;
        data["Measurement"] = this.measurement;
        data["MeasurementUnit"] = this.measurementUnit;
        data["MaterialNO"] = this.materialNO;
        data["PalletNo"] = this.palletNo;
        data["GoodsDesZH"] = this.goodsDesZH;
        data["GoodsDesEN"] = this.goodsDesEN;
        data["TotalQuantity"] = this.totalQuantity;
        data["TotalQuantityUnit"] = this.totalQuantityUnit;
        data["GroupQuantity"] = this.groupQuantity;
        data["GroupQuantityUnit"] = this.groupQuantityUnit;
        data["Quantity"] = this.quantity;
        data["QuantityUnit"] = this.quantityUnit;
        data["GroupWeight"] = this.groupWeight;
        data["GroupWeightUnit"] = this.groupWeightUnit;
        data["Weight"] = this.weight;
        data["WeightUnit"] = this.weightUnit;
        data["GroupNetWeight"] = this.groupNetWeight;
        data["GroupNetWeightUnit"] = this.groupNetWeightUnit;
        data["GroupVolume"] = this.groupVolume;
        data["GroupVolumeUnit"] = this.groupVolumeUnit;
        data["Volume"] = this.volume;
        data["VolumeUnit"] = this.volumeUnit;
        data["ShippingSealNo"] = this.shippingSealNo;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpInbounddetail {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    cNCompanyCode?: string | undefined;
    containerNo?: string | undefined;
    invoiceNo?: string | undefined;
    grossWt?: number | undefined;
    grossUnit?: string | undefined;
    measurement?: number | undefined;
    measurementUnit?: string | undefined;
    materialNO?: string | undefined;
    palletNo?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupNetWeight?: number | undefined;
    groupNetWeightUnit?: string | undefined;
    groupVolume?: number | undefined;
    groupVolumeUnit?: string | undefined;
    volume?: number | undefined;
    volumeUnit?: string | undefined;
    shippingSealNo?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessInvoice implements IEntTgBusinessInvoice {
    guid?: number | undefined;
    statementNo?: string | undefined;
    invoiceBatchNo?: string | undefined;
    invoiceNo?: string | undefined;
    feeFlag?: string | undefined;
    invoiceRate?: number | undefined;
    invoiceTotal?: number | undefined;
    invoiceDate?: Date | undefined;
    billHeaderNo?: string | undefined;
    billHeaderName?: string | undefined;
    gName?: string | undefined;
    entrustNo?: string | undefined;
    entrustName?: string | undefined;
    total?: number | undefined;
    remark?: string | undefined;
    blankOutUser?: string | undefined;
    blankOutDate?: Date | undefined;
    invoiceFlag?: string | undefined;
    curr?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    voucherNo?: string | undefined;
    invoiceEndNo?: string | undefined;
    receiveTotal?: number | undefined;
    invoiceRemark?: string | undefined;
    flag?: string | undefined;
    writeOffTime?: Date | undefined;
    writeOffUser?: string | undefined;
    voucherNo1?: string | undefined;
    voucherNo3?: string | undefined;
    voucherNo7?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessInvoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.statementNo = data["StatementNo"];
            this.invoiceBatchNo = data["InvoiceBatchNo"];
            this.invoiceNo = data["InvoiceNo"];
            this.feeFlag = data["FeeFlag"];
            this.invoiceRate = data["InvoiceRate"];
            this.invoiceTotal = data["InvoiceTotal"];
            this.invoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.billHeaderNo = data["BillHeaderNo"];
            this.billHeaderName = data["BillHeaderName"];
            this.gName = data["GName"];
            this.entrustNo = data["EntrustNo"];
            this.entrustName = data["EntrustName"];
            this.total = data["Total"];
            this.remark = data["Remark"];
            this.blankOutUser = data["BlankOutUser"];
            this.blankOutDate = data["BlankOutDate"] ? new Date(data["BlankOutDate"].toString()) : <any>undefined;
            this.invoiceFlag = data["InvoiceFlag"];
            this.curr = data["Curr"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.voucherNo = data["VoucherNo"];
            this.invoiceEndNo = data["InvoiceEndNo"];
            this.receiveTotal = data["ReceiveTotal"];
            this.invoiceRemark = data["InvoiceRemark"];
            this.flag = data["Flag"];
            this.writeOffTime = data["WriteOffTime"] ? new Date(data["WriteOffTime"].toString()) : <any>undefined;
            this.writeOffUser = data["WriteOffUser"];
            this.voucherNo1 = data["VoucherNo1"];
            this.voucherNo3 = data["VoucherNo3"];
            this.voucherNo7 = data["VoucherNo7"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessInvoice {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessInvoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["StatementNo"] = this.statementNo;
        data["InvoiceBatchNo"] = this.invoiceBatchNo;
        data["InvoiceNo"] = this.invoiceNo;
        data["FeeFlag"] = this.feeFlag;
        data["InvoiceRate"] = this.invoiceRate;
        data["InvoiceTotal"] = this.invoiceTotal;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["BillHeaderNo"] = this.billHeaderNo;
        data["BillHeaderName"] = this.billHeaderName;
        data["GName"] = this.gName;
        data["EntrustNo"] = this.entrustNo;
        data["EntrustName"] = this.entrustName;
        data["Total"] = this.total;
        data["Remark"] = this.remark;
        data["BlankOutUser"] = this.blankOutUser;
        data["BlankOutDate"] = this.blankOutDate ? this.blankOutDate.toISOString() : <any>undefined;
        data["InvoiceFlag"] = this.invoiceFlag;
        data["Curr"] = this.curr;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["VoucherNo"] = this.voucherNo;
        data["InvoiceEndNo"] = this.invoiceEndNo;
        data["ReceiveTotal"] = this.receiveTotal;
        data["InvoiceRemark"] = this.invoiceRemark;
        data["Flag"] = this.flag;
        data["WriteOffTime"] = this.writeOffTime ? this.writeOffTime.toISOString() : <any>undefined;
        data["WriteOffUser"] = this.writeOffUser;
        data["VoucherNo1"] = this.voucherNo1;
        data["VoucherNo3"] = this.voucherNo3;
        data["VoucherNo7"] = this.voucherNo7;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessInvoice {
    guid?: number | undefined;
    statementNo?: string | undefined;
    invoiceBatchNo?: string | undefined;
    invoiceNo?: string | undefined;
    feeFlag?: string | undefined;
    invoiceRate?: number | undefined;
    invoiceTotal?: number | undefined;
    invoiceDate?: Date | undefined;
    billHeaderNo?: string | undefined;
    billHeaderName?: string | undefined;
    gName?: string | undefined;
    entrustNo?: string | undefined;
    entrustName?: string | undefined;
    total?: number | undefined;
    remark?: string | undefined;
    blankOutUser?: string | undefined;
    blankOutDate?: Date | undefined;
    invoiceFlag?: string | undefined;
    curr?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    voucherNo?: string | undefined;
    invoiceEndNo?: string | undefined;
    receiveTotal?: number | undefined;
    invoiceRemark?: string | undefined;
    flag?: string | undefined;
    writeOffTime?: Date | undefined;
    writeOffUser?: string | undefined;
    voucherNo1?: string | undefined;
    voucherNo3?: string | undefined;
    voucherNo7?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessWriteOff implements IEntTgBusinessWriteOff {
    statementNo?: string | undefined;
    total?: number | undefined;
    invoiceNo?: string | undefined;
    receiveTotal?: number | undefined;
    rollTotal?: number | undefined;
    invoiceTotal?: number | undefined;
    entrustNo?: string | undefined;
    entrustName?: string | undefined;
    remark?: string | undefined;
    flag?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    id?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessWriteOff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statementNo = data["StatementNo"];
            this.total = data["Total"];
            this.invoiceNo = data["InvoiceNo"];
            this.receiveTotal = data["ReceiveTotal"];
            this.rollTotal = data["RollTotal"];
            this.invoiceTotal = data["InvoiceTotal"];
            this.entrustNo = data["EntrustNo"];
            this.entrustName = data["EntrustName"];
            this.remark = data["Remark"];
            this.flag = data["Flag"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.id = data["Id"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessWriteOff {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessWriteOff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StatementNo"] = this.statementNo;
        data["Total"] = this.total;
        data["InvoiceNo"] = this.invoiceNo;
        data["ReceiveTotal"] = this.receiveTotal;
        data["RollTotal"] = this.rollTotal;
        data["InvoiceTotal"] = this.invoiceTotal;
        data["EntrustNo"] = this.entrustNo;
        data["EntrustName"] = this.entrustName;
        data["Remark"] = this.remark;
        data["Flag"] = this.flag;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Id"] = this.id;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessWriteOff {
    statementNo?: string | undefined;
    total?: number | undefined;
    invoiceNo?: string | undefined;
    receiveTotal?: number | undefined;
    rollTotal?: number | undefined;
    invoiceTotal?: number | undefined;
    entrustNo?: string | undefined;
    entrustName?: string | undefined;
    remark?: string | undefined;
    flag?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    id?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenTradeHead implements IEntGoldenTradeHead {
    createTime_Begin?: Date | undefined;
    createTime_End?: Date | undefined;
    iD?: number | undefined;
    emsId?: string | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    preEmsNo?: string | undefined;
    copEmsNo?: string | undefined;
    houseNo?: string | undefined;
    tradeCode?: string | undefined;
    tradeSocialCreditCode?: string | undefined;
    tradeName?: string | undefined;
    ownerCode?: string | undefined;
    ownerSocialCreditCode?: string | undefined;
    ownerName?: string | undefined;
    ownerType?: string | undefined;
    declareErType?: string | undefined;
    declareCode?: string | undefined;
    declareName?: string | undefined;
    cUSTOM?: string | undefined;
    customCn?: string | undefined;
    districtCode?: number | undefined;
    aDDRESS?: string | undefined;
    pHONE?: string | undefined;
    emsType?: string | undefined;
    emsStatus?: string | undefined;
    declareStatus?: string | undefined;
    declareType?: string | undefined;
    investMode?: string | undefined;
    tradeMode?: number | undefined;
    imgAmount?: number | undefined;
    exgAmount?: number | undefined;
    imgWeight?: number | undefined;
    exgWeight?: number | undefined;
    imgItems?: number | undefined;
    exgItems?: number | undefined;
    emsApprNo?: string | undefined;
    licenseNo?: string | undefined;
    contractNo?: string | undefined;
    idCard?: string | undefined;
    idCardPwd?: string | undefined;
    lastEmsNo?: string | undefined;
    corrEmsNo?: string | undefined;
    investAmount?: number | undefined;
    noteAmount?: number | undefined;
    noteQty?: number | undefined;
    inputEr?: string | undefined;
    inputDate?: Date | undefined;
    declareDate?: Date | undefined;
    declareTime?: Date | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    modifyTimes?: number | undefined;
    emsApprMark?: string | undefined;
    emsCertify?: string | undefined;
    productRatio?: number | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    fileName?: string | undefined;
    currentEffective?: number | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    recordContent?: string | undefined;
    declareSocialCreditCode?: string | undefined;
    inputSocialCreditCode?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    exeMark?: string | undefined;
    riskInsuranceFlag?: string | undefined;
    relatedNo?: string | undefined;
    qualifyType?: string | undefined;
    newApprDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenTradeHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createTime_Begin = data["CreateTime_Begin"] ? new Date(data["CreateTime_Begin"].toString()) : <any>undefined;
            this.createTime_End = data["CreateTime_End"] ? new Date(data["CreateTime_End"].toString()) : <any>undefined;
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.organizationCode = data["OrganizationCode"];
            this.emsNo = data["EmsNo"];
            this.preEmsNo = data["PreEmsNo"];
            this.copEmsNo = data["CopEmsNo"];
            this.houseNo = data["HouseNo"];
            this.tradeCode = data["TradeCode"];
            this.tradeSocialCreditCode = data["TradeSocialCreditCode"];
            this.tradeName = data["TradeName"];
            this.ownerCode = data["OwnerCode"];
            this.ownerSocialCreditCode = data["OwnerSocialCreditCode"];
            this.ownerName = data["OwnerName"];
            this.ownerType = data["OwnerType"];
            this.declareErType = data["DeclareErType"];
            this.declareCode = data["DeclareCode"];
            this.declareName = data["DeclareName"];
            this.cUSTOM = data["CUSTOM"];
            this.customCn = data["CustomCn"];
            this.districtCode = data["DistrictCode"];
            this.aDDRESS = data["ADDRESS"];
            this.pHONE = data["PHONE"];
            this.emsType = data["EmsType"];
            this.emsStatus = data["EmsStatus"];
            this.declareStatus = data["DeclareStatus"];
            this.declareType = data["DeclareType"];
            this.investMode = data["InvestMode"];
            this.tradeMode = data["TradeMode"];
            this.imgAmount = data["ImgAmount"];
            this.exgAmount = data["ExgAmount"];
            this.imgWeight = data["ImgWeight"];
            this.exgWeight = data["ExgWeight"];
            this.imgItems = data["ImgItems"];
            this.exgItems = data["ExgItems"];
            this.emsApprNo = data["EmsApprNo"];
            this.licenseNo = data["LicenseNo"];
            this.contractNo = data["ContractNo"];
            this.idCard = data["IdCard"];
            this.idCardPwd = data["IdCardPwd"];
            this.lastEmsNo = data["LastEmsNo"];
            this.corrEmsNo = data["CorrEmsNo"];
            this.investAmount = data["InvestAmount"];
            this.noteAmount = data["NoteAmount"];
            this.noteQty = data["NoteQty"];
            this.inputEr = data["InputEr"];
            this.inputDate = data["InputDate"] ? new Date(data["InputDate"].toString()) : <any>undefined;
            this.declareDate = data["DeclareDate"] ? new Date(data["DeclareDate"].toString()) : <any>undefined;
            this.declareTime = data["DeclareTime"] ? new Date(data["DeclareTime"].toString()) : <any>undefined;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.modifyTimes = data["ModifyTimes"];
            this.emsApprMark = data["EmsApprMark"];
            this.emsCertify = data["EmsCertify"];
            this.productRatio = data["ProductRatio"];
            this.modifyMark = data["ModifyMark"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.fileName = data["FileName"];
            this.currentEffective = data["CurrentEffective"];
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.recordContent = data["RecordContent"];
            this.declareSocialCreditCode = data["DeclareSocialCreditCode"];
            this.inputSocialCreditCode = data["InputSocialCreditCode"];
            this.inputCode = data["InputCode"];
            this.inputName = data["InputName"];
            this.exeMark = data["ExeMark"];
            this.riskInsuranceFlag = data["RiskInsuranceFlag"];
            this.relatedNo = data["RelatedNo"];
            this.qualifyType = data["QualifyType"];
            this.newApprDate = data["NewApprDate"] ? new Date(data["NewApprDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenTradeHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenTradeHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreateTime_Begin"] = this.createTime_Begin ? this.createTime_Begin.toISOString() : <any>undefined;
        data["CreateTime_End"] = this.createTime_End ? this.createTime_End.toISOString() : <any>undefined;
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["OrganizationCode"] = this.organizationCode;
        data["EmsNo"] = this.emsNo;
        data["PreEmsNo"] = this.preEmsNo;
        data["CopEmsNo"] = this.copEmsNo;
        data["HouseNo"] = this.houseNo;
        data["TradeCode"] = this.tradeCode;
        data["TradeSocialCreditCode"] = this.tradeSocialCreditCode;
        data["TradeName"] = this.tradeName;
        data["OwnerCode"] = this.ownerCode;
        data["OwnerSocialCreditCode"] = this.ownerSocialCreditCode;
        data["OwnerName"] = this.ownerName;
        data["OwnerType"] = this.ownerType;
        data["DeclareErType"] = this.declareErType;
        data["DeclareCode"] = this.declareCode;
        data["DeclareName"] = this.declareName;
        data["CUSTOM"] = this.cUSTOM;
        data["CustomCn"] = this.customCn;
        data["DistrictCode"] = this.districtCode;
        data["ADDRESS"] = this.aDDRESS;
        data["PHONE"] = this.pHONE;
        data["EmsType"] = this.emsType;
        data["EmsStatus"] = this.emsStatus;
        data["DeclareStatus"] = this.declareStatus;
        data["DeclareType"] = this.declareType;
        data["InvestMode"] = this.investMode;
        data["TradeMode"] = this.tradeMode;
        data["ImgAmount"] = this.imgAmount;
        data["ExgAmount"] = this.exgAmount;
        data["ImgWeight"] = this.imgWeight;
        data["ExgWeight"] = this.exgWeight;
        data["ImgItems"] = this.imgItems;
        data["ExgItems"] = this.exgItems;
        data["EmsApprNo"] = this.emsApprNo;
        data["LicenseNo"] = this.licenseNo;
        data["ContractNo"] = this.contractNo;
        data["IdCard"] = this.idCard;
        data["IdCardPwd"] = this.idCardPwd;
        data["LastEmsNo"] = this.lastEmsNo;
        data["CorrEmsNo"] = this.corrEmsNo;
        data["InvestAmount"] = this.investAmount;
        data["NoteAmount"] = this.noteAmount;
        data["NoteQty"] = this.noteQty;
        data["InputEr"] = this.inputEr;
        data["InputDate"] = this.inputDate ? this.inputDate.toISOString() : <any>undefined;
        data["DeclareDate"] = this.declareDate ? this.declareDate.toISOString() : <any>undefined;
        data["DeclareTime"] = this.declareTime ? this.declareTime.toISOString() : <any>undefined;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["ModifyTimes"] = this.modifyTimes;
        data["EmsApprMark"] = this.emsApprMark;
        data["EmsCertify"] = this.emsCertify;
        data["ProductRatio"] = this.productRatio;
        data["ModifyMark"] = this.modifyMark;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["FileName"] = this.fileName;
        data["CurrentEffective"] = this.currentEffective;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["RecordContent"] = this.recordContent;
        data["DeclareSocialCreditCode"] = this.declareSocialCreditCode;
        data["InputSocialCreditCode"] = this.inputSocialCreditCode;
        data["InputCode"] = this.inputCode;
        data["InputName"] = this.inputName;
        data["ExeMark"] = this.exeMark;
        data["RiskInsuranceFlag"] = this.riskInsuranceFlag;
        data["RelatedNo"] = this.relatedNo;
        data["QualifyType"] = this.qualifyType;
        data["NewApprDate"] = this.newApprDate ? this.newApprDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenTradeHead {
    createTime_Begin?: Date | undefined;
    createTime_End?: Date | undefined;
    iD?: number | undefined;
    emsId?: string | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    preEmsNo?: string | undefined;
    copEmsNo?: string | undefined;
    houseNo?: string | undefined;
    tradeCode?: string | undefined;
    tradeSocialCreditCode?: string | undefined;
    tradeName?: string | undefined;
    ownerCode?: string | undefined;
    ownerSocialCreditCode?: string | undefined;
    ownerName?: string | undefined;
    ownerType?: string | undefined;
    declareErType?: string | undefined;
    declareCode?: string | undefined;
    declareName?: string | undefined;
    cUSTOM?: string | undefined;
    customCn?: string | undefined;
    districtCode?: number | undefined;
    aDDRESS?: string | undefined;
    pHONE?: string | undefined;
    emsType?: string | undefined;
    emsStatus?: string | undefined;
    declareStatus?: string | undefined;
    declareType?: string | undefined;
    investMode?: string | undefined;
    tradeMode?: number | undefined;
    imgAmount?: number | undefined;
    exgAmount?: number | undefined;
    imgWeight?: number | undefined;
    exgWeight?: number | undefined;
    imgItems?: number | undefined;
    exgItems?: number | undefined;
    emsApprNo?: string | undefined;
    licenseNo?: string | undefined;
    contractNo?: string | undefined;
    idCard?: string | undefined;
    idCardPwd?: string | undefined;
    lastEmsNo?: string | undefined;
    corrEmsNo?: string | undefined;
    investAmount?: number | undefined;
    noteAmount?: number | undefined;
    noteQty?: number | undefined;
    inputEr?: string | undefined;
    inputDate?: Date | undefined;
    declareDate?: Date | undefined;
    declareTime?: Date | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    modifyTimes?: number | undefined;
    emsApprMark?: string | undefined;
    emsCertify?: string | undefined;
    productRatio?: number | undefined;
    modifyMark?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    fileName?: string | undefined;
    currentEffective?: number | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    recordContent?: string | undefined;
    declareSocialCreditCode?: string | undefined;
    inputSocialCreditCode?: string | undefined;
    inputCode?: string | undefined;
    inputName?: string | undefined;
    exeMark?: string | undefined;
    riskInsuranceFlag?: string | undefined;
    relatedNo?: string | undefined;
    qualifyType?: string | undefined;
    newApprDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenTradeExg implements IEntGoldenTradeExg {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    iEType?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    sourceMark?: string | undefined;
    modifyMark?: string | undefined;
    recordFlag?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenTradeExg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.copGNo = data["CopGNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.classMark = data["ClassMark"];
            this.uNIT = data["UNIT"];
            this.decPrice = data["DecPrice"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.firstQty = data["FirstQty"];
            this.iEType = data["IEType"];
            this.useType = data["UseType"];
            this.modifyTimes = data["ModifyTimes"];
            this.sourceMark = data["SourceMark"];
            this.modifyMark = data["ModifyMark"];
            this.recordFlag = data["RecordFlag"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenTradeExg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenTradeExg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["CopGNo"] = this.copGNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["ClassMark"] = this.classMark;
        data["UNIT"] = this.uNIT;
        data["DecPrice"] = this.decPrice;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["FirstQty"] = this.firstQty;
        data["IEType"] = this.iEType;
        data["UseType"] = this.useType;
        data["ModifyTimes"] = this.modifyTimes;
        data["SourceMark"] = this.sourceMark;
        data["ModifyMark"] = this.modifyMark;
        data["RecordFlag"] = this.recordFlag;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenTradeExg {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    iEType?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    sourceMark?: string | undefined;
    modifyMark?: string | undefined;
    recordFlag?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenTradeImg implements IEntGoldenTradeImg {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    iEType?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    sourceMark?: string | undefined;
    modifyMark?: string | undefined;
    recordFlag?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenTradeImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.emsId = data["EmsId"];
            this.emsNo = data["EmsNo"];
            this.gNo = data["GNo"];
            this.copGNo = data["CopGNo"];
            this.gName = data["GName"];
            this.gModel = data["GModel"];
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.classMark = data["ClassMark"];
            this.uNIT = data["UNIT"];
            this.decPrice = data["DecPrice"];
            this.decPriceRmb = data["DecPriceRmb"];
            this.countryCode = data["CountryCode"];
            this.cURR = data["CURR"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.factor1 = data["Factor1"];
            this.factor2 = data["Factor2"];
            this.factorWt = data["FactorWt"];
            this.factorRate = data["FactorRate"];
            this.qTY = data["QTY"];
            this.maxQty = data["MaxQty"];
            this.firstQty = data["FirstQty"];
            this.iEType = data["IEType"];
            this.useType = data["UseType"];
            this.modifyTimes = data["ModifyTimes"];
            this.sourceMark = data["SourceMark"];
            this.modifyMark = data["ModifyMark"];
            this.recordFlag = data["RecordFlag"];
            this.nOTE = data["NOTE"];
            this.note1 = data["Note1"];
            this.note2 = data["Note2"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenTradeImg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenTradeImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["EmsId"] = this.emsId;
        data["EmsNo"] = this.emsNo;
        data["GNo"] = this.gNo;
        data["CopGNo"] = this.copGNo;
        data["GName"] = this.gName;
        data["GModel"] = this.gModel;
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["ClassMark"] = this.classMark;
        data["UNIT"] = this.uNIT;
        data["DecPrice"] = this.decPrice;
        data["DecPriceRmb"] = this.decPriceRmb;
        data["CountryCode"] = this.countryCode;
        data["CURR"] = this.cURR;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["Factor1"] = this.factor1;
        data["Factor2"] = this.factor2;
        data["FactorWt"] = this.factorWt;
        data["FactorRate"] = this.factorRate;
        data["QTY"] = this.qTY;
        data["MaxQty"] = this.maxQty;
        data["FirstQty"] = this.firstQty;
        data["IEType"] = this.iEType;
        data["UseType"] = this.useType;
        data["ModifyTimes"] = this.modifyTimes;
        data["SourceMark"] = this.sourceMark;
        data["ModifyMark"] = this.modifyMark;
        data["RecordFlag"] = this.recordFlag;
        data["NOTE"] = this.nOTE;
        data["Note1"] = this.note1;
        data["Note2"] = this.note2;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenTradeImg {
    iD?: number | undefined;
    emsId?: number | undefined;
    emsNo?: string | undefined;
    gNo?: number | undefined;
    copGNo?: string | undefined;
    gName?: string | undefined;
    gModel?: string | undefined;
    codeT?: string | undefined;
    codeS?: string | undefined;
    classMark?: string | undefined;
    uNIT?: string | undefined;
    decPrice?: number | undefined;
    decPriceRmb?: number | undefined;
    countryCode?: number | undefined;
    cURR?: number | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    factor1?: number | undefined;
    factor2?: number | undefined;
    factorWt?: number | undefined;
    factorRate?: number | undefined;
    qTY?: number | undefined;
    maxQty?: number | undefined;
    firstQty?: number | undefined;
    iEType?: string | undefined;
    useType?: number | undefined;
    modifyTimes?: number | undefined;
    sourceMark?: string | undefined;
    modifyMark?: string | undefined;
    recordFlag?: string | undefined;
    nOTE?: string | undefined;
    note1?: string | undefined;
    note2?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsCompanyMaterialParaCode implements IEntCustomsCompanyMaterialParaCode {
    id?: number | undefined;
    materialNO?: string | undefined;
    materialNameCN?: string | undefined;
    originCountryCode?: string | undefined;
    hsCode?: string | undefined;
    dModel?: string | undefined;
    cNCompanyCode?: string | undefined;
    unit?: string | undefined;
    nOTE1?: string | undefined;
    nOTE2?: string | undefined;
    nOTE3?: string | undefined;
    nOTE4?: string | undefined;
    nOTE5?: string | undefined;
    aGENTCODE?: string | undefined;
    dECLARATIONCHNAME?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsCompanyMaterialParaCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.materialNO = data["MaterialNO"];
            this.materialNameCN = data["MaterialNameCN"];
            this.originCountryCode = data["OriginCountryCode"];
            this.hsCode = data["HsCode"];
            this.dModel = data["DModel"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.unit = data["Unit"];
            this.nOTE1 = data["NOTE1"];
            this.nOTE2 = data["NOTE2"];
            this.nOTE3 = data["NOTE3"];
            this.nOTE4 = data["NOTE4"];
            this.nOTE5 = data["NOTE5"];
            this.aGENTCODE = data["AGENTCODE"];
            this.dECLARATIONCHNAME = data["DECLARATIONCHNAME"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsCompanyMaterialParaCode {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsCompanyMaterialParaCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["MaterialNO"] = this.materialNO;
        data["MaterialNameCN"] = this.materialNameCN;
        data["OriginCountryCode"] = this.originCountryCode;
        data["HsCode"] = this.hsCode;
        data["DModel"] = this.dModel;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["Unit"] = this.unit;
        data["NOTE1"] = this.nOTE1;
        data["NOTE2"] = this.nOTE2;
        data["NOTE3"] = this.nOTE3;
        data["NOTE4"] = this.nOTE4;
        data["NOTE5"] = this.nOTE5;
        data["AGENTCODE"] = this.aGENTCODE;
        data["DECLARATIONCHNAME"] = this.dECLARATIONCHNAME;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsCompanyMaterialParaCode {
    id?: number | undefined;
    materialNO?: string | undefined;
    materialNameCN?: string | undefined;
    originCountryCode?: string | undefined;
    hsCode?: string | undefined;
    dModel?: string | undefined;
    cNCompanyCode?: string | undefined;
    unit?: string | undefined;
    nOTE1?: string | undefined;
    nOTE2?: string | undefined;
    nOTE3?: string | undefined;
    nOTE4?: string | undefined;
    nOTE5?: string | undefined;
    aGENTCODE?: string | undefined;
    dECLARATIONCHNAME?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class SendMessage implements ISendMessage {
    messageId?: string | undefined;
    dockSetting?: DockSetting | undefined;

    constructor(data?: ISendMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageId = data["MessageId"];
            this.dockSetting = data["DockSetting"] ? DockSetting.fromJS(data["DockSetting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SendMessage {
        data = typeof data === 'object' ? data : {};
        let result = new SendMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MessageId"] = this.messageId;
        data["DockSetting"] = this.dockSetting ? this.dockSetting.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISendMessage {
    messageId?: string | undefined;
    dockSetting?: DockSetting | undefined;
}

export class DockSetting implements IDockSetting {
    iCardNo?: string | undefined;
    operatorCard?: string | undefined;
    sendPath?: string | undefined;
    type?: string | undefined;
    receivePath?: string | undefined;
    iCardNo_OW?: string | undefined;
    operatorCard_OW?: string | undefined;
    sendPath_OW?: string | undefined;
    type_OW?: string | undefined;
    receivePath_OW?: string | undefined;
    isAutoSend?: string | undefined;
    isAutoReceive?: string | undefined;
    customerCode?: string | undefined;
    delcareFlag_Trade?: string | undefined;
    delcareFlag_Org?: string | undefined;
    delcareFlag_Bill?: string | undefined;
    isUploadFile?: boolean | undefined;
    createUser?: string | undefined;
    sendTimeSpanM?: string | undefined;
    sendTimeSpanS?: string | undefined;
    receiveTimeSpanM?: string | undefined;
    receiveTimeSpanS?: string | undefined;

    constructor(data?: IDockSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iCardNo = data["ICardNo"];
            this.operatorCard = data["OperatorCard"];
            this.sendPath = data["SendPath"];
            this.type = data["Type"];
            this.receivePath = data["ReceivePath"];
            this.iCardNo_OW = data["ICardNo_OW"];
            this.operatorCard_OW = data["OperatorCard_OW"];
            this.sendPath_OW = data["SendPath_OW"];
            this.type_OW = data["Type_OW"];
            this.receivePath_OW = data["ReceivePath_OW"];
            this.isAutoSend = data["IsAutoSend"];
            this.isAutoReceive = data["IsAutoReceive"];
            this.customerCode = data["CustomerCode"];
            this.delcareFlag_Trade = data["DelcareFlag_Trade"];
            this.delcareFlag_Org = data["DelcareFlag_Org"];
            this.delcareFlag_Bill = data["DelcareFlag_Bill"];
            this.isUploadFile = data["IsUploadFile"];
            this.createUser = data["CreateUser"];
            this.sendTimeSpanM = data["SendTimeSpanM"];
            this.sendTimeSpanS = data["SendTimeSpanS"];
            this.receiveTimeSpanM = data["ReceiveTimeSpanM"];
            this.receiveTimeSpanS = data["ReceiveTimeSpanS"];
        }
    }

    static fromJS(data: any): DockSetting {
        data = typeof data === 'object' ? data : {};
        let result = new DockSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ICardNo"] = this.iCardNo;
        data["OperatorCard"] = this.operatorCard;
        data["SendPath"] = this.sendPath;
        data["Type"] = this.type;
        data["ReceivePath"] = this.receivePath;
        data["ICardNo_OW"] = this.iCardNo_OW;
        data["OperatorCard_OW"] = this.operatorCard_OW;
        data["SendPath_OW"] = this.sendPath_OW;
        data["Type_OW"] = this.type_OW;
        data["ReceivePath_OW"] = this.receivePath_OW;
        data["IsAutoSend"] = this.isAutoSend;
        data["IsAutoReceive"] = this.isAutoReceive;
        data["CustomerCode"] = this.customerCode;
        data["DelcareFlag_Trade"] = this.delcareFlag_Trade;
        data["DelcareFlag_Org"] = this.delcareFlag_Org;
        data["DelcareFlag_Bill"] = this.delcareFlag_Bill;
        data["IsUploadFile"] = this.isUploadFile;
        data["CreateUser"] = this.createUser;
        data["SendTimeSpanM"] = this.sendTimeSpanM;
        data["SendTimeSpanS"] = this.sendTimeSpanS;
        data["ReceiveTimeSpanM"] = this.receiveTimeSpanM;
        data["ReceiveTimeSpanS"] = this.receiveTimeSpanS;
        return data; 
    }
}

export interface IDockSetting {
    iCardNo?: string | undefined;
    operatorCard?: string | undefined;
    sendPath?: string | undefined;
    type?: string | undefined;
    receivePath?: string | undefined;
    iCardNo_OW?: string | undefined;
    operatorCard_OW?: string | undefined;
    sendPath_OW?: string | undefined;
    type_OW?: string | undefined;
    receivePath_OW?: string | undefined;
    isAutoSend?: string | undefined;
    isAutoReceive?: string | undefined;
    customerCode?: string | undefined;
    delcareFlag_Trade?: string | undefined;
    delcareFlag_Org?: string | undefined;
    delcareFlag_Bill?: string | undefined;
    isUploadFile?: boolean | undefined;
    createUser?: string | undefined;
    sendTimeSpanM?: string | undefined;
    sendTimeSpanS?: string | undefined;
    receiveTimeSpanM?: string | undefined;
    receiveTimeSpanS?: string | undefined;
}

export class EntSysOrganization implements IEntSysOrganization {
    id?: number | undefined;
    organizationCode?: string | undefined;
    organizationName?: string | undefined;
    address?: string | undefined;
    phoneNo?: string | undefined;
    email?: string | undefined;
    contacts?: string | undefined;
    unifiedSocialCreditcode?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    updateBy?: string | undefined;
    updateTime?: Date | undefined;
    status?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysOrganization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.organizationCode = data["OrganizationCode"];
            this.organizationName = data["OrganizationName"];
            this.address = data["Address"];
            this.phoneNo = data["PhoneNo"];
            this.email = data["Email"];
            this.contacts = data["Contacts"];
            this.unifiedSocialCreditcode = data["UnifiedSocialCreditcode"];
            this.createBy = data["CreateBy"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateBy = data["UpdateBy"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.status = data["Status"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysOrganization {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysOrganization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["OrganizationCode"] = this.organizationCode;
        data["OrganizationName"] = this.organizationName;
        data["Address"] = this.address;
        data["PhoneNo"] = this.phoneNo;
        data["Email"] = this.email;
        data["Contacts"] = this.contacts;
        data["UnifiedSocialCreditcode"] = this.unifiedSocialCreditcode;
        data["CreateBy"] = this.createBy;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateBy"] = this.updateBy;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["Status"] = this.status;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysOrganization {
    id?: number | undefined;
    organizationCode?: string | undefined;
    organizationName?: string | undefined;
    address?: string | undefined;
    phoneNo?: string | undefined;
    email?: string | undefined;
    contacts?: string | undefined;
    unifiedSocialCreditcode?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    updateBy?: string | undefined;
    updateTime?: Date | undefined;
    status?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntPiddummycontrast implements IEntPiddummycontrast {
    id?: number | undefined;
    emsNo?: string | undefined;
    pID?: string | undefined;
    dummyQty?: number | undefined;
    dUMMY?: string | undefined;
    status?: number | undefined;
    impDate?: Date | undefined;
    opreateDate?: Date | undefined;
    operateUser?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    iMPDATEEND?: Date | undefined;
    opreateDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntPiddummycontrast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.emsNo = data["EmsNo"];
            this.pID = data["PID"];
            this.dummyQty = data["DummyQty"];
            this.dUMMY = data["DUMMY"];
            this.status = data["Status"];
            this.impDate = data["ImpDate"] ? new Date(data["ImpDate"].toString()) : <any>undefined;
            this.opreateDate = data["OpreateDate"] ? new Date(data["OpreateDate"].toString()) : <any>undefined;
            this.operateUser = data["OperateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.iMPDATEEND = data["IMPDATEEND"] ? new Date(data["IMPDATEEND"].toString()) : <any>undefined;
            this.opreateDateEnd = data["OpreateDateEnd"] ? new Date(data["OpreateDateEnd"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntPiddummycontrast {
        data = typeof data === 'object' ? data : {};
        let result = new EntPiddummycontrast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["EmsNo"] = this.emsNo;
        data["PID"] = this.pID;
        data["DummyQty"] = this.dummyQty;
        data["DUMMY"] = this.dUMMY;
        data["Status"] = this.status;
        data["ImpDate"] = this.impDate ? this.impDate.toISOString() : <any>undefined;
        data["OpreateDate"] = this.opreateDate ? this.opreateDate.toISOString() : <any>undefined;
        data["OperateUser"] = this.operateUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["IMPDATEEND"] = this.iMPDATEEND ? this.iMPDATEEND.toISOString() : <any>undefined;
        data["OpreateDateEnd"] = this.opreateDateEnd ? this.opreateDateEnd.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntPiddummycontrast {
    id?: number | undefined;
    emsNo?: string | undefined;
    pID?: string | undefined;
    dummyQty?: number | undefined;
    dUMMY?: string | undefined;
    status?: number | undefined;
    impDate?: Date | undefined;
    opreateDate?: Date | undefined;
    operateUser?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    iMPDATEEND?: Date | undefined;
    opreateDateEnd?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntPiddummycontrast implements IReturnResultOfPageListOfEntPiddummycontrast {
    success?: boolean | undefined;
    data?: PageListOfEntPiddummycontrast | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntPiddummycontrast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntPiddummycontrast.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntPiddummycontrast {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntPiddummycontrast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntPiddummycontrast {
    success?: boolean | undefined;
    data?: PageListOfEntPiddummycontrast | undefined;
    messge?: string | undefined;
}

export class PageListOfEntPiddummycontrast implements IPageListOfEntPiddummycontrast {
    dataSource?: EntPiddummycontrast[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntPiddummycontrast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntPiddummycontrast.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntPiddummycontrast {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntPiddummycontrast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntPiddummycontrast {
    dataSource?: EntPiddummycontrast[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfListOfString implements IReturnResultOfListOfString {
    success?: boolean | undefined;
    data?: string[] | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfListOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            if (Array.isArray(data["Data"])) {
                this.data = [] as any;
                for (let item of data["Data"])
                    this.data!.push(item);
            }
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfListOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfListOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        if (Array.isArray(this.data)) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item);
        }
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfListOfString {
    success?: boolean | undefined;
    data?: string[] | undefined;
    messge?: string | undefined;
}

export class EntInnerAseshJmyDummy implements IEntInnerAseshJmyDummy {
    id?: number | undefined;
    dummy?: string | undefined;
    createtime?: Date | undefined;
    createuser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntInnerAseshJmyDummy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.dummy = data["Dummy"];
            this.createtime = data["Createtime"] ? new Date(data["Createtime"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntInnerAseshJmyDummy {
        data = typeof data === 'object' ? data : {};
        let result = new EntInnerAseshJmyDummy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Dummy"] = this.dummy;
        data["Createtime"] = this.createtime ? this.createtime.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntInnerAseshJmyDummy {
    id?: number | undefined;
    dummy?: string | undefined;
    createtime?: Date | undefined;
    createuser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysPriceAlarm implements IEntSysPriceAlarm {
    iD?: number | undefined;
    copGNo?: string | undefined;
    goodsFlag?: string | undefined;
    curr?: string | undefined;
    standardPrice?: number | undefined;
    upRang?: number | undefined;
    downRang?: number | undefined;
    validTime?: Date | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    validTimeStart?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysPriceAlarm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.copGNo = data["CopGNo"];
            this.goodsFlag = data["GoodsFlag"];
            this.curr = data["Curr"];
            this.standardPrice = data["StandardPrice"];
            this.upRang = data["UpRang"];
            this.downRang = data["DownRang"];
            this.validTime = data["ValidTime"] ? new Date(data["ValidTime"].toString()) : <any>undefined;
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.validTimeStart = data["ValidTimeStart"] ? new Date(data["ValidTimeStart"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysPriceAlarm {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysPriceAlarm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["CopGNo"] = this.copGNo;
        data["GoodsFlag"] = this.goodsFlag;
        data["Curr"] = this.curr;
        data["StandardPrice"] = this.standardPrice;
        data["UpRang"] = this.upRang;
        data["DownRang"] = this.downRang;
        data["ValidTime"] = this.validTime ? this.validTime.toISOString() : <any>undefined;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["ValidTimeStart"] = this.validTimeStart ? this.validTimeStart.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysPriceAlarm {
    iD?: number | undefined;
    copGNo?: string | undefined;
    goodsFlag?: string | undefined;
    curr?: string | undefined;
    standardPrice?: number | undefined;
    upRang?: number | undefined;
    downRang?: number | undefined;
    validTime?: Date | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    validTimeStart?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class Publisher implements IPublisher {
    id?: number | undefined;
    name?: string | undefined;
    books?: Book[] | undefined;

    constructor(data?: IPublisher) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            if (Array.isArray(data["Books"])) {
                this.books = [] as any;
                for (let item of data["Books"])
                    this.books!.push(Book.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Publisher {
        data = typeof data === 'object' ? data : {};
        let result = new Publisher();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        if (Array.isArray(this.books)) {
            data["Books"] = [];
            for (let item of this.books)
                data["Books"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPublisher {
    id?: number | undefined;
    name?: string | undefined;
    books?: Book[] | undefined;
}

export class Book implements IBook {
    id?: number | undefined;
    publisherId?: number | undefined;
    title?: string | undefined;
    author?: string | undefined;
    isPublish?: boolean | undefined;
    createTime?: Date | undefined;

    constructor(data?: IBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.publisherId = data["PublisherId"];
            this.title = data["Title"];
            this.author = data["Author"];
            this.isPublish = data["IsPublish"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Book {
        data = typeof data === 'object' ? data : {};
        let result = new Book();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PublisherId"] = this.publisherId;
        data["Title"] = this.title;
        data["Author"] = this.author;
        data["IsPublish"] = this.isPublish;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IBook {
    id?: number | undefined;
    publisherId?: number | undefined;
    title?: string | undefined;
    author?: string | undefined;
    isPublish?: boolean | undefined;
    createTime?: Date | undefined;
}

export class TupleOfListOfPublisherAndListOfBook implements ITupleOfListOfPublisherAndListOfBook {
    m_Item1?: Publisher[] | undefined;
    m_Item2?: Book[] | undefined;

    constructor(data?: ITupleOfListOfPublisherAndListOfBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["m_Item1"])) {
                this.m_Item1 = [] as any;
                for (let item of data["m_Item1"])
                    this.m_Item1!.push(Publisher.fromJS(item));
            }
            if (Array.isArray(data["m_Item2"])) {
                this.m_Item2 = [] as any;
                for (let item of data["m_Item2"])
                    this.m_Item2!.push(Book.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TupleOfListOfPublisherAndListOfBook {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfListOfPublisherAndListOfBook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.m_Item1)) {
            data["m_Item1"] = [];
            for (let item of this.m_Item1)
                data["m_Item1"].push(item.toJSON());
        }
        if (Array.isArray(this.m_Item2)) {
            data["m_Item2"] = [];
            for (let item of this.m_Item2)
                data["m_Item2"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITupleOfListOfPublisherAndListOfBook {
    m_Item1?: Publisher[] | undefined;
    m_Item2?: Book[] | undefined;
}

export class EntCustomsErpPurchaseorder implements IEntCustomsErpPurchaseorder {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    inCoTerm?: string | undefined;
    orderDate?: Date | undefined;
    emailAdress?: string | undefined;
    expostatus?: string | undefined;
    exposellercompanyid?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpPurchaseorder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.contractNO = data["ContractNO"];
            this.agreementID = data["AgreementID"];
            this.sellerCompanyVAT = data["SellerCompanyVAT"];
            this.sellerCompanyCode = data["SellerCompanyCode"];
            this.companyNameEn = data["CompanyNameEn"];
            this.companyFullNameEn = data["CompanyFullNameEn"];
            this.companyNameZH = data["CompanyNameZH"];
            this.companyFullNameZH = data["CompanyFullNameZH"];
            this.countryCodeISO = data["CountryCodeISO"];
            this.countryCodeZH = data["CountryCodeZH"];
            this.countryFullNameEn = data["CountryFullNameEn"];
            this.countryNameZH = data["CountryNameZH"];
            this.countryFullNameZH = data["CountryFullNameZH"];
            this.companyAddress = data["CompanyAddress"];
            this.companyTelephone = data["CompanyTelephone"];
            this.companyFax = data["CompanyFax"];
            this.companyEmailAdress = data["CompanyEmailAdress"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.inCoTerm = data["InCoTerm"];
            this.orderDate = data["OrderDate"] ? new Date(data["OrderDate"].toString()) : <any>undefined;
            this.emailAdress = data["EmailAdress"];
            this.expostatus = data["Expostatus"];
            this.exposellercompanyid = data["Exposellercompanyid"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpPurchaseorder {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpPurchaseorder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["ContractNO"] = this.contractNO;
        data["AgreementID"] = this.agreementID;
        data["SellerCompanyVAT"] = this.sellerCompanyVAT;
        data["SellerCompanyCode"] = this.sellerCompanyCode;
        data["CompanyNameEn"] = this.companyNameEn;
        data["CompanyFullNameEn"] = this.companyFullNameEn;
        data["CompanyNameZH"] = this.companyNameZH;
        data["CompanyFullNameZH"] = this.companyFullNameZH;
        data["CountryCodeISO"] = this.countryCodeISO;
        data["CountryCodeZH"] = this.countryCodeZH;
        data["CountryFullNameEn"] = this.countryFullNameEn;
        data["CountryNameZH"] = this.countryNameZH;
        data["CountryFullNameZH"] = this.countryFullNameZH;
        data["CompanyAddress"] = this.companyAddress;
        data["CompanyTelephone"] = this.companyTelephone;
        data["CompanyFax"] = this.companyFax;
        data["CompanyEmailAdress"] = this.companyEmailAdress;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["InCoTerm"] = this.inCoTerm;
        data["OrderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["EmailAdress"] = this.emailAdress;
        data["Expostatus"] = this.expostatus;
        data["Exposellercompanyid"] = this.exposellercompanyid;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpPurchaseorder {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    inCoTerm?: string | undefined;
    orderDate?: Date | undefined;
    emailAdress?: string | undefined;
    expostatus?: string | undefined;
    exposellercompanyid?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpPurchaseorderlist implements IEntCustomsErpPurchaseorderlist {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    cNCompanyCode?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    deliveryDate?: Date | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    originCountryCode?: string | undefined;
    originCountryISOCode?: string | undefined;
    originCountryNameEn?: string | undefined;
    isProcessingTrade?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpPurchaseorderlist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.item = data["Item"];
            this.materialNO = data["MaterialNO"];
            this.goodsDesZH = data["GoodsDesZH"];
            this.goodsDesEN = data["GoodsDesEN"];
            this.deliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.totalQuantity = data["TotalQuantity"];
            this.totalQuantityUnit = data["TotalQuantityUnit"];
            this.groupQuantity = data["GroupQuantity"];
            this.groupQuantityUnit = data["GroupQuantityUnit"];
            this.quantity = data["Quantity"];
            this.quantityUnit = data["QuantityUnit"];
            this.groupWeight = data["GroupWeight"];
            this.groupWeightUnit = data["GroupWeightUnit"];
            this.weight = data["Weight"];
            this.weightUnit = data["WeightUnit"];
            this.groupUnitPrice = data["GroupUnitPrice"];
            this.unitPrice = data["UnitPrice"];
            this.totalPrice = data["TotalPrice"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.exchangeRate = data["ExchangeRate"];
            this.originCountryCode = data["OriginCountryCode"];
            this.originCountryISOCode = data["OriginCountryISOCode"];
            this.originCountryNameEn = data["OriginCountryNameEn"];
            this.isProcessingTrade = data["IsProcessingTrade"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpPurchaseorderlist {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpPurchaseorderlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["Item"] = this.item;
        data["MaterialNO"] = this.materialNO;
        data["GoodsDesZH"] = this.goodsDesZH;
        data["GoodsDesEN"] = this.goodsDesEN;
        data["DeliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["TotalQuantity"] = this.totalQuantity;
        data["TotalQuantityUnit"] = this.totalQuantityUnit;
        data["GroupQuantity"] = this.groupQuantity;
        data["GroupQuantityUnit"] = this.groupQuantityUnit;
        data["Quantity"] = this.quantity;
        data["QuantityUnit"] = this.quantityUnit;
        data["GroupWeight"] = this.groupWeight;
        data["GroupWeightUnit"] = this.groupWeightUnit;
        data["Weight"] = this.weight;
        data["WeightUnit"] = this.weightUnit;
        data["GroupUnitPrice"] = this.groupUnitPrice;
        data["UnitPrice"] = this.unitPrice;
        data["TotalPrice"] = this.totalPrice;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["ExchangeRate"] = this.exchangeRate;
        data["OriginCountryCode"] = this.originCountryCode;
        data["OriginCountryISOCode"] = this.originCountryISOCode;
        data["OriginCountryNameEn"] = this.originCountryNameEn;
        data["IsProcessingTrade"] = this.isProcessingTrade;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpPurchaseorderlist {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    cNCompanyCode?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    deliveryDate?: Date | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    originCountryCode?: string | undefined;
    originCountryISOCode?: string | undefined;
    originCountryNameEn?: string | undefined;
    isProcessingTrade?: string | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessRp implements IEntTgBusinessRp {
    passTimeStart?: Date | undefined;
    passTimeEnd?: Date | undefined;
    currCn?: string | undefined;
    entryTypeCn?: string | undefined;
    rpTypeCn?: string | undefined;
    id?: number | undefined;
    entryId?: string | undefined;
    rpType?: string | undefined;
    orderNo?: string | undefined;
    curr?: string | undefined;
    money?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    passTime?: Date | undefined;
    entryType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessRp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.passTimeStart = data["PassTimeStart"] ? new Date(data["PassTimeStart"].toString()) : <any>undefined;
            this.passTimeEnd = data["PassTimeEnd"] ? new Date(data["PassTimeEnd"].toString()) : <any>undefined;
            this.currCn = data["CurrCn"];
            this.entryTypeCn = data["EntryTypeCn"];
            this.rpTypeCn = data["RpTypeCn"];
            this.id = data["Id"];
            this.entryId = data["EntryId"];
            this.rpType = data["RpType"];
            this.orderNo = data["OrderNo"];
            this.curr = data["Curr"];
            this.money = data["Money"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.passTime = data["PassTime"] ? new Date(data["PassTime"].toString()) : <any>undefined;
            this.entryType = data["EntryType"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessRp {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessRp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PassTimeStart"] = this.passTimeStart ? this.passTimeStart.toISOString() : <any>undefined;
        data["PassTimeEnd"] = this.passTimeEnd ? this.passTimeEnd.toISOString() : <any>undefined;
        data["CurrCn"] = this.currCn;
        data["EntryTypeCn"] = this.entryTypeCn;
        data["RpTypeCn"] = this.rpTypeCn;
        data["Id"] = this.id;
        data["EntryId"] = this.entryId;
        data["RpType"] = this.rpType;
        data["OrderNo"] = this.orderNo;
        data["Curr"] = this.curr;
        data["Money"] = this.money;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["PassTime"] = this.passTime ? this.passTime.toISOString() : <any>undefined;
        data["EntryType"] = this.entryType;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessRp {
    passTimeStart?: Date | undefined;
    passTimeEnd?: Date | undefined;
    currCn?: string | undefined;
    entryTypeCn?: string | undefined;
    rpTypeCn?: string | undefined;
    id?: number | undefined;
    entryId?: string | undefined;
    rpType?: string | undefined;
    orderNo?: string | undefined;
    curr?: string | undefined;
    money?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    passTime?: Date | undefined;
    entryType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntTgBusinessRp implements IReturnResultOfPageListOfEntTgBusinessRp {
    success?: boolean | undefined;
    data?: PageListOfEntTgBusinessRp | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntTgBusinessRp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntTgBusinessRp.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntTgBusinessRp {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntTgBusinessRp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntTgBusinessRp {
    success?: boolean | undefined;
    data?: PageListOfEntTgBusinessRp | undefined;
    messge?: string | undefined;
}

export class PageListOfEntTgBusinessRp implements IPageListOfEntTgBusinessRp {
    dataSource?: EntTgBusinessRp[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntTgBusinessRp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntTgBusinessRp.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntTgBusinessRp {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntTgBusinessRp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntTgBusinessRp {
    dataSource?: EntTgBusinessRp[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysMenu implements IEntSysMenu {
    menuCode?: string | undefined;
    menuNameCn?: string | undefined;
    menuNameEn?: string | undefined;
    subSystemId?: string | undefined;
    status?: string | undefined;
    parentMenuCode?: string | undefined;
    fullPath?: string | undefined;
    createBy?: string | undefined;
    menuLevel?: number | undefined;
    descr?: string | undefined;
    showSeqence?: number | undefined;
    createTime?: Date | undefined;
    linkTo?: string | undefined;
    isMenu?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysMenu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.menuCode = data["MenuCode"];
            this.menuNameCn = data["MenuNameCn"];
            this.menuNameEn = data["MenuNameEn"];
            this.subSystemId = data["SubSystemId"];
            this.status = data["Status"];
            this.parentMenuCode = data["ParentMenuCode"];
            this.fullPath = data["FullPath"];
            this.createBy = data["CreateBy"];
            this.menuLevel = data["MenuLevel"];
            this.descr = data["Descr"];
            this.showSeqence = data["ShowSeqence"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.linkTo = data["LinkTo"];
            this.isMenu = data["IsMenu"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysMenu {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysMenu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MenuCode"] = this.menuCode;
        data["MenuNameCn"] = this.menuNameCn;
        data["MenuNameEn"] = this.menuNameEn;
        data["SubSystemId"] = this.subSystemId;
        data["Status"] = this.status;
        data["ParentMenuCode"] = this.parentMenuCode;
        data["FullPath"] = this.fullPath;
        data["CreateBy"] = this.createBy;
        data["MenuLevel"] = this.menuLevel;
        data["Descr"] = this.descr;
        data["ShowSeqence"] = this.showSeqence;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["LinkTo"] = this.linkTo;
        data["IsMenu"] = this.isMenu;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysMenu {
    menuCode?: string | undefined;
    menuNameCn?: string | undefined;
    menuNameEn?: string | undefined;
    subSystemId?: string | undefined;
    status?: string | undefined;
    parentMenuCode?: string | undefined;
    fullPath?: string | undefined;
    createBy?: string | undefined;
    menuLevel?: number | undefined;
    descr?: string | undefined;
    showSeqence?: number | undefined;
    createTime?: Date | undefined;
    linkTo?: string | undefined;
    isMenu?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysPanel implements IEntSysPanel {
    menuPanelNameCn?: string | undefined;
    createTime?: Date | undefined;
    editTime?: Date | undefined;
    createBy?: string | undefined;
    editBy?: string | undefined;
    menuPanelId?: string | undefined;
    menuCode?: string | undefined;
    showSeqence?: number | undefined;
    status?: string | undefined;
    descr?: string | undefined;
    menuPanelNameEn?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysPanel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.menuPanelNameCn = data["MenuPanelNameCn"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editBy = data["EditBy"];
            this.menuPanelId = data["MenuPanelId"];
            this.menuCode = data["MenuCode"];
            this.showSeqence = data["ShowSeqence"];
            this.status = data["Status"];
            this.descr = data["Descr"];
            this.menuPanelNameEn = data["MenuPanelNameEn"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysPanel {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysPanel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MenuPanelNameCn"] = this.menuPanelNameCn;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditBy"] = this.editBy;
        data["MenuPanelId"] = this.menuPanelId;
        data["MenuCode"] = this.menuCode;
        data["ShowSeqence"] = this.showSeqence;
        data["Status"] = this.status;
        data["Descr"] = this.descr;
        data["MenuPanelNameEn"] = this.menuPanelNameEn;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysPanel {
    menuPanelNameCn?: string | undefined;
    createTime?: Date | undefined;
    editTime?: Date | undefined;
    createBy?: string | undefined;
    editBy?: string | undefined;
    menuPanelId?: string | undefined;
    menuCode?: string | undefined;
    showSeqence?: number | undefined;
    status?: string | undefined;
    descr?: string | undefined;
    menuPanelNameEn?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysPanelOperation implements IEntSysPanelOperation {
    menuPanelOpId?: string | undefined;
    menuPanelOpNameCn?: string | undefined;
    createTime?: Date | undefined;
    editTime?: Date | undefined;
    createBy?: string | undefined;
    editBy?: string | undefined;
    menuCode?: string | undefined;
    menuPanelId?: string | undefined;
    showSeqence?: number | undefined;
    descr?: string | undefined;
    status?: string | undefined;
    menuPanelOpNameEn?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysPanelOperation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.menuPanelOpId = data["MenuPanelOpId"];
            this.menuPanelOpNameCn = data["MenuPanelOpNameCn"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editBy = data["EditBy"];
            this.menuCode = data["MenuCode"];
            this.menuPanelId = data["MenuPanelId"];
            this.showSeqence = data["ShowSeqence"];
            this.descr = data["Descr"];
            this.status = data["Status"];
            this.menuPanelOpNameEn = data["MenuPanelOpNameEn"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysPanelOperation {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysPanelOperation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MenuPanelOpId"] = this.menuPanelOpId;
        data["MenuPanelOpNameCn"] = this.menuPanelOpNameCn;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditBy"] = this.editBy;
        data["MenuCode"] = this.menuCode;
        data["MenuPanelId"] = this.menuPanelId;
        data["ShowSeqence"] = this.showSeqence;
        data["Descr"] = this.descr;
        data["Status"] = this.status;
        data["MenuPanelOpNameEn"] = this.menuPanelOpNameEn;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysPanelOperation {
    menuPanelOpId?: string | undefined;
    menuPanelOpNameCn?: string | undefined;
    createTime?: Date | undefined;
    editTime?: Date | undefined;
    createBy?: string | undefined;
    editBy?: string | undefined;
    menuCode?: string | undefined;
    menuPanelId?: string | undefined;
    showSeqence?: number | undefined;
    descr?: string | undefined;
    status?: string | undefined;
    menuPanelOpNameEn?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysOperation implements IEntSysOperation {
    id?: number | undefined;
    menuCode?: string | undefined;
    operId?: string | undefined;
    operNameCn?: string | undefined;
    showSeqence?: number | undefined;
    status?: string | undefined;
    descr?: string | undefined;
    createTime?: Date | undefined;
    editTime?: Date | undefined;
    createBy?: string | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysOperation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.menuCode = data["MenuCode"];
            this.operId = data["OperId"];
            this.operNameCn = data["OperNameCn"];
            this.showSeqence = data["ShowSeqence"];
            this.status = data["Status"];
            this.descr = data["Descr"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editBy = data["EditBy"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysOperation {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysOperation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["MenuCode"] = this.menuCode;
        data["OperId"] = this.operId;
        data["OperNameCn"] = this.operNameCn;
        data["ShowSeqence"] = this.showSeqence;
        data["Status"] = this.status;
        data["Descr"] = this.descr;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditBy"] = this.editBy;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysOperation {
    id?: number | undefined;
    menuCode?: string | undefined;
    operId?: string | undefined;
    operNameCn?: string | undefined;
    showSeqence?: number | undefined;
    status?: string | undefined;
    descr?: string | undefined;
    createTime?: Date | undefined;
    editTime?: Date | undefined;
    createBy?: string | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysRole implements IEntSysRole {
    id?: number | undefined;
    roleId?: string | undefined;
    roleNameCn?: string | undefined;
    status?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    descr?: string | undefined;
    usd1?: string | undefined;
    roleNameEn?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.roleId = data["RoleId"];
            this.roleNameCn = data["RoleNameCn"];
            this.status = data["Status"];
            this.createBy = data["CreateBy"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.descr = data["Descr"];
            this.usd1 = data["Usd1"];
            this.roleNameEn = data["RoleNameEn"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysRole {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["RoleId"] = this.roleId;
        data["RoleNameCn"] = this.roleNameCn;
        data["Status"] = this.status;
        data["CreateBy"] = this.createBy;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["Descr"] = this.descr;
        data["Usd1"] = this.usd1;
        data["RoleNameEn"] = this.roleNameEn;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysRole {
    id?: number | undefined;
    roleId?: string | undefined;
    roleNameCn?: string | undefined;
    status?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    descr?: string | undefined;
    usd1?: string | undefined;
    roleNameEn?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysRoleInMenu implements IEntSysRoleInMenu {
    subSystemId?: string | undefined;
    menuList?: EntSysMenu[] | undefined;
    operationList?: EntSysOperation[] | undefined;
    id?: number | undefined;
    roleId?: string | undefined;
    menuCode?: string | undefined;
    descr?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysRoleInMenu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subSystemId = data["SubSystemId"];
            if (Array.isArray(data["MenuList"])) {
                this.menuList = [] as any;
                for (let item of data["MenuList"])
                    this.menuList!.push(EntSysMenu.fromJS(item));
            }
            if (Array.isArray(data["OperationList"])) {
                this.operationList = [] as any;
                for (let item of data["OperationList"])
                    this.operationList!.push(EntSysOperation.fromJS(item));
            }
            this.id = data["Id"];
            this.roleId = data["RoleId"];
            this.menuCode = data["MenuCode"];
            this.descr = data["Descr"];
            this.createBy = data["CreateBy"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysRoleInMenu {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysRoleInMenu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SubSystemId"] = this.subSystemId;
        if (Array.isArray(this.menuList)) {
            data["MenuList"] = [];
            for (let item of this.menuList)
                data["MenuList"].push(item.toJSON());
        }
        if (Array.isArray(this.operationList)) {
            data["OperationList"] = [];
            for (let item of this.operationList)
                data["OperationList"].push(item.toJSON());
        }
        data["Id"] = this.id;
        data["RoleId"] = this.roleId;
        data["MenuCode"] = this.menuCode;
        data["Descr"] = this.descr;
        data["CreateBy"] = this.createBy;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysRoleInMenu {
    subSystemId?: string | undefined;
    menuList?: EntSysMenu[] | undefined;
    operationList?: EntSysOperation[] | undefined;
    id?: number | undefined;
    roleId?: string | undefined;
    menuCode?: string | undefined;
    descr?: string | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntRpCustom implements IEntRpCustom {
    operOjbName?: string | undefined;
    showColumns?: string | undefined;
    condition?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntRpCustom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.operOjbName = data["OperOjbName"];
            this.showColumns = data["ShowColumns"];
            this.condition = data["Condition"];
            this.value1 = data["Value1"];
            this.value2 = data["Value2"];
            this.value3 = data["Value3"];
            this.value4 = data["Value4"];
            this.value5 = data["Value5"];
            this.value6 = data["Value6"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntRpCustom {
        data = typeof data === 'object' ? data : {};
        let result = new EntRpCustom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OperOjbName"] = this.operOjbName;
        data["ShowColumns"] = this.showColumns;
        data["Condition"] = this.condition;
        data["Value1"] = this.value1;
        data["Value2"] = this.value2;
        data["Value3"] = this.value3;
        data["Value4"] = this.value4;
        data["Value5"] = this.value5;
        data["Value6"] = this.value6;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntRpCustom {
    operOjbName?: string | undefined;
    showColumns?: string | undefined;
    condition?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntRulProperty implements IEntRulProperty {
    lotID?: string | undefined;
    descr?: string | undefined;
    lotAtt01Label?: string | undefined;
    lotAtt02Label?: string | undefined;
    lotAtt03Label?: string | undefined;
    lotAtt04Label?: string | undefined;
    lotAtt05Label?: string | undefined;
    lotAtt06Label?: string | undefined;
    lotAtt07Label?: string | undefined;
    lotAtt08Label?: string | undefined;
    lotAtt09Label?: string | undefined;
    lotAtt10Label?: string | undefined;
    lotAtt11Label?: string | undefined;
    lotAtt12Label?: string | undefined;
    lotAtt13Label?: string | undefined;
    lotAtt14Label?: string | undefined;
    lotAtt15Label?: string | undefined;
    lotAtt16Label?: string | undefined;
    lotAtt17Label?: string | undefined;
    lotAtt18Label?: string | undefined;
    lotAtt01Flag?: string | undefined;
    lotAtt02Flag?: string | undefined;
    lotAtt03Flag?: string | undefined;
    lotAtt04Flag?: string | undefined;
    lotAtt05Flag?: string | undefined;
    lotAtt06Flag?: string | undefined;
    lotAtt07Flag?: string | undefined;
    lotAtt08Flag?: string | undefined;
    lotAtt09Flag?: string | undefined;
    lotAtt10Flag?: string | undefined;
    lotAtt11Flag?: string | undefined;
    lotAtt12Flag?: string | undefined;
    lotAtt13Flag?: string | undefined;
    lotAtt14Flag?: string | undefined;
    lotAtt15Flag?: string | undefined;
    lotAtt16Flag?: string | undefined;
    lotAtt17Flag?: string | undefined;
    lotAtt18Flag?: string | undefined;
    lotAtte01Flag?: string | undefined;
    lotAtte02Flag?: string | undefined;
    lotAtte03Flag?: string | undefined;
    lotAtte04Flag?: string | undefined;
    lotAtte05Flag?: string | undefined;
    lotAtte06Flag?: string | undefined;
    lotAtte07Flag?: string | undefined;
    lotAtte08Flag?: string | undefined;
    lotAtte09Flag?: string | undefined;
    lotAtte10Flag?: string | undefined;
    lotAtte11Flag?: string | undefined;
    lotAtte12Flag?: string | undefined;
    lotAtte13Flag?: string | undefined;
    lotAtte14Flag?: string | undefined;
    lotAtte15Flag?: string | undefined;
    lotAtte16Flag?: string | undefined;
    lotAtte17Flag?: string | undefined;
    lotAtte18Flag?: string | undefined;
    lotType01?: string | undefined;
    lotType02?: string | undefined;
    lotType03?: string | undefined;
    lotType04?: string | undefined;
    lotType05?: string | undefined;
    lotType06?: string | undefined;
    lotType07?: string | undefined;
    lotType08?: string | undefined;
    lotType09?: string | undefined;
    lotType10?: string | undefined;
    lotType11?: string | undefined;
    lotType12?: string | undefined;
    lotType13?: string | undefined;
    lotType14?: string | undefined;
    lotType15?: string | undefined;
    lotType16?: string | undefined;
    lotType17?: string | undefined;
    lotType18?: string | undefined;
    lotAtt01LabelRF?: string | undefined;
    lotAtt02LabelRF?: string | undefined;
    lotAtt03LabelRF?: string | undefined;
    lotAtt04LabelRF?: string | undefined;
    lotAtt05LabelRF?: string | undefined;
    lotAtt06LabelRF?: string | undefined;
    lotAtt07LabelRF?: string | undefined;
    lotAtt08LabelRF?: string | undefined;
    lotAtt09LabelRF?: string | undefined;
    lotAtt10LabelRF?: string | undefined;
    lotAtt11LabelRF?: string | undefined;
    lotAtt12LabelRF?: string | undefined;
    lotAtt13LabelRF?: string | undefined;
    lotAtt14LabelRF?: string | undefined;
    lotAtt15LabelRF?: string | undefined;
    lotAtt16LabelRF?: string | undefined;
    lotAtt17LabelRF?: string | undefined;
    lotAtt18LabelRF?: string | undefined;
    lotAtt01Value?: string | undefined;
    lotAtt02Value?: string | undefined;
    lotAtt03Value?: string | undefined;
    lotAtt04Value?: string | undefined;
    lotAtt05Value?: string | undefined;
    lotAtt06Value?: string | undefined;
    lotAtt07Value?: string | undefined;
    lotAtt08Value?: string | undefined;
    lotAtt09Value?: string | undefined;
    lotAtt10Value?: string | undefined;
    lotAtt11Value?: string | undefined;
    lotAtt12Value?: string | undefined;
    lotAtt13Value?: string | undefined;
    lotAtt14Value?: string | undefined;
    lotAtt15Value?: string | undefined;
    lotAtt16Value?: string | undefined;
    lotAtt17Value?: string | undefined;
    lotAtt18Value?: string | undefined;
    lotKey01?: string | undefined;
    lotKey02?: string | undefined;
    lotKey03?: string | undefined;
    lotKey04?: string | undefined;
    lotKey05?: string | undefined;
    lotKey06?: string | undefined;
    lotKey07?: string | undefined;
    lotKey08?: string | undefined;
    lotKey09?: string | undefined;
    lotKey10?: string | undefined;
    lotKey11?: string | undefined;
    lotKey12?: string | undefined;
    lotKey13?: string | undefined;
    lotKey14?: string | undefined;
    lotKey15?: string | undefined;
    lotKey16?: string | undefined;
    lotKey17?: string | undefined;
    lotKey18?: string | undefined;
    lotShow01?: string | undefined;
    lotShow02?: string | undefined;
    lotShow03?: string | undefined;
    lotShow04?: string | undefined;
    lotShow05?: string | undefined;
    lotShow06?: string | undefined;
    lotShow07?: string | undefined;
    lotShow08?: string | undefined;
    lotShow09?: string | undefined;
    lotShow10?: string | undefined;
    lotShow11?: string | undefined;
    lotShow12?: string | undefined;
    lotShow13?: string | undefined;
    lotShow14?: string | undefined;
    lotShow15?: string | undefined;
    lotShow16?: string | undefined;
    lotShow17?: string | undefined;
    lotShow18?: string | undefined;
    rFShow01?: string | undefined;
    rFShow02?: string | undefined;
    rFShow03?: string | undefined;
    rFShow04?: string | undefined;
    rFShow05?: string | undefined;
    rFShow06?: string | undefined;
    rFShow07?: string | undefined;
    rFShow08?: string | undefined;
    rFShow09?: string | undefined;
    rFShow10?: string | undefined;
    rFShow11?: string | undefined;
    rFShow12?: string | undefined;
    rFShow13?: string | undefined;
    rFShow14?: string | undefined;
    rFShow15?: string | undefined;
    rFShow16?: string | undefined;
    rFShow17?: string | undefined;
    rFShow18?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntRulProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lotID = data["LotID"];
            this.descr = data["Descr"];
            this.lotAtt01Label = data["LotAtt01Label"];
            this.lotAtt02Label = data["LotAtt02Label"];
            this.lotAtt03Label = data["LotAtt03Label"];
            this.lotAtt04Label = data["LotAtt04Label"];
            this.lotAtt05Label = data["LotAtt05Label"];
            this.lotAtt06Label = data["LotAtt06Label"];
            this.lotAtt07Label = data["LotAtt07Label"];
            this.lotAtt08Label = data["LotAtt08Label"];
            this.lotAtt09Label = data["LotAtt09Label"];
            this.lotAtt10Label = data["LotAtt10Label"];
            this.lotAtt11Label = data["LotAtt11Label"];
            this.lotAtt12Label = data["LotAtt12Label"];
            this.lotAtt13Label = data["LotAtt13Label"];
            this.lotAtt14Label = data["LotAtt14Label"];
            this.lotAtt15Label = data["LotAtt15Label"];
            this.lotAtt16Label = data["LotAtt16Label"];
            this.lotAtt17Label = data["LotAtt17Label"];
            this.lotAtt18Label = data["LotAtt18Label"];
            this.lotAtt01Flag = data["LotAtt01Flag"];
            this.lotAtt02Flag = data["LotAtt02Flag"];
            this.lotAtt03Flag = data["LotAtt03Flag"];
            this.lotAtt04Flag = data["LotAtt04Flag"];
            this.lotAtt05Flag = data["LotAtt05Flag"];
            this.lotAtt06Flag = data["LotAtt06Flag"];
            this.lotAtt07Flag = data["LotAtt07Flag"];
            this.lotAtt08Flag = data["LotAtt08Flag"];
            this.lotAtt09Flag = data["LotAtt09Flag"];
            this.lotAtt10Flag = data["LotAtt10Flag"];
            this.lotAtt11Flag = data["LotAtt11Flag"];
            this.lotAtt12Flag = data["LotAtt12Flag"];
            this.lotAtt13Flag = data["LotAtt13Flag"];
            this.lotAtt14Flag = data["LotAtt14Flag"];
            this.lotAtt15Flag = data["LotAtt15Flag"];
            this.lotAtt16Flag = data["LotAtt16Flag"];
            this.lotAtt17Flag = data["LotAtt17Flag"];
            this.lotAtt18Flag = data["LotAtt18Flag"];
            this.lotAtte01Flag = data["LotAtte01Flag"];
            this.lotAtte02Flag = data["LotAtte02Flag"];
            this.lotAtte03Flag = data["LotAtte03Flag"];
            this.lotAtte04Flag = data["LotAtte04Flag"];
            this.lotAtte05Flag = data["LotAtte05Flag"];
            this.lotAtte06Flag = data["LotAtte06Flag"];
            this.lotAtte07Flag = data["LotAtte07Flag"];
            this.lotAtte08Flag = data["LotAtte08Flag"];
            this.lotAtte09Flag = data["LotAtte09Flag"];
            this.lotAtte10Flag = data["LotAtte10Flag"];
            this.lotAtte11Flag = data["LotAtte11Flag"];
            this.lotAtte12Flag = data["LotAtte12Flag"];
            this.lotAtte13Flag = data["LotAtte13Flag"];
            this.lotAtte14Flag = data["LotAtte14Flag"];
            this.lotAtte15Flag = data["LotAtte15Flag"];
            this.lotAtte16Flag = data["LotAtte16Flag"];
            this.lotAtte17Flag = data["LotAtte17Flag"];
            this.lotAtte18Flag = data["LotAtte18Flag"];
            this.lotType01 = data["LotType01"];
            this.lotType02 = data["LotType02"];
            this.lotType03 = data["LotType03"];
            this.lotType04 = data["LotType04"];
            this.lotType05 = data["LotType05"];
            this.lotType06 = data["LotType06"];
            this.lotType07 = data["LotType07"];
            this.lotType08 = data["LotType08"];
            this.lotType09 = data["LotType09"];
            this.lotType10 = data["LotType10"];
            this.lotType11 = data["LotType11"];
            this.lotType12 = data["LotType12"];
            this.lotType13 = data["LotType13"];
            this.lotType14 = data["LotType14"];
            this.lotType15 = data["LotType15"];
            this.lotType16 = data["LotType16"];
            this.lotType17 = data["LotType17"];
            this.lotType18 = data["LotType18"];
            this.lotAtt01LabelRF = data["LotAtt01LabelRF"];
            this.lotAtt02LabelRF = data["LotAtt02LabelRF"];
            this.lotAtt03LabelRF = data["LotAtt03LabelRF"];
            this.lotAtt04LabelRF = data["LotAtt04LabelRF"];
            this.lotAtt05LabelRF = data["LotAtt05LabelRF"];
            this.lotAtt06LabelRF = data["LotAtt06LabelRF"];
            this.lotAtt07LabelRF = data["LotAtt07LabelRF"];
            this.lotAtt08LabelRF = data["LotAtt08LabelRF"];
            this.lotAtt09LabelRF = data["LotAtt09LabelRF"];
            this.lotAtt10LabelRF = data["LotAtt10LabelRF"];
            this.lotAtt11LabelRF = data["LotAtt11LabelRF"];
            this.lotAtt12LabelRF = data["LotAtt12LabelRF"];
            this.lotAtt13LabelRF = data["LotAtt13LabelRF"];
            this.lotAtt14LabelRF = data["LotAtt14LabelRF"];
            this.lotAtt15LabelRF = data["LotAtt15LabelRF"];
            this.lotAtt16LabelRF = data["LotAtt16LabelRF"];
            this.lotAtt17LabelRF = data["LotAtt17LabelRF"];
            this.lotAtt18LabelRF = data["LotAtt18LabelRF"];
            this.lotAtt01Value = data["LotAtt01Value"];
            this.lotAtt02Value = data["LotAtt02Value"];
            this.lotAtt03Value = data["LotAtt03Value"];
            this.lotAtt04Value = data["LotAtt04Value"];
            this.lotAtt05Value = data["LotAtt05Value"];
            this.lotAtt06Value = data["LotAtt06Value"];
            this.lotAtt07Value = data["LotAtt07Value"];
            this.lotAtt08Value = data["LotAtt08Value"];
            this.lotAtt09Value = data["LotAtt09Value"];
            this.lotAtt10Value = data["LotAtt10Value"];
            this.lotAtt11Value = data["LotAtt11Value"];
            this.lotAtt12Value = data["LotAtt12Value"];
            this.lotAtt13Value = data["LotAtt13Value"];
            this.lotAtt14Value = data["LotAtt14Value"];
            this.lotAtt15Value = data["LotAtt15Value"];
            this.lotAtt16Value = data["LotAtt16Value"];
            this.lotAtt17Value = data["LotAtt17Value"];
            this.lotAtt18Value = data["LotAtt18Value"];
            this.lotKey01 = data["LotKey01"];
            this.lotKey02 = data["LotKey02"];
            this.lotKey03 = data["LotKey03"];
            this.lotKey04 = data["LotKey04"];
            this.lotKey05 = data["LotKey05"];
            this.lotKey06 = data["LotKey06"];
            this.lotKey07 = data["LotKey07"];
            this.lotKey08 = data["LotKey08"];
            this.lotKey09 = data["LotKey09"];
            this.lotKey10 = data["LotKey10"];
            this.lotKey11 = data["LotKey11"];
            this.lotKey12 = data["LotKey12"];
            this.lotKey13 = data["LotKey13"];
            this.lotKey14 = data["LotKey14"];
            this.lotKey15 = data["LotKey15"];
            this.lotKey16 = data["LotKey16"];
            this.lotKey17 = data["LotKey17"];
            this.lotKey18 = data["LotKey18"];
            this.lotShow01 = data["LotShow01"];
            this.lotShow02 = data["LotShow02"];
            this.lotShow03 = data["LotShow03"];
            this.lotShow04 = data["LotShow04"];
            this.lotShow05 = data["LotShow05"];
            this.lotShow06 = data["LotShow06"];
            this.lotShow07 = data["LotShow07"];
            this.lotShow08 = data["LotShow08"];
            this.lotShow09 = data["LotShow09"];
            this.lotShow10 = data["LotShow10"];
            this.lotShow11 = data["LotShow11"];
            this.lotShow12 = data["LotShow12"];
            this.lotShow13 = data["LotShow13"];
            this.lotShow14 = data["LotShow14"];
            this.lotShow15 = data["LotShow15"];
            this.lotShow16 = data["LotShow16"];
            this.lotShow17 = data["LotShow17"];
            this.lotShow18 = data["LotShow18"];
            this.rFShow01 = data["RFShow01"];
            this.rFShow02 = data["RFShow02"];
            this.rFShow03 = data["RFShow03"];
            this.rFShow04 = data["RFShow04"];
            this.rFShow05 = data["RFShow05"];
            this.rFShow06 = data["RFShow06"];
            this.rFShow07 = data["RFShow07"];
            this.rFShow08 = data["RFShow08"];
            this.rFShow09 = data["RFShow09"];
            this.rFShow10 = data["RFShow10"];
            this.rFShow11 = data["RFShow11"];
            this.rFShow12 = data["RFShow12"];
            this.rFShow13 = data["RFShow13"];
            this.rFShow14 = data["RFShow14"];
            this.rFShow15 = data["RFShow15"];
            this.rFShow16 = data["RFShow16"];
            this.rFShow17 = data["RFShow17"];
            this.rFShow18 = data["RFShow18"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntRulProperty {
        data = typeof data === 'object' ? data : {};
        let result = new EntRulProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LotID"] = this.lotID;
        data["Descr"] = this.descr;
        data["LotAtt01Label"] = this.lotAtt01Label;
        data["LotAtt02Label"] = this.lotAtt02Label;
        data["LotAtt03Label"] = this.lotAtt03Label;
        data["LotAtt04Label"] = this.lotAtt04Label;
        data["LotAtt05Label"] = this.lotAtt05Label;
        data["LotAtt06Label"] = this.lotAtt06Label;
        data["LotAtt07Label"] = this.lotAtt07Label;
        data["LotAtt08Label"] = this.lotAtt08Label;
        data["LotAtt09Label"] = this.lotAtt09Label;
        data["LotAtt10Label"] = this.lotAtt10Label;
        data["LotAtt11Label"] = this.lotAtt11Label;
        data["LotAtt12Label"] = this.lotAtt12Label;
        data["LotAtt13Label"] = this.lotAtt13Label;
        data["LotAtt14Label"] = this.lotAtt14Label;
        data["LotAtt15Label"] = this.lotAtt15Label;
        data["LotAtt16Label"] = this.lotAtt16Label;
        data["LotAtt17Label"] = this.lotAtt17Label;
        data["LotAtt18Label"] = this.lotAtt18Label;
        data["LotAtt01Flag"] = this.lotAtt01Flag;
        data["LotAtt02Flag"] = this.lotAtt02Flag;
        data["LotAtt03Flag"] = this.lotAtt03Flag;
        data["LotAtt04Flag"] = this.lotAtt04Flag;
        data["LotAtt05Flag"] = this.lotAtt05Flag;
        data["LotAtt06Flag"] = this.lotAtt06Flag;
        data["LotAtt07Flag"] = this.lotAtt07Flag;
        data["LotAtt08Flag"] = this.lotAtt08Flag;
        data["LotAtt09Flag"] = this.lotAtt09Flag;
        data["LotAtt10Flag"] = this.lotAtt10Flag;
        data["LotAtt11Flag"] = this.lotAtt11Flag;
        data["LotAtt12Flag"] = this.lotAtt12Flag;
        data["LotAtt13Flag"] = this.lotAtt13Flag;
        data["LotAtt14Flag"] = this.lotAtt14Flag;
        data["LotAtt15Flag"] = this.lotAtt15Flag;
        data["LotAtt16Flag"] = this.lotAtt16Flag;
        data["LotAtt17Flag"] = this.lotAtt17Flag;
        data["LotAtt18Flag"] = this.lotAtt18Flag;
        data["LotAtte01Flag"] = this.lotAtte01Flag;
        data["LotAtte02Flag"] = this.lotAtte02Flag;
        data["LotAtte03Flag"] = this.lotAtte03Flag;
        data["LotAtte04Flag"] = this.lotAtte04Flag;
        data["LotAtte05Flag"] = this.lotAtte05Flag;
        data["LotAtte06Flag"] = this.lotAtte06Flag;
        data["LotAtte07Flag"] = this.lotAtte07Flag;
        data["LotAtte08Flag"] = this.lotAtte08Flag;
        data["LotAtte09Flag"] = this.lotAtte09Flag;
        data["LotAtte10Flag"] = this.lotAtte10Flag;
        data["LotAtte11Flag"] = this.lotAtte11Flag;
        data["LotAtte12Flag"] = this.lotAtte12Flag;
        data["LotAtte13Flag"] = this.lotAtte13Flag;
        data["LotAtte14Flag"] = this.lotAtte14Flag;
        data["LotAtte15Flag"] = this.lotAtte15Flag;
        data["LotAtte16Flag"] = this.lotAtte16Flag;
        data["LotAtte17Flag"] = this.lotAtte17Flag;
        data["LotAtte18Flag"] = this.lotAtte18Flag;
        data["LotType01"] = this.lotType01;
        data["LotType02"] = this.lotType02;
        data["LotType03"] = this.lotType03;
        data["LotType04"] = this.lotType04;
        data["LotType05"] = this.lotType05;
        data["LotType06"] = this.lotType06;
        data["LotType07"] = this.lotType07;
        data["LotType08"] = this.lotType08;
        data["LotType09"] = this.lotType09;
        data["LotType10"] = this.lotType10;
        data["LotType11"] = this.lotType11;
        data["LotType12"] = this.lotType12;
        data["LotType13"] = this.lotType13;
        data["LotType14"] = this.lotType14;
        data["LotType15"] = this.lotType15;
        data["LotType16"] = this.lotType16;
        data["LotType17"] = this.lotType17;
        data["LotType18"] = this.lotType18;
        data["LotAtt01LabelRF"] = this.lotAtt01LabelRF;
        data["LotAtt02LabelRF"] = this.lotAtt02LabelRF;
        data["LotAtt03LabelRF"] = this.lotAtt03LabelRF;
        data["LotAtt04LabelRF"] = this.lotAtt04LabelRF;
        data["LotAtt05LabelRF"] = this.lotAtt05LabelRF;
        data["LotAtt06LabelRF"] = this.lotAtt06LabelRF;
        data["LotAtt07LabelRF"] = this.lotAtt07LabelRF;
        data["LotAtt08LabelRF"] = this.lotAtt08LabelRF;
        data["LotAtt09LabelRF"] = this.lotAtt09LabelRF;
        data["LotAtt10LabelRF"] = this.lotAtt10LabelRF;
        data["LotAtt11LabelRF"] = this.lotAtt11LabelRF;
        data["LotAtt12LabelRF"] = this.lotAtt12LabelRF;
        data["LotAtt13LabelRF"] = this.lotAtt13LabelRF;
        data["LotAtt14LabelRF"] = this.lotAtt14LabelRF;
        data["LotAtt15LabelRF"] = this.lotAtt15LabelRF;
        data["LotAtt16LabelRF"] = this.lotAtt16LabelRF;
        data["LotAtt17LabelRF"] = this.lotAtt17LabelRF;
        data["LotAtt18LabelRF"] = this.lotAtt18LabelRF;
        data["LotAtt01Value"] = this.lotAtt01Value;
        data["LotAtt02Value"] = this.lotAtt02Value;
        data["LotAtt03Value"] = this.lotAtt03Value;
        data["LotAtt04Value"] = this.lotAtt04Value;
        data["LotAtt05Value"] = this.lotAtt05Value;
        data["LotAtt06Value"] = this.lotAtt06Value;
        data["LotAtt07Value"] = this.lotAtt07Value;
        data["LotAtt08Value"] = this.lotAtt08Value;
        data["LotAtt09Value"] = this.lotAtt09Value;
        data["LotAtt10Value"] = this.lotAtt10Value;
        data["LotAtt11Value"] = this.lotAtt11Value;
        data["LotAtt12Value"] = this.lotAtt12Value;
        data["LotAtt13Value"] = this.lotAtt13Value;
        data["LotAtt14Value"] = this.lotAtt14Value;
        data["LotAtt15Value"] = this.lotAtt15Value;
        data["LotAtt16Value"] = this.lotAtt16Value;
        data["LotAtt17Value"] = this.lotAtt17Value;
        data["LotAtt18Value"] = this.lotAtt18Value;
        data["LotKey01"] = this.lotKey01;
        data["LotKey02"] = this.lotKey02;
        data["LotKey03"] = this.lotKey03;
        data["LotKey04"] = this.lotKey04;
        data["LotKey05"] = this.lotKey05;
        data["LotKey06"] = this.lotKey06;
        data["LotKey07"] = this.lotKey07;
        data["LotKey08"] = this.lotKey08;
        data["LotKey09"] = this.lotKey09;
        data["LotKey10"] = this.lotKey10;
        data["LotKey11"] = this.lotKey11;
        data["LotKey12"] = this.lotKey12;
        data["LotKey13"] = this.lotKey13;
        data["LotKey14"] = this.lotKey14;
        data["LotKey15"] = this.lotKey15;
        data["LotKey16"] = this.lotKey16;
        data["LotKey17"] = this.lotKey17;
        data["LotKey18"] = this.lotKey18;
        data["LotShow01"] = this.lotShow01;
        data["LotShow02"] = this.lotShow02;
        data["LotShow03"] = this.lotShow03;
        data["LotShow04"] = this.lotShow04;
        data["LotShow05"] = this.lotShow05;
        data["LotShow06"] = this.lotShow06;
        data["LotShow07"] = this.lotShow07;
        data["LotShow08"] = this.lotShow08;
        data["LotShow09"] = this.lotShow09;
        data["LotShow10"] = this.lotShow10;
        data["LotShow11"] = this.lotShow11;
        data["LotShow12"] = this.lotShow12;
        data["LotShow13"] = this.lotShow13;
        data["LotShow14"] = this.lotShow14;
        data["LotShow15"] = this.lotShow15;
        data["LotShow16"] = this.lotShow16;
        data["LotShow17"] = this.lotShow17;
        data["LotShow18"] = this.lotShow18;
        data["RFShow01"] = this.rFShow01;
        data["RFShow02"] = this.rFShow02;
        data["RFShow03"] = this.rFShow03;
        data["RFShow04"] = this.rFShow04;
        data["RFShow05"] = this.rFShow05;
        data["RFShow06"] = this.rFShow06;
        data["RFShow07"] = this.rFShow07;
        data["RFShow08"] = this.rFShow08;
        data["RFShow09"] = this.rFShow09;
        data["RFShow10"] = this.rFShow10;
        data["RFShow11"] = this.rFShow11;
        data["RFShow12"] = this.rFShow12;
        data["RFShow13"] = this.rFShow13;
        data["RFShow14"] = this.rFShow14;
        data["RFShow15"] = this.rFShow15;
        data["RFShow16"] = this.rFShow16;
        data["RFShow17"] = this.rFShow17;
        data["RFShow18"] = this.rFShow18;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntRulProperty {
    lotID?: string | undefined;
    descr?: string | undefined;
    lotAtt01Label?: string | undefined;
    lotAtt02Label?: string | undefined;
    lotAtt03Label?: string | undefined;
    lotAtt04Label?: string | undefined;
    lotAtt05Label?: string | undefined;
    lotAtt06Label?: string | undefined;
    lotAtt07Label?: string | undefined;
    lotAtt08Label?: string | undefined;
    lotAtt09Label?: string | undefined;
    lotAtt10Label?: string | undefined;
    lotAtt11Label?: string | undefined;
    lotAtt12Label?: string | undefined;
    lotAtt13Label?: string | undefined;
    lotAtt14Label?: string | undefined;
    lotAtt15Label?: string | undefined;
    lotAtt16Label?: string | undefined;
    lotAtt17Label?: string | undefined;
    lotAtt18Label?: string | undefined;
    lotAtt01Flag?: string | undefined;
    lotAtt02Flag?: string | undefined;
    lotAtt03Flag?: string | undefined;
    lotAtt04Flag?: string | undefined;
    lotAtt05Flag?: string | undefined;
    lotAtt06Flag?: string | undefined;
    lotAtt07Flag?: string | undefined;
    lotAtt08Flag?: string | undefined;
    lotAtt09Flag?: string | undefined;
    lotAtt10Flag?: string | undefined;
    lotAtt11Flag?: string | undefined;
    lotAtt12Flag?: string | undefined;
    lotAtt13Flag?: string | undefined;
    lotAtt14Flag?: string | undefined;
    lotAtt15Flag?: string | undefined;
    lotAtt16Flag?: string | undefined;
    lotAtt17Flag?: string | undefined;
    lotAtt18Flag?: string | undefined;
    lotAtte01Flag?: string | undefined;
    lotAtte02Flag?: string | undefined;
    lotAtte03Flag?: string | undefined;
    lotAtte04Flag?: string | undefined;
    lotAtte05Flag?: string | undefined;
    lotAtte06Flag?: string | undefined;
    lotAtte07Flag?: string | undefined;
    lotAtte08Flag?: string | undefined;
    lotAtte09Flag?: string | undefined;
    lotAtte10Flag?: string | undefined;
    lotAtte11Flag?: string | undefined;
    lotAtte12Flag?: string | undefined;
    lotAtte13Flag?: string | undefined;
    lotAtte14Flag?: string | undefined;
    lotAtte15Flag?: string | undefined;
    lotAtte16Flag?: string | undefined;
    lotAtte17Flag?: string | undefined;
    lotAtte18Flag?: string | undefined;
    lotType01?: string | undefined;
    lotType02?: string | undefined;
    lotType03?: string | undefined;
    lotType04?: string | undefined;
    lotType05?: string | undefined;
    lotType06?: string | undefined;
    lotType07?: string | undefined;
    lotType08?: string | undefined;
    lotType09?: string | undefined;
    lotType10?: string | undefined;
    lotType11?: string | undefined;
    lotType12?: string | undefined;
    lotType13?: string | undefined;
    lotType14?: string | undefined;
    lotType15?: string | undefined;
    lotType16?: string | undefined;
    lotType17?: string | undefined;
    lotType18?: string | undefined;
    lotAtt01LabelRF?: string | undefined;
    lotAtt02LabelRF?: string | undefined;
    lotAtt03LabelRF?: string | undefined;
    lotAtt04LabelRF?: string | undefined;
    lotAtt05LabelRF?: string | undefined;
    lotAtt06LabelRF?: string | undefined;
    lotAtt07LabelRF?: string | undefined;
    lotAtt08LabelRF?: string | undefined;
    lotAtt09LabelRF?: string | undefined;
    lotAtt10LabelRF?: string | undefined;
    lotAtt11LabelRF?: string | undefined;
    lotAtt12LabelRF?: string | undefined;
    lotAtt13LabelRF?: string | undefined;
    lotAtt14LabelRF?: string | undefined;
    lotAtt15LabelRF?: string | undefined;
    lotAtt16LabelRF?: string | undefined;
    lotAtt17LabelRF?: string | undefined;
    lotAtt18LabelRF?: string | undefined;
    lotAtt01Value?: string | undefined;
    lotAtt02Value?: string | undefined;
    lotAtt03Value?: string | undefined;
    lotAtt04Value?: string | undefined;
    lotAtt05Value?: string | undefined;
    lotAtt06Value?: string | undefined;
    lotAtt07Value?: string | undefined;
    lotAtt08Value?: string | undefined;
    lotAtt09Value?: string | undefined;
    lotAtt10Value?: string | undefined;
    lotAtt11Value?: string | undefined;
    lotAtt12Value?: string | undefined;
    lotAtt13Value?: string | undefined;
    lotAtt14Value?: string | undefined;
    lotAtt15Value?: string | undefined;
    lotAtt16Value?: string | undefined;
    lotAtt17Value?: string | undefined;
    lotAtt18Value?: string | undefined;
    lotKey01?: string | undefined;
    lotKey02?: string | undefined;
    lotKey03?: string | undefined;
    lotKey04?: string | undefined;
    lotKey05?: string | undefined;
    lotKey06?: string | undefined;
    lotKey07?: string | undefined;
    lotKey08?: string | undefined;
    lotKey09?: string | undefined;
    lotKey10?: string | undefined;
    lotKey11?: string | undefined;
    lotKey12?: string | undefined;
    lotKey13?: string | undefined;
    lotKey14?: string | undefined;
    lotKey15?: string | undefined;
    lotKey16?: string | undefined;
    lotKey17?: string | undefined;
    lotKey18?: string | undefined;
    lotShow01?: string | undefined;
    lotShow02?: string | undefined;
    lotShow03?: string | undefined;
    lotShow04?: string | undefined;
    lotShow05?: string | undefined;
    lotShow06?: string | undefined;
    lotShow07?: string | undefined;
    lotShow08?: string | undefined;
    lotShow09?: string | undefined;
    lotShow10?: string | undefined;
    lotShow11?: string | undefined;
    lotShow12?: string | undefined;
    lotShow13?: string | undefined;
    lotShow14?: string | undefined;
    lotShow15?: string | undefined;
    lotShow16?: string | undefined;
    lotShow17?: string | undefined;
    lotShow18?: string | undefined;
    rFShow01?: string | undefined;
    rFShow02?: string | undefined;
    rFShow03?: string | undefined;
    rFShow04?: string | undefined;
    rFShow05?: string | undefined;
    rFShow06?: string | undefined;
    rFShow07?: string | undefined;
    rFShow08?: string | undefined;
    rFShow09?: string | undefined;
    rFShow10?: string | undefined;
    rFShow11?: string | undefined;
    rFShow12?: string | undefined;
    rFShow13?: string | undefined;
    rFShow14?: string | undefined;
    rFShow15?: string | undefined;
    rFShow16?: string | undefined;
    rFShow17?: string | undefined;
    rFShow18?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSapInvoice implements IEntSapInvoice {
    createTimeBegin?: Date | undefined;
    createTimeEnd?: Date | undefined;
    copGNo?: string | undefined;
    id?: number | undefined;
    invoiceNo?: string | undefined;
    invoiceLineNo?: string | undefined;
    invoiceDate?: Date | undefined;
    asnNo?: string | undefined;
    po?: string | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    status?: number | undefined;
    sku?: string | undefined;
    sapUnit?: string | undefined;
    total?: number | undefined;
    netWeight?: number | undefined;
    grossWeight?: number | undefined;
    qty?: number | undefined;
    leftQty?: number | undefined;
    factoryNo?: string | undefined;
    refDocItemId?: string | undefined;
    refDocId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSapInvoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createTimeBegin = data["CreateTimeBegin"] ? new Date(data["CreateTimeBegin"].toString()) : <any>undefined;
            this.createTimeEnd = data["CreateTimeEnd"] ? new Date(data["CreateTimeEnd"].toString()) : <any>undefined;
            this.copGNo = data["CopGNo"];
            this.id = data["Id"];
            this.invoiceNo = data["InvoiceNo"];
            this.invoiceLineNo = data["InvoiceLineNo"];
            this.invoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.asnNo = data["AsnNo"];
            this.po = data["Po"];
            this.organizationCode = data["OrganizationCode"];
            this.emsNo = data["EmsNo"];
            this.status = data["Status"];
            this.sku = data["Sku"];
            this.sapUnit = data["SapUnit"];
            this.total = data["Total"];
            this.netWeight = data["NetWeight"];
            this.grossWeight = data["GrossWeight"];
            this.qty = data["Qty"];
            this.leftQty = data["LeftQty"];
            this.factoryNo = data["FactoryNo"];
            this.refDocItemId = data["RefDocItemId"];
            this.refDocId = data["RefDocId"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSapInvoice {
        data = typeof data === 'object' ? data : {};
        let result = new EntSapInvoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreateTimeBegin"] = this.createTimeBegin ? this.createTimeBegin.toISOString() : <any>undefined;
        data["CreateTimeEnd"] = this.createTimeEnd ? this.createTimeEnd.toISOString() : <any>undefined;
        data["CopGNo"] = this.copGNo;
        data["Id"] = this.id;
        data["InvoiceNo"] = this.invoiceNo;
        data["InvoiceLineNo"] = this.invoiceLineNo;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["AsnNo"] = this.asnNo;
        data["Po"] = this.po;
        data["OrganizationCode"] = this.organizationCode;
        data["EmsNo"] = this.emsNo;
        data["Status"] = this.status;
        data["Sku"] = this.sku;
        data["SapUnit"] = this.sapUnit;
        data["Total"] = this.total;
        data["NetWeight"] = this.netWeight;
        data["GrossWeight"] = this.grossWeight;
        data["Qty"] = this.qty;
        data["LeftQty"] = this.leftQty;
        data["FactoryNo"] = this.factoryNo;
        data["RefDocItemId"] = this.refDocItemId;
        data["RefDocId"] = this.refDocId;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSapInvoice {
    createTimeBegin?: Date | undefined;
    createTimeEnd?: Date | undefined;
    copGNo?: string | undefined;
    id?: number | undefined;
    invoiceNo?: string | undefined;
    invoiceLineNo?: string | undefined;
    invoiceDate?: Date | undefined;
    asnNo?: string | undefined;
    po?: string | undefined;
    organizationCode?: string | undefined;
    emsNo?: string | undefined;
    status?: number | undefined;
    sku?: string | undefined;
    sapUnit?: string | undefined;
    total?: number | undefined;
    netWeight?: number | undefined;
    grossWeight?: number | undefined;
    qty?: number | undefined;
    leftQty?: number | undefined;
    factoryNo?: string | undefined;
    refDocItemId?: string | undefined;
    refDocId?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    updateDate?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpScheduleagreement implements IEntCustomsErpScheduleagreement {
    id?: number | undefined;
    agreementID?: string | undefined;
    cNCompanyCode?: string | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    validDate?: Date | undefined;
    signDate?: Date | undefined;
    cNCompanyAddress?: string | undefined;
    inCoTerm?: string | undefined;
    cNTradeCo?: string | undefined;
    cNCompanyName?: string | undefined;
    cNCompanyNameEN?: string | undefined;
    cNCompanyTelephone?: string | undefined;
    cNCompanyFax?: string | undefined;
    cNCompanyEmailAdress?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerCompanyCodeVAT2?: string | undefined;
    sellerCompanyCode2?: string | undefined;
    companyNameEn2?: string | undefined;
    companyFullNameEn2?: string | undefined;
    companyNameZH2?: string | undefined;
    companyFullNameZH2?: string | undefined;
    countryCodeISO2?: string | undefined;
    countryCodeZH2?: string | undefined;
    countryFullNameEn2?: string | undefined;
    countryNameZH2?: string | undefined;
    countryFullNameZH2?: string | undefined;
    companyAddress2?: string | undefined;
    companyTelephone2?: string | undefined;
    companyFax2?: string | undefined;
    companyEmailAdress2?: string | undefined;
    sellerCompanyCodeVAT3?: string | undefined;
    sellerCompanyCode3?: string | undefined;
    companyNameEn3?: string | undefined;
    companyFullNameEn3?: string | undefined;
    companyNameZH3?: string | undefined;
    companyFullNameZH3?: string | undefined;
    countryCodeISO3?: string | undefined;
    countryCodeZH3?: string | undefined;
    countryFullNameEn3?: string | undefined;
    countryNameZH3?: string | undefined;
    countryFullNameZH3?: string | undefined;
    companyAddress3?: string | undefined;
    companyTelephone3?: string | undefined;
    companyFax3?: string | undefined;
    companyEmailAdress3?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpScheduleagreement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.agreementID = data["AgreementID"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.totalPrice = data["TotalPrice"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.validDate = data["ValidDate"] ? new Date(data["ValidDate"].toString()) : <any>undefined;
            this.signDate = data["SignDate"] ? new Date(data["SignDate"].toString()) : <any>undefined;
            this.cNCompanyAddress = data["CNCompanyAddress"];
            this.inCoTerm = data["InCoTerm"];
            this.cNTradeCo = data["CNTradeCo"];
            this.cNCompanyName = data["CNCompanyName"];
            this.cNCompanyNameEN = data["CNCompanyNameEN"];
            this.cNCompanyTelephone = data["CNCompanyTelephone"];
            this.cNCompanyFax = data["CNCompanyFax"];
            this.cNCompanyEmailAdress = data["CNCompanyEmailAdress"];
            this.sellerCompanyVAT = data["SellerCompanyVAT"];
            this.sellerCompanyCode = data["SellerCompanyCode"];
            this.companyNameEn = data["CompanyNameEn"];
            this.companyFullNameEn = data["CompanyFullNameEn"];
            this.companyNameZH = data["CompanyNameZH"];
            this.companyFullNameZH = data["CompanyFullNameZH"];
            this.countryCodeISO = data["CountryCodeISO"];
            this.countryCodeZH = data["CountryCodeZH"];
            this.countryFullNameEn = data["CountryFullNameEn"];
            this.countryNameZH = data["CountryNameZH"];
            this.countryFullNameZH = data["CountryFullNameZH"];
            this.companyAddress = data["CompanyAddress"];
            this.companyTelephone = data["CompanyTelephone"];
            this.companyFax = data["CompanyFax"];
            this.companyEmailAdress = data["CompanyEmailAdress"];
            this.sellerCompanyCodeVAT2 = data["SellerCompanyCodeVAT2"];
            this.sellerCompanyCode2 = data["SellerCompanyCode2"];
            this.companyNameEn2 = data["CompanyNameEn2"];
            this.companyFullNameEn2 = data["CompanyFullNameEn2"];
            this.companyNameZH2 = data["CompanyNameZH2"];
            this.companyFullNameZH2 = data["CompanyFullNameZH2"];
            this.countryCodeISO2 = data["CountryCodeISO2"];
            this.countryCodeZH2 = data["CountryCodeZH2"];
            this.countryFullNameEn2 = data["CountryFullNameEn2"];
            this.countryNameZH2 = data["CountryNameZH2"];
            this.countryFullNameZH2 = data["CountryFullNameZH2"];
            this.companyAddress2 = data["CompanyAddress2"];
            this.companyTelephone2 = data["CompanyTelephone2"];
            this.companyFax2 = data["CompanyFax2"];
            this.companyEmailAdress2 = data["CompanyEmailAdress2"];
            this.sellerCompanyCodeVAT3 = data["SellerCompanyCodeVAT3"];
            this.sellerCompanyCode3 = data["SellerCompanyCode3"];
            this.companyNameEn3 = data["CompanyNameEn3"];
            this.companyFullNameEn3 = data["CompanyFullNameEn3"];
            this.companyNameZH3 = data["CompanyNameZH3"];
            this.companyFullNameZH3 = data["CompanyFullNameZH3"];
            this.countryCodeISO3 = data["CountryCodeISO3"];
            this.countryCodeZH3 = data["CountryCodeZH3"];
            this.countryFullNameEn3 = data["CountryFullNameEn3"];
            this.countryNameZH3 = data["CountryNameZH3"];
            this.countryFullNameZH3 = data["CountryFullNameZH3"];
            this.companyAddress3 = data["CompanyAddress3"];
            this.companyTelephone3 = data["CompanyTelephone3"];
            this.companyFax3 = data["CompanyFax3"];
            this.companyEmailAdress3 = data["CompanyEmailAdress3"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpScheduleagreement {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpScheduleagreement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["AgreementID"] = this.agreementID;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["TotalPrice"] = this.totalPrice;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["ValidDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["SignDate"] = this.signDate ? this.signDate.toISOString() : <any>undefined;
        data["CNCompanyAddress"] = this.cNCompanyAddress;
        data["InCoTerm"] = this.inCoTerm;
        data["CNTradeCo"] = this.cNTradeCo;
        data["CNCompanyName"] = this.cNCompanyName;
        data["CNCompanyNameEN"] = this.cNCompanyNameEN;
        data["CNCompanyTelephone"] = this.cNCompanyTelephone;
        data["CNCompanyFax"] = this.cNCompanyFax;
        data["CNCompanyEmailAdress"] = this.cNCompanyEmailAdress;
        data["SellerCompanyVAT"] = this.sellerCompanyVAT;
        data["SellerCompanyCode"] = this.sellerCompanyCode;
        data["CompanyNameEn"] = this.companyNameEn;
        data["CompanyFullNameEn"] = this.companyFullNameEn;
        data["CompanyNameZH"] = this.companyNameZH;
        data["CompanyFullNameZH"] = this.companyFullNameZH;
        data["CountryCodeISO"] = this.countryCodeISO;
        data["CountryCodeZH"] = this.countryCodeZH;
        data["CountryFullNameEn"] = this.countryFullNameEn;
        data["CountryNameZH"] = this.countryNameZH;
        data["CountryFullNameZH"] = this.countryFullNameZH;
        data["CompanyAddress"] = this.companyAddress;
        data["CompanyTelephone"] = this.companyTelephone;
        data["CompanyFax"] = this.companyFax;
        data["CompanyEmailAdress"] = this.companyEmailAdress;
        data["SellerCompanyCodeVAT2"] = this.sellerCompanyCodeVAT2;
        data["SellerCompanyCode2"] = this.sellerCompanyCode2;
        data["CompanyNameEn2"] = this.companyNameEn2;
        data["CompanyFullNameEn2"] = this.companyFullNameEn2;
        data["CompanyNameZH2"] = this.companyNameZH2;
        data["CompanyFullNameZH2"] = this.companyFullNameZH2;
        data["CountryCodeISO2"] = this.countryCodeISO2;
        data["CountryCodeZH2"] = this.countryCodeZH2;
        data["CountryFullNameEn2"] = this.countryFullNameEn2;
        data["CountryNameZH2"] = this.countryNameZH2;
        data["CountryFullNameZH2"] = this.countryFullNameZH2;
        data["CompanyAddress2"] = this.companyAddress2;
        data["CompanyTelephone2"] = this.companyTelephone2;
        data["CompanyFax2"] = this.companyFax2;
        data["CompanyEmailAdress2"] = this.companyEmailAdress2;
        data["SellerCompanyCodeVAT3"] = this.sellerCompanyCodeVAT3;
        data["SellerCompanyCode3"] = this.sellerCompanyCode3;
        data["CompanyNameEn3"] = this.companyNameEn3;
        data["CompanyFullNameEn3"] = this.companyFullNameEn3;
        data["CompanyNameZH3"] = this.companyNameZH3;
        data["CompanyFullNameZH3"] = this.companyFullNameZH3;
        data["CountryCodeISO3"] = this.countryCodeISO3;
        data["CountryCodeZH3"] = this.countryCodeZH3;
        data["CountryFullNameEn3"] = this.countryFullNameEn3;
        data["CountryNameZH3"] = this.countryNameZH3;
        data["CountryFullNameZH3"] = this.countryFullNameZH3;
        data["CompanyAddress3"] = this.companyAddress3;
        data["CompanyTelephone3"] = this.companyTelephone3;
        data["CompanyFax3"] = this.companyFax3;
        data["CompanyEmailAdress3"] = this.companyEmailAdress3;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpScheduleagreement {
    id?: number | undefined;
    agreementID?: string | undefined;
    cNCompanyCode?: string | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    validDate?: Date | undefined;
    signDate?: Date | undefined;
    cNCompanyAddress?: string | undefined;
    inCoTerm?: string | undefined;
    cNTradeCo?: string | undefined;
    cNCompanyName?: string | undefined;
    cNCompanyNameEN?: string | undefined;
    cNCompanyTelephone?: string | undefined;
    cNCompanyFax?: string | undefined;
    cNCompanyEmailAdress?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerCompanyCodeVAT2?: string | undefined;
    sellerCompanyCode2?: string | undefined;
    companyNameEn2?: string | undefined;
    companyFullNameEn2?: string | undefined;
    companyNameZH2?: string | undefined;
    companyFullNameZH2?: string | undefined;
    countryCodeISO2?: string | undefined;
    countryCodeZH2?: string | undefined;
    countryFullNameEn2?: string | undefined;
    countryNameZH2?: string | undefined;
    countryFullNameZH2?: string | undefined;
    companyAddress2?: string | undefined;
    companyTelephone2?: string | undefined;
    companyFax2?: string | undefined;
    companyEmailAdress2?: string | undefined;
    sellerCompanyCodeVAT3?: string | undefined;
    sellerCompanyCode3?: string | undefined;
    companyNameEn3?: string | undefined;
    companyFullNameEn3?: string | undefined;
    companyNameZH3?: string | undefined;
    companyFullNameZH3?: string | undefined;
    countryCodeISO3?: string | undefined;
    countryCodeZH3?: string | undefined;
    countryFullNameEn3?: string | undefined;
    countryNameZH3?: string | undefined;
    countryFullNameZH3?: string | undefined;
    companyAddress3?: string | undefined;
    companyTelephone3?: string | undefined;
    companyFax3?: string | undefined;
    companyEmailAdress3?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpSellerorder implements IEntCustomsErpSellerorder {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    inCoTerm?: string | undefined;
    orderDate?: Date | undefined;
    emailAdress?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpSellerorder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.contractNO = data["ContractNO"];
            this.agreementID = data["AgreementID"];
            this.sellerCompanyVAT = data["SellerCompanyVAT"];
            this.sellerCompanyCode = data["SellerCompanyCode"];
            this.companyNameEn = data["CompanyNameEn"];
            this.companyFullNameEn = data["CompanyFullNameEn"];
            this.companyNameZH = data["CompanyNameZH"];
            this.companyFullNameZH = data["CompanyFullNameZH"];
            this.countryCodeISO = data["CountryCodeISO"];
            this.countryCodeZH = data["CountryCodeZH"];
            this.countryFullNameEn = data["CountryFullNameEn"];
            this.countryNameZH = data["CountryNameZH"];
            this.countryFullNameZH = data["CountryFullNameZH"];
            this.companyAddress = data["CompanyAddress"];
            this.companyTelephone = data["CompanyTelephone"];
            this.companyFax = data["CompanyFax"];
            this.companyEmailAdress = data["CompanyEmailAdress"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.inCoTerm = data["InCoTerm"];
            this.orderDate = data["OrderDate"] ? new Date(data["OrderDate"].toString()) : <any>undefined;
            this.emailAdress = data["EmailAdress"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpSellerorder {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpSellerorder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["ContractNO"] = this.contractNO;
        data["AgreementID"] = this.agreementID;
        data["SellerCompanyVAT"] = this.sellerCompanyVAT;
        data["SellerCompanyCode"] = this.sellerCompanyCode;
        data["CompanyNameEn"] = this.companyNameEn;
        data["CompanyFullNameEn"] = this.companyFullNameEn;
        data["CompanyNameZH"] = this.companyNameZH;
        data["CompanyFullNameZH"] = this.companyFullNameZH;
        data["CountryCodeISO"] = this.countryCodeISO;
        data["CountryCodeZH"] = this.countryCodeZH;
        data["CountryFullNameEn"] = this.countryFullNameEn;
        data["CountryNameZH"] = this.countryNameZH;
        data["CountryFullNameZH"] = this.countryFullNameZH;
        data["CompanyAddress"] = this.companyAddress;
        data["CompanyTelephone"] = this.companyTelephone;
        data["CompanyFax"] = this.companyFax;
        data["CompanyEmailAdress"] = this.companyEmailAdress;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["InCoTerm"] = this.inCoTerm;
        data["OrderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["EmailAdress"] = this.emailAdress;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpSellerorder {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    cNCompanyCode?: string | undefined;
    contractNO?: string | undefined;
    agreementID?: string | undefined;
    sellerCompanyVAT?: string | undefined;
    sellerCompanyCode?: string | undefined;
    companyNameEn?: string | undefined;
    companyFullNameEn?: string | undefined;
    companyNameZH?: string | undefined;
    companyFullNameZH?: string | undefined;
    countryCodeISO?: string | undefined;
    countryCodeZH?: string | undefined;
    countryFullNameEn?: string | undefined;
    countryNameZH?: string | undefined;
    countryFullNameZH?: string | undefined;
    companyAddress?: string | undefined;
    companyTelephone?: string | undefined;
    companyFax?: string | undefined;
    companyEmailAdress?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    inCoTerm?: string | undefined;
    orderDate?: Date | undefined;
    emailAdress?: string | undefined;
    uploadFlag?: number | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntCustomsErpSellerorderlist implements IEntCustomsErpSellerorderlist {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    cNCompanyCode?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    deliveryDate?: Date | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntCustomsErpSellerorderlist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.purchaseOrderNO = data["PurchaseOrderNO"];
            this.sellerOrderASN = data["SellerOrderASN"];
            this.sOorASN = data["SOorASN"];
            this.cNCompanyCode = data["CNCompanyCode"];
            this.item = data["Item"];
            this.materialNO = data["MaterialNO"];
            this.goodsDesZH = data["GoodsDesZH"];
            this.goodsDesEN = data["GoodsDesEN"];
            this.deliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.totalQuantity = data["TotalQuantity"];
            this.totalQuantityUnit = data["TotalQuantityUnit"];
            this.groupQuantity = data["GroupQuantity"];
            this.groupQuantityUnit = data["GroupQuantityUnit"];
            this.quantity = data["Quantity"];
            this.quantityUnit = data["QuantityUnit"];
            this.groupWeight = data["GroupWeight"];
            this.groupWeightUnit = data["GroupWeightUnit"];
            this.weight = data["Weight"];
            this.weightUnit = data["WeightUnit"];
            this.groupUnitPrice = data["GroupUnitPrice"];
            this.unitPrice = data["UnitPrice"];
            this.totalPrice = data["TotalPrice"];
            this.currency = data["Currency"];
            this.currencyZH = data["CurrencyZH"];
            this.exchangeRate = data["ExchangeRate"];
            this.uploadFlag = data["UploadFlag"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntCustomsErpSellerorderlist {
        data = typeof data === 'object' ? data : {};
        let result = new EntCustomsErpSellerorderlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PurchaseOrderNO"] = this.purchaseOrderNO;
        data["SellerOrderASN"] = this.sellerOrderASN;
        data["SOorASN"] = this.sOorASN;
        data["CNCompanyCode"] = this.cNCompanyCode;
        data["Item"] = this.item;
        data["MaterialNO"] = this.materialNO;
        data["GoodsDesZH"] = this.goodsDesZH;
        data["GoodsDesEN"] = this.goodsDesEN;
        data["DeliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["TotalQuantity"] = this.totalQuantity;
        data["TotalQuantityUnit"] = this.totalQuantityUnit;
        data["GroupQuantity"] = this.groupQuantity;
        data["GroupQuantityUnit"] = this.groupQuantityUnit;
        data["Quantity"] = this.quantity;
        data["QuantityUnit"] = this.quantityUnit;
        data["GroupWeight"] = this.groupWeight;
        data["GroupWeightUnit"] = this.groupWeightUnit;
        data["Weight"] = this.weight;
        data["WeightUnit"] = this.weightUnit;
        data["GroupUnitPrice"] = this.groupUnitPrice;
        data["UnitPrice"] = this.unitPrice;
        data["TotalPrice"] = this.totalPrice;
        data["Currency"] = this.currency;
        data["CurrencyZH"] = this.currencyZH;
        data["ExchangeRate"] = this.exchangeRate;
        data["UploadFlag"] = this.uploadFlag;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntCustomsErpSellerorderlist {
    id?: number | undefined;
    purchaseOrderNO?: string | undefined;
    sellerOrderASN?: string | undefined;
    sOorASN?: string | undefined;
    cNCompanyCode?: string | undefined;
    item?: string | undefined;
    materialNO?: string | undefined;
    goodsDesZH?: string | undefined;
    goodsDesEN?: string | undefined;
    deliveryDate?: Date | undefined;
    totalQuantity?: number | undefined;
    totalQuantityUnit?: string | undefined;
    groupQuantity?: number | undefined;
    groupQuantityUnit?: string | undefined;
    quantity?: number | undefined;
    quantityUnit?: string | undefined;
    groupWeight?: number | undefined;
    groupWeightUnit?: string | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    groupUnitPrice?: number | undefined;
    unitPrice?: number | undefined;
    totalPrice?: number | undefined;
    currency?: string | undefined;
    currencyZH?: string | undefined;
    exchangeRate?: number | undefined;
    uploadFlag?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenStockHead implements IReturnResultOfPageListOfEntGoldenStockHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockHead | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenStockHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenStockHead.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenStockHead {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenStockHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenStockHead {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockHead | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenStockHead implements IPageListOfEntGoldenStockHead {
    dataSource?: EntGoldenStockHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenStockHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenStockHead.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenStockHead {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenStockHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenStockHead {
    dataSource?: EntGoldenStockHead[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenStockHead implements IEntGoldenStockHead {
    initials?: EntGoldenStockInitial[] | undefined;
    importBills?: EntGoldenStockBill[] | undefined;
    exportBills?: EntGoldenStockBill[] | undefined;
    converts?: EntGoldenStockConvert[] | undefined;
    theoryImgs?: EntGoldenStockTheoryImg[] | undefined;
    importCount?: string | undefined;
    exportCount?: string | undefined;
    iD?: number | undefined;
    emsNo?: string | undefined;
    headName?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    remars?: string | undefined;
    uSD1?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenStockHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["Initials"])) {
                this.initials = [] as any;
                for (let item of data["Initials"])
                    this.initials!.push(EntGoldenStockInitial.fromJS(item));
            }
            if (Array.isArray(data["ImportBills"])) {
                this.importBills = [] as any;
                for (let item of data["ImportBills"])
                    this.importBills!.push(EntGoldenStockBill.fromJS(item));
            }
            if (Array.isArray(data["ExportBills"])) {
                this.exportBills = [] as any;
                for (let item of data["ExportBills"])
                    this.exportBills!.push(EntGoldenStockBill.fromJS(item));
            }
            if (Array.isArray(data["Converts"])) {
                this.converts = [] as any;
                for (let item of data["Converts"])
                    this.converts!.push(EntGoldenStockConvert.fromJS(item));
            }
            if (Array.isArray(data["TheoryImgs"])) {
                this.theoryImgs = [] as any;
                for (let item of data["TheoryImgs"])
                    this.theoryImgs!.push(EntGoldenStockTheoryImg.fromJS(item));
            }
            this.importCount = data["ImportCount"];
            this.exportCount = data["ExportCount"];
            this.iD = data["ID"];
            this.emsNo = data["EmsNo"];
            this.headName = data["HeadName"];
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.remars = data["Remars"];
            this.uSD1 = data["USD1"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenStockHead {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenStockHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.initials)) {
            data["Initials"] = [];
            for (let item of this.initials)
                data["Initials"].push(item.toJSON());
        }
        if (Array.isArray(this.importBills)) {
            data["ImportBills"] = [];
            for (let item of this.importBills)
                data["ImportBills"].push(item.toJSON());
        }
        if (Array.isArray(this.exportBills)) {
            data["ExportBills"] = [];
            for (let item of this.exportBills)
                data["ExportBills"].push(item.toJSON());
        }
        if (Array.isArray(this.converts)) {
            data["Converts"] = [];
            for (let item of this.converts)
                data["Converts"].push(item.toJSON());
        }
        if (Array.isArray(this.theoryImgs)) {
            data["TheoryImgs"] = [];
            for (let item of this.theoryImgs)
                data["TheoryImgs"].push(item.toJSON());
        }
        data["ImportCount"] = this.importCount;
        data["ExportCount"] = this.exportCount;
        data["ID"] = this.iD;
        data["EmsNo"] = this.emsNo;
        data["HeadName"] = this.headName;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["Remars"] = this.remars;
        data["USD1"] = this.uSD1;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenStockHead {
    initials?: EntGoldenStockInitial[] | undefined;
    importBills?: EntGoldenStockBill[] | undefined;
    exportBills?: EntGoldenStockBill[] | undefined;
    converts?: EntGoldenStockConvert[] | undefined;
    theoryImgs?: EntGoldenStockTheoryImg[] | undefined;
    importCount?: string | undefined;
    exportCount?: string | undefined;
    iD?: number | undefined;
    emsNo?: string | undefined;
    headName?: string | undefined;
    beginDate?: Date | undefined;
    endDate?: Date | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    remars?: string | undefined;
    uSD1?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenStockInitial implements IEntGoldenStockInitial {
    emsNo?: string | undefined;
    unitCn?: string | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    headName?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    qTY?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    fileName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    unit?: string | undefined;
    hSCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenStockInitial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emsNo = data["EmsNo"];
            this.unitCn = data["UnitCn"];
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.headName = data["HeadName"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.qTY = data["QTY"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.fileName = data["FileName"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.unit = data["Unit"];
            this.hSCode = data["HSCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenStockInitial {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenStockInitial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmsNo"] = this.emsNo;
        data["UnitCn"] = this.unitCn;
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["HeadName"] = this.headName;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["QTY"] = this.qTY;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["FileName"] = this.fileName;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["Unit"] = this.unit;
        data["HSCode"] = this.hSCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenStockInitial {
    emsNo?: string | undefined;
    unitCn?: string | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    headName?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    qTY?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    fileName?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    unit?: string | undefined;
    hSCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenStockBill implements IEntGoldenStockBill {
    dDateBegin?: Date | undefined;
    dDateEnd?: Date | undefined;
    iD?: number | undefined;
    dDate?: Date | undefined;
    billNo?: string | undefined;
    entryId?: string | undefined;
    isAgent?: string | undefined;
    tradeMode?: string | undefined;
    ieFlag?: string | undefined;
    headId?: number | undefined;
    goodFlag?: string | undefined;
    hekouFlag?: string | undefined;
    hezengFlag?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    billType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenStockBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dDateBegin = data["DDateBegin"] ? new Date(data["DDateBegin"].toString()) : <any>undefined;
            this.dDateEnd = data["DDateEnd"] ? new Date(data["DDateEnd"].toString()) : <any>undefined;
            this.iD = data["ID"];
            this.dDate = data["DDate"] ? new Date(data["DDate"].toString()) : <any>undefined;
            this.billNo = data["BillNo"];
            this.entryId = data["EntryId"];
            this.isAgent = data["IsAgent"];
            this.tradeMode = data["TradeMode"];
            this.ieFlag = data["IeFlag"];
            this.headId = data["HeadId"];
            this.goodFlag = data["GoodFlag"];
            this.hekouFlag = data["HekouFlag"];
            this.hezengFlag = data["HezengFlag"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.billType = data["BillType"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenStockBill {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenStockBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DDateBegin"] = this.dDateBegin ? this.dDateBegin.toISOString() : <any>undefined;
        data["DDateEnd"] = this.dDateEnd ? this.dDateEnd.toISOString() : <any>undefined;
        data["ID"] = this.iD;
        data["DDate"] = this.dDate ? this.dDate.toISOString() : <any>undefined;
        data["BillNo"] = this.billNo;
        data["EntryId"] = this.entryId;
        data["IsAgent"] = this.isAgent;
        data["TradeMode"] = this.tradeMode;
        data["IeFlag"] = this.ieFlag;
        data["HeadId"] = this.headId;
        data["GoodFlag"] = this.goodFlag;
        data["HekouFlag"] = this.hekouFlag;
        data["HezengFlag"] = this.hezengFlag;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["BillType"] = this.billType;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenStockBill {
    dDateBegin?: Date | undefined;
    dDateEnd?: Date | undefined;
    iD?: number | undefined;
    dDate?: Date | undefined;
    billNo?: string | undefined;
    entryId?: string | undefined;
    isAgent?: string | undefined;
    tradeMode?: string | undefined;
    ieFlag?: string | undefined;
    headId?: number | undefined;
    goodFlag?: string | undefined;
    hekouFlag?: string | undefined;
    hezengFlag?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    billType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenStockConvert implements IEntGoldenStockConvert {
    emsNo?: string | undefined;
    exgNo?: string | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    billNo?: string | undefined;
    qTY?: number | undefined;
    tradeMode?: string | undefined;
    decCm?: number | undefined;
    totalCm?: number | undefined;
    beginDate?: string | undefined;
    imgNo?: string | undefined;
    imgGNo?: number | undefined;
    listGNo?: number | undefined;
    duMark?: string | undefined;
    iEFlag?: string | undefined;
    entryId?: string | undefined;
    gNo?: number | undefined;
    dDate?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createUser?: string | undefined;
    intgbLossRate?: number | undefined;
    intgbLossTatal?: number | undefined;
    tgblLossRate?: number | undefined;
    tgblLossTatal?: number | undefined;
    netUseupQty?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenStockConvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emsNo = data["EmsNo"];
            this.exgNo = data["ExgNo"];
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.billNo = data["BillNo"];
            this.qTY = data["QTY"];
            this.tradeMode = data["TradeMode"];
            this.decCm = data["DecCm"];
            this.totalCm = data["TotalCm"];
            this.beginDate = data["BeginDate"];
            this.imgNo = data["ImgNo"];
            this.imgGNo = data["ImgGNo"];
            this.listGNo = data["ListGNo"];
            this.duMark = data["DuMark"];
            this.iEFlag = data["IEFlag"];
            this.entryId = data["EntryId"];
            this.gNo = data["GNo"];
            this.dDate = data["DDate"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.createUser = data["CreateUser"];
            this.intgbLossRate = data["IntgbLossRate"];
            this.intgbLossTatal = data["IntgbLossTatal"];
            this.tgblLossRate = data["TgblLossRate"];
            this.tgblLossTatal = data["TgblLossTatal"];
            this.netUseupQty = data["NetUseupQty"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenStockConvert {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenStockConvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmsNo"] = this.emsNo;
        data["ExgNo"] = this.exgNo;
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["BillNo"] = this.billNo;
        data["QTY"] = this.qTY;
        data["TradeMode"] = this.tradeMode;
        data["DecCm"] = this.decCm;
        data["TotalCm"] = this.totalCm;
        data["BeginDate"] = this.beginDate;
        data["ImgNo"] = this.imgNo;
        data["ImgGNo"] = this.imgGNo;
        data["ListGNo"] = this.listGNo;
        data["DuMark"] = this.duMark;
        data["IEFlag"] = this.iEFlag;
        data["EntryId"] = this.entryId;
        data["GNo"] = this.gNo;
        data["DDate"] = this.dDate;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["CreateUser"] = this.createUser;
        data["IntgbLossRate"] = this.intgbLossRate;
        data["IntgbLossTatal"] = this.intgbLossTatal;
        data["TgblLossRate"] = this.tgblLossRate;
        data["TgblLossTatal"] = this.tgblLossTatal;
        data["NetUseupQty"] = this.netUseupQty;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenStockConvert {
    emsNo?: string | undefined;
    exgNo?: string | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    billNo?: string | undefined;
    qTY?: number | undefined;
    tradeMode?: string | undefined;
    decCm?: number | undefined;
    totalCm?: number | undefined;
    beginDate?: string | undefined;
    imgNo?: string | undefined;
    imgGNo?: number | undefined;
    listGNo?: number | undefined;
    duMark?: string | undefined;
    iEFlag?: string | undefined;
    entryId?: string | undefined;
    gNo?: number | undefined;
    dDate?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createUser?: string | undefined;
    intgbLossRate?: number | undefined;
    intgbLossTatal?: number | undefined;
    tgblLossRate?: number | undefined;
    tgblLossTatal?: number | undefined;
    netUseupQty?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenStockTheoryImg implements IEntGoldenStockTheoryImg {
    iD?: number | undefined;
    headId?: number | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    initQty?: number | undefined;
    iQtyAdd?: number | undefined;
    iQtyMinus?: number | undefined;
    eQtyAdd?: number | undefined;
    eQtyMinus?: number | undefined;
    remainQty?: number | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenStockTheoryImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.emsNo = data["EmsNo"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.initQty = data["InitQty"];
            this.iQtyAdd = data["IQtyAdd"];
            this.iQtyMinus = data["IQtyMinus"];
            this.eQtyAdd = data["EQtyAdd"];
            this.eQtyMinus = data["EQtyMinus"];
            this.remainQty = data["RemainQty"];
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenStockTheoryImg {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenStockTheoryImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["EmsNo"] = this.emsNo;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["InitQty"] = this.initQty;
        data["IQtyAdd"] = this.iQtyAdd;
        data["IQtyMinus"] = this.iQtyMinus;
        data["EQtyAdd"] = this.eQtyAdd;
        data["EQtyMinus"] = this.eQtyMinus;
        data["RemainQty"] = this.remainQty;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenStockTheoryImg {
    iD?: number | undefined;
    headId?: number | undefined;
    emsNo?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    initQty?: number | undefined;
    iQtyAdd?: number | undefined;
    iQtyMinus?: number | undefined;
    eQtyAdd?: number | undefined;
    eQtyMinus?: number | undefined;
    remainQty?: number | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenStockInitial implements IReturnResultOfPageListOfEntGoldenStockInitial {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockInitial | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenStockInitial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenStockInitial.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenStockInitial {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenStockInitial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenStockInitial {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockInitial | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenStockInitial implements IPageListOfEntGoldenStockInitial {
    dataSource?: EntGoldenStockInitial[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenStockInitial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenStockInitial.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenStockInitial {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenStockInitial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenStockInitial {
    dataSource?: EntGoldenStockInitial[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenStockActual implements IEntGoldenStockActual {
    unitCn?: string | undefined;
    emsNo?: string | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    headName?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    qTY?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    unit?: string | undefined;
    hsCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenStockActual) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCn = data["UnitCn"];
            this.emsNo = data["EmsNo"];
            this.iD = data["ID"];
            this.headId = data["HeadId"];
            this.headName = data["HeadName"];
            this.copGNo = data["CopGNo"];
            this.gNo = data["GNo"];
            this.gName = data["GName"];
            this.qTY = data["QTY"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.unit = data["Unit"];
            this.hsCode = data["HsCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenStockActual {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenStockActual();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UnitCn"] = this.unitCn;
        data["EmsNo"] = this.emsNo;
        data["ID"] = this.iD;
        data["HeadId"] = this.headId;
        data["HeadName"] = this.headName;
        data["CopGNo"] = this.copGNo;
        data["GNo"] = this.gNo;
        data["GName"] = this.gName;
        data["QTY"] = this.qTY;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["Unit"] = this.unit;
        data["HsCode"] = this.hsCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenStockActual {
    unitCn?: string | undefined;
    emsNo?: string | undefined;
    iD?: number | undefined;
    headId?: number | undefined;
    headName?: string | undefined;
    copGNo?: string | undefined;
    gNo?: number | undefined;
    gName?: string | undefined;
    qTY?: number | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    unit?: string | undefined;
    hsCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenStockActual implements IReturnResultOfPageListOfEntGoldenStockActual {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockActual | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenStockActual) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenStockActual.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenStockActual {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenStockActual();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenStockActual {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockActual | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenStockActual implements IPageListOfEntGoldenStockActual {
    dataSource?: EntGoldenStockActual[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenStockActual) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenStockActual.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenStockActual {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenStockActual();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenStockActual {
    dataSource?: EntGoldenStockActual[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfEntGoldenOrgImgHistory implements IReturnResultOfEntGoldenOrgImgHistory {
    success?: boolean | undefined;
    data?: EntGoldenOrgImgHistory | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfEntGoldenOrgImgHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? EntGoldenOrgImgHistory.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfEntGoldenOrgImgHistory {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfEntGoldenOrgImgHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfEntGoldenOrgImgHistory {
    success?: boolean | undefined;
    data?: EntGoldenOrgImgHistory | undefined;
    messge?: string | undefined;
}

export class ReturnResultOfPageListOfEntGoldenStockBill implements IReturnResultOfPageListOfEntGoldenStockBill {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockBill | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenStockBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenStockBill.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenStockBill {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenStockBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenStockBill {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockBill | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenStockBill implements IPageListOfEntGoldenStockBill {
    dataSource?: EntGoldenStockBill[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenStockBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenStockBill.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenStockBill {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenStockBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenStockBill {
    dataSource?: EntGoldenStockBill[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenStockConvert implements IReturnResultOfPageListOfEntGoldenStockConvert {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockConvert | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenStockConvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenStockConvert.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenStockConvert {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenStockConvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenStockConvert {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockConvert | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenStockConvert implements IPageListOfEntGoldenStockConvert {
    dataSource?: EntGoldenStockConvert[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenStockConvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenStockConvert.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenStockConvert {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenStockConvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenStockConvert {
    dataSource?: EntGoldenStockConvert[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntGoldenStockTheoryImg implements IReturnResultOfPageListOfEntGoldenStockTheoryImg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockTheoryImg | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntGoldenStockTheoryImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntGoldenStockTheoryImg.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntGoldenStockTheoryImg {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntGoldenStockTheoryImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntGoldenStockTheoryImg {
    success?: boolean | undefined;
    data?: PageListOfEntGoldenStockTheoryImg | undefined;
    messge?: string | undefined;
}

export class PageListOfEntGoldenStockTheoryImg implements IPageListOfEntGoldenStockTheoryImg {
    dataSource?: EntGoldenStockTheoryImg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntGoldenStockTheoryImg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntGoldenStockTheoryImg.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntGoldenStockTheoryImg {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntGoldenStockTheoryImg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntGoldenStockTheoryImg {
    dataSource?: EntGoldenStockTheoryImg[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysSubsystem implements IEntSysSubsystem {
    id?: number | undefined;
    organizationCode?: string | undefined;
    subSystemId?: string | undefined;
    subSystemCn?: string | undefined;
    warehouseId?: string | undefined;
    warehouseName?: string | undefined;
    descr?: string | undefined;
    notes?: string | undefined;
    subSystemEn?: string | undefined;
    status?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    dbServer?: string | undefined;
    dbUserName?: string | undefined;
    dbPwd?: string | undefined;
    dbNameCode?: string | undefined;
    dbNameCn?: string | undefined;
    showSeq?: number | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    updateBy?: string | undefined;
    updateTime?: Date | undefined;
    efStartDate?: string | undefined;
    efDateCount?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysSubsystem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.organizationCode = data["OrganizationCode"];
            this.subSystemId = data["SubSystemId"];
            this.subSystemCn = data["SubSystemCn"];
            this.warehouseId = data["WarehouseId"];
            this.warehouseName = data["WarehouseName"];
            this.descr = data["Descr"];
            this.notes = data["Notes"];
            this.subSystemEn = data["SubSystemEn"];
            this.status = data["Status"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.dbServer = data["DbServer"];
            this.dbUserName = data["DbUserName"];
            this.dbPwd = data["DbPwd"];
            this.dbNameCode = data["DbNameCode"];
            this.dbNameCn = data["DbNameCn"];
            this.showSeq = data["ShowSeq"];
            this.createBy = data["CreateBy"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateBy = data["UpdateBy"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.efStartDate = data["EfStartDate"];
            this.efDateCount = data["EfDateCount"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysSubsystem {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysSubsystem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["OrganizationCode"] = this.organizationCode;
        data["SubSystemId"] = this.subSystemId;
        data["SubSystemCn"] = this.subSystemCn;
        data["WarehouseId"] = this.warehouseId;
        data["WarehouseName"] = this.warehouseName;
        data["Descr"] = this.descr;
        data["Notes"] = this.notes;
        data["SubSystemEn"] = this.subSystemEn;
        data["Status"] = this.status;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["DbServer"] = this.dbServer;
        data["DbUserName"] = this.dbUserName;
        data["DbPwd"] = this.dbPwd;
        data["DbNameCode"] = this.dbNameCode;
        data["DbNameCn"] = this.dbNameCn;
        data["ShowSeq"] = this.showSeq;
        data["CreateBy"] = this.createBy;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateBy"] = this.updateBy;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["EfStartDate"] = this.efStartDate;
        data["EfDateCount"] = this.efDateCount;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysSubsystem {
    id?: number | undefined;
    organizationCode?: string | undefined;
    subSystemId?: string | undefined;
    subSystemCn?: string | undefined;
    warehouseId?: string | undefined;
    warehouseName?: string | undefined;
    descr?: string | undefined;
    notes?: string | undefined;
    subSystemEn?: string | undefined;
    status?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    dbServer?: string | undefined;
    dbUserName?: string | undefined;
    dbPwd?: string | undefined;
    dbNameCode?: string | undefined;
    dbNameCn?: string | undefined;
    showSeq?: number | undefined;
    createBy?: string | undefined;
    createTime?: Date | undefined;
    updateBy?: string | undefined;
    updateTime?: Date | undefined;
    efStartDate?: string | undefined;
    efDateCount?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgSysSupplier implements IEntTgSysSupplier {
    id?: number | undefined;
    supplierCode?: string | undefined;
    shortName?: string | undefined;
    chName?: string | undefined;
    enName?: string | undefined;
    creditCode?: string | undefined;
    linkUser?: string | undefined;
    tELLPHONE?: string | undefined;
    fAX?: string | undefined;
    eMAIL?: string | undefined;
    aDDRESS?: string | undefined;
    typeFlag?: string | undefined;
    companyCode?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    statusFlag?: string | undefined;
    ciqCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgSysSupplier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.supplierCode = data["SupplierCode"];
            this.shortName = data["ShortName"];
            this.chName = data["ChName"];
            this.enName = data["EnName"];
            this.creditCode = data["CreditCode"];
            this.linkUser = data["LinkUser"];
            this.tELLPHONE = data["TELLPHONE"];
            this.fAX = data["FAX"];
            this.eMAIL = data["EMAIL"];
            this.aDDRESS = data["ADDRESS"];
            this.typeFlag = data["TypeFlag"];
            this.companyCode = data["CompanyCode"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.statusFlag = data["StatusFlag"];
            this.ciqCode = data["CiqCode"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgSysSupplier {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgSysSupplier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["SupplierCode"] = this.supplierCode;
        data["ShortName"] = this.shortName;
        data["ChName"] = this.chName;
        data["EnName"] = this.enName;
        data["CreditCode"] = this.creditCode;
        data["LinkUser"] = this.linkUser;
        data["TELLPHONE"] = this.tELLPHONE;
        data["FAX"] = this.fAX;
        data["EMAIL"] = this.eMAIL;
        data["ADDRESS"] = this.aDDRESS;
        data["TypeFlag"] = this.typeFlag;
        data["CompanyCode"] = this.companyCode;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["StatusFlag"] = this.statusFlag;
        data["CiqCode"] = this.ciqCode;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgSysSupplier {
    id?: number | undefined;
    supplierCode?: string | undefined;
    shortName?: string | undefined;
    chName?: string | undefined;
    enName?: string | undefined;
    creditCode?: string | undefined;
    linkUser?: string | undefined;
    tELLPHONE?: string | undefined;
    fAX?: string | undefined;
    eMAIL?: string | undefined;
    aDDRESS?: string | undefined;
    typeFlag?: string | undefined;
    companyCode?: string | undefined;
    createDate?: Date | undefined;
    createUser?: string | undefined;
    statusFlag?: string | undefined;
    ciqCode?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgSysComplex implements IEntTgSysComplex {
    codeT?: string | undefined;
    codeS?: string | undefined;
    gName?: string | undefined;
    lowRate?: string | undefined;
    highRate?: string | undefined;
    outRate?: string | undefined;
    regMark?: string | undefined;
    regRate?: string | undefined;
    taxType?: string | undefined;
    taxRate?: string | undefined;
    commRate?: string | undefined;
    taiwanRat?: string | undefined;
    otherType?: string | undefined;
    otherRate?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    ilowPrice?: string | undefined;
    ihighPric?: string | undefined;
    elowPrice?: string | undefined;
    ehighPric?: string | undefined;
    maxIn?: string | undefined;
    maxOut?: string | undefined;
    controlMa?: string | undefined;
    chkPrice?: string | undefined;
    tariff?: string | undefined;
    tarifMark?: string | undefined;
    noteS?: string | undefined;
    tariffNecessary?: string | undefined;
    hsCode?: string | undefined;
    syncVersion?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgSysComplex) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.codeT = data["CodeT"];
            this.codeS = data["CodeS"];
            this.gName = data["GName"];
            this.lowRate = data["LowRate"];
            this.highRate = data["HighRate"];
            this.outRate = data["OutRate"];
            this.regMark = data["RegMark"];
            this.regRate = data["RegRate"];
            this.taxType = data["TaxType"];
            this.taxRate = data["TaxRate"];
            this.commRate = data["CommRate"];
            this.taiwanRat = data["TaiwanRat"];
            this.otherType = data["OtherType"];
            this.otherRate = data["OtherRate"];
            this.unit1 = data["Unit1"];
            this.unit2 = data["Unit2"];
            this.ilowPrice = data["IlowPrice"];
            this.ihighPric = data["IhighPric"];
            this.elowPrice = data["ElowPrice"];
            this.ehighPric = data["EhighPric"];
            this.maxIn = data["MaxIn"];
            this.maxOut = data["MaxOut"];
            this.controlMa = data["ControlMa"];
            this.chkPrice = data["ChkPrice"];
            this.tariff = data["Tariff"];
            this.tarifMark = data["TarifMark"];
            this.noteS = data["NoteS"];
            this.tariffNecessary = data["TariffNecessary"];
            this.hsCode = data["HsCode"];
            this.syncVersion = data["SyncVersion"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgSysComplex {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgSysComplex();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CodeT"] = this.codeT;
        data["CodeS"] = this.codeS;
        data["GName"] = this.gName;
        data["LowRate"] = this.lowRate;
        data["HighRate"] = this.highRate;
        data["OutRate"] = this.outRate;
        data["RegMark"] = this.regMark;
        data["RegRate"] = this.regRate;
        data["TaxType"] = this.taxType;
        data["TaxRate"] = this.taxRate;
        data["CommRate"] = this.commRate;
        data["TaiwanRat"] = this.taiwanRat;
        data["OtherType"] = this.otherType;
        data["OtherRate"] = this.otherRate;
        data["Unit1"] = this.unit1;
        data["Unit2"] = this.unit2;
        data["IlowPrice"] = this.ilowPrice;
        data["IhighPric"] = this.ihighPric;
        data["ElowPrice"] = this.elowPrice;
        data["EhighPric"] = this.ehighPric;
        data["MaxIn"] = this.maxIn;
        data["MaxOut"] = this.maxOut;
        data["ControlMa"] = this.controlMa;
        data["ChkPrice"] = this.chkPrice;
        data["Tariff"] = this.tariff;
        data["TarifMark"] = this.tarifMark;
        data["NoteS"] = this.noteS;
        data["TariffNecessary"] = this.tariffNecessary;
        data["HsCode"] = this.hsCode;
        data["SyncVersion"] = this.syncVersion;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgSysComplex {
    codeT?: string | undefined;
    codeS?: string | undefined;
    gName?: string | undefined;
    lowRate?: string | undefined;
    highRate?: string | undefined;
    outRate?: string | undefined;
    regMark?: string | undefined;
    regRate?: string | undefined;
    taxType?: string | undefined;
    taxRate?: string | undefined;
    commRate?: string | undefined;
    taiwanRat?: string | undefined;
    otherType?: string | undefined;
    otherRate?: string | undefined;
    unit1?: string | undefined;
    unit2?: string | undefined;
    ilowPrice?: string | undefined;
    ihighPric?: string | undefined;
    elowPrice?: string | undefined;
    ehighPric?: string | undefined;
    maxIn?: string | undefined;
    maxOut?: string | undefined;
    controlMa?: string | undefined;
    chkPrice?: string | undefined;
    tariff?: string | undefined;
    tarifMark?: string | undefined;
    noteS?: string | undefined;
    tariffNecessary?: string | undefined;
    hsCode?: string | undefined;
    syncVersion?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgSysCiq implements IEntTgSysCiq {
    hsCode?: string | undefined;
    hsCname?: string | undefined;
    expandNo?: string | undefined;
    goodsName?: string | undefined;
    classifyCode?: string | undefined;
    classifyCname?: string | undefined;
    exportGoodsClass?: string | undefined;
    importGoodsClass?: string | undefined;
    flag?: string | undefined;
    lastupdate?: string | undefined;
    version?: string | undefined;
    fmkArchiveFlag?: string | undefined;
    ciqCode?: string | undefined;
    seniorClassifyCode?: string | undefined;
    postGoodsFlag?: string | undefined;
    otherFlag?: string | undefined;
    id?: number | undefined;
    syncVersion?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgSysCiq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hsCode = data["HsCode"];
            this.hsCname = data["HsCname"];
            this.expandNo = data["ExpandNo"];
            this.goodsName = data["GoodsName"];
            this.classifyCode = data["ClassifyCode"];
            this.classifyCname = data["ClassifyCname"];
            this.exportGoodsClass = data["ExportGoodsClass"];
            this.importGoodsClass = data["ImportGoodsClass"];
            this.flag = data["Flag"];
            this.lastupdate = data["Lastupdate"];
            this.version = data["Version"];
            this.fmkArchiveFlag = data["FmkArchiveFlag"];
            this.ciqCode = data["CiqCode"];
            this.seniorClassifyCode = data["SeniorClassifyCode"];
            this.postGoodsFlag = data["PostGoodsFlag"];
            this.otherFlag = data["OtherFlag"];
            this.id = data["Id"];
            this.syncVersion = data["SyncVersion"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgSysCiq {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgSysCiq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HsCode"] = this.hsCode;
        data["HsCname"] = this.hsCname;
        data["ExpandNo"] = this.expandNo;
        data["GoodsName"] = this.goodsName;
        data["ClassifyCode"] = this.classifyCode;
        data["ClassifyCname"] = this.classifyCname;
        data["ExportGoodsClass"] = this.exportGoodsClass;
        data["ImportGoodsClass"] = this.importGoodsClass;
        data["Flag"] = this.flag;
        data["Lastupdate"] = this.lastupdate;
        data["Version"] = this.version;
        data["FmkArchiveFlag"] = this.fmkArchiveFlag;
        data["CiqCode"] = this.ciqCode;
        data["SeniorClassifyCode"] = this.seniorClassifyCode;
        data["PostGoodsFlag"] = this.postGoodsFlag;
        data["OtherFlag"] = this.otherFlag;
        data["Id"] = this.id;
        data["SyncVersion"] = this.syncVersion;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgSysCiq {
    hsCode?: string | undefined;
    hsCname?: string | undefined;
    expandNo?: string | undefined;
    goodsName?: string | undefined;
    classifyCode?: string | undefined;
    classifyCname?: string | undefined;
    exportGoodsClass?: string | undefined;
    importGoodsClass?: string | undefined;
    flag?: string | undefined;
    lastupdate?: string | undefined;
    version?: string | undefined;
    fmkArchiveFlag?: string | undefined;
    ciqCode?: string | undefined;
    seniorClassifyCode?: string | undefined;
    postGoodsFlag?: string | undefined;
    otherFlag?: string | undefined;
    id?: number | undefined;
    syncVersion?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgSysCustoms implements IEntTgSysCustoms {
    customsCo?: string | undefined;
    customsNa?: string | undefined;
    syncVersion?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgSysCustoms) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customsCo = data["CustomsCo"];
            this.customsNa = data["CustomsNa"];
            this.syncVersion = data["SyncVersion"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgSysCustoms {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgSysCustoms();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CustomsCo"] = this.customsCo;
        data["CustomsNa"] = this.customsNa;
        data["SyncVersion"] = this.syncVersion;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgSysCustoms {
    customsCo?: string | undefined;
    customsNa?: string | undefined;
    syncVersion?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysAppSetup implements IEntSysAppSetup {
    iD?: number | undefined;
    keyName?: string | undefined;
    keyValue?: string | undefined;
    remark?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysAppSetup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.keyName = data["KeyName"];
            this.keyValue = data["KeyValue"];
            this.remark = data["Remark"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createBy = data["CreateBy"];
            this.editTime = data["EditTime"] ? new Date(data["EditTime"].toString()) : <any>undefined;
            this.editBy = data["EditBy"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysAppSetup {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysAppSetup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["KeyName"] = this.keyName;
        data["KeyValue"] = this.keyValue;
        data["Remark"] = this.remark;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateBy"] = this.createBy;
        data["EditTime"] = this.editTime ? this.editTime.toISOString() : <any>undefined;
        data["EditBy"] = this.editBy;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysAppSetup {
    iD?: number | undefined;
    keyName?: string | undefined;
    keyValue?: string | undefined;
    remark?: string | undefined;
    createTime?: Date | undefined;
    createBy?: string | undefined;
    editTime?: Date | undefined;
    editBy?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysAppVersion implements IEntSysAppVersion {
    id?: number | undefined;
    installFileAddress?: string | undefined;
    updFileAddress?: string | undefined;
    clientVersion?: string | undefined;
    isUpdate?: boolean | undefined;
    forceUpdate?: boolean | undefined;
    updateContent?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysAppVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.installFileAddress = data["InstallFileAddress"];
            this.updFileAddress = data["UpdFileAddress"];
            this.clientVersion = data["ClientVersion"];
            this.isUpdate = data["IsUpdate"];
            this.forceUpdate = data["ForceUpdate"];
            this.updateContent = data["UpdateContent"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysAppVersion {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysAppVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["InstallFileAddress"] = this.installFileAddress;
        data["UpdFileAddress"] = this.updFileAddress;
        data["ClientVersion"] = this.clientVersion;
        data["IsUpdate"] = this.isUpdate;
        data["ForceUpdate"] = this.forceUpdate;
        data["UpdateContent"] = this.updateContent;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysAppVersion {
    id?: number | undefined;
    installFileAddress?: string | undefined;
    updFileAddress?: string | undefined;
    clientVersion?: string | undefined;
    isUpdate?: boolean | undefined;
    forceUpdate?: boolean | undefined;
    updateContent?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntLicenseInfo implements IEntLicenseInfo {
    apiUri?: string | undefined;
    mechineCode?: string | undefined;
    licenseCode?: string | undefined;
    msg?: string | undefined;
    machineKey?: string | undefined;

    constructor(data?: IEntLicenseInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.apiUri = data["ApiUri"];
            this.mechineCode = data["MechineCode"];
            this.licenseCode = data["LicenseCode"];
            this.msg = data["Msg"];
            this.machineKey = data["MachineKey"];
        }
    }

    static fromJS(data: any): EntLicenseInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EntLicenseInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ApiUri"] = this.apiUri;
        data["MechineCode"] = this.mechineCode;
        data["LicenseCode"] = this.licenseCode;
        data["Msg"] = this.msg;
        data["MachineKey"] = this.machineKey;
        return data; 
    }
}

export interface IEntLicenseInfo {
    apiUri?: string | undefined;
    mechineCode?: string | undefined;
    licenseCode?: string | undefined;
    msg?: string | undefined;
    machineKey?: string | undefined;
}

export class EntSysImport implements IEntSysImport {
    <ImpCode>k__BackingField?: string | undefined;
    <ImpRuleId>k__BackingField?: number | undefined;
    <ImpType>k__BackingField?: string | undefined;
    <DefaultValue>k__BackingField?: string | undefined;
    <ImpSeq>k__BackingField?: number | undefined;
    <Split>k__BackingField?: string | undefined;
    <CustomerCode>k__BackingField?: string | undefined;
    <DocType>k__BackingField?: string | undefined;
    <Descr>k__BackingField?: string | undefined;
    <CreateTime>k__BackingField?: Date | undefined;
    <CreateBy>k__BackingField?: string | undefined;
    <EditTime>k__BackingField?: Date | undefined;
    <EditBy>k__BackingField?: string | undefined;
    <ReadStartLine>k__BackingField?: number | undefined;
    <isEmpty>k__BackingField?: string | undefined;
    propertyChanged?: any | undefined;
    <PageSize>k__BackingField?: number | undefined;
    <PageIndex>k__BackingField?: number | undefined;
    <TotalCount>k__BackingField?: number | undefined;

    constructor(data?: IEntSysImport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.<ImpCode>k__BackingField = data["<ImpCode>k__BackingField"];
            this.<ImpRuleId>k__BackingField = data["<ImpRuleId>k__BackingField"];
            this.<ImpType>k__BackingField = data["<ImpType>k__BackingField"];
            this.<DefaultValue>k__BackingField = data["<DefaultValue>k__BackingField"];
            this.<ImpSeq>k__BackingField = data["<ImpSeq>k__BackingField"];
            this.<Split>k__BackingField = data["<Split>k__BackingField"];
            this.<CustomerCode>k__BackingField = data["<CustomerCode>k__BackingField"];
            this.<DocType>k__BackingField = data["<DocType>k__BackingField"];
            this.<Descr>k__BackingField = data["<Descr>k__BackingField"];
            this.<CreateTime>k__BackingField = data["<CreateTime>k__BackingField"] ? new Date(data["<CreateTime>k__BackingField"].toString()) : <any>undefined;
            this.<CreateBy>k__BackingField = data["<CreateBy>k__BackingField"];
            this.<EditTime>k__BackingField = data["<EditTime>k__BackingField"] ? new Date(data["<EditTime>k__BackingField"].toString()) : <any>undefined;
            this.<EditBy>k__BackingField = data["<EditBy>k__BackingField"];
            this.<ReadStartLine>k__BackingField = data["<ReadStartLine>k__BackingField"];
            this.<isEmpty>k__BackingField = data["<isEmpty>k__BackingField"];
            this.propertyChanged = data["PropertyChanged"];
            this.<PageSize>k__BackingField = data["<PageSize>k__BackingField"];
            this.<PageIndex>k__BackingField = data["<PageIndex>k__BackingField"];
            this.<TotalCount>k__BackingField = data["<TotalCount>k__BackingField"];
        }
    }

    static fromJS(data: any): EntSysImport {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysImport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["<ImpCode>k__BackingField"] = this.<ImpCode>k__BackingField;
        data["<ImpRuleId>k__BackingField"] = this.<ImpRuleId>k__BackingField;
        data["<ImpType>k__BackingField"] = this.<ImpType>k__BackingField;
        data["<DefaultValue>k__BackingField"] = this.<DefaultValue>k__BackingField;
        data["<ImpSeq>k__BackingField"] = this.<ImpSeq>k__BackingField;
        data["<Split>k__BackingField"] = this.<Split>k__BackingField;
        data["<CustomerCode>k__BackingField"] = this.<CustomerCode>k__BackingField;
        data["<DocType>k__BackingField"] = this.<DocType>k__BackingField;
        data["<Descr>k__BackingField"] = this.<Descr>k__BackingField;
        data["<CreateTime>k__BackingField"] = this.<CreateTime>k__BackingField ? this.<CreateTime>k__BackingField.toISOString() : <any>undefined;
        data["<CreateBy>k__BackingField"] = this.<CreateBy>k__BackingField;
        data["<EditTime>k__BackingField"] = this.<EditTime>k__BackingField ? this.<EditTime>k__BackingField.toISOString() : <any>undefined;
        data["<EditBy>k__BackingField"] = this.<EditBy>k__BackingField;
        data["<ReadStartLine>k__BackingField"] = this.<ReadStartLine>k__BackingField;
        data["<isEmpty>k__BackingField"] = this.<isEmpty>k__BackingField;
        data["PropertyChanged"] = this.propertyChanged;
        data["<PageSize>k__BackingField"] = this.<PageSize>k__BackingField;
        data["<PageIndex>k__BackingField"] = this.<PageIndex>k__BackingField;
        data["<TotalCount>k__BackingField"] = this.<TotalCount>k__BackingField;
        return data; 
    }
}

export interface IEntSysImport {
    <ImpCode>k__BackingField?: string | undefined;
    <ImpRuleId>k__BackingField?: number | undefined;
    <ImpType>k__BackingField?: string | undefined;
    <DefaultValue>k__BackingField?: string | undefined;
    <ImpSeq>k__BackingField?: number | undefined;
    <Split>k__BackingField?: string | undefined;
    <CustomerCode>k__BackingField?: string | undefined;
    <DocType>k__BackingField?: string | undefined;
    <Descr>k__BackingField?: string | undefined;
    <CreateTime>k__BackingField?: Date | undefined;
    <CreateBy>k__BackingField?: string | undefined;
    <EditTime>k__BackingField?: Date | undefined;
    <EditBy>k__BackingField?: string | undefined;
    <ReadStartLine>k__BackingField?: number | undefined;
    <isEmpty>k__BackingField?: string | undefined;
    propertyChanged?: any | undefined;
    <PageSize>k__BackingField?: number | undefined;
    <PageIndex>k__BackingField?: number | undefined;
    <TotalCount>k__BackingField?: number | undefined;
}

export class EntSysSequence implements IEntSysSequence {
    seqCode?: string | undefined;
    descr?: string | undefined;
    seqType?: string | undefined;
    nowSeqvalue?: number | undefined;
    maxValue?: number | undefined;
    valueLength?: number | undefined;
    dataFormat?: string | undefined;
    dateMax?: string | undefined;
    status?: string | undefined;
    initValue?: string | undefined;
    resetType?: string | undefined;
    isRunning?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    id?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysSequence) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.seqCode = data["SeqCode"];
            this.descr = data["Descr"];
            this.seqType = data["SeqType"];
            this.nowSeqvalue = data["NowSeqvalue"];
            this.maxValue = data["MaxValue"];
            this.valueLength = data["ValueLength"];
            this.dataFormat = data["DataFormat"];
            this.dateMax = data["DateMax"];
            this.status = data["Status"];
            this.initValue = data["InitValue"];
            this.resetType = data["ResetType"];
            this.isRunning = data["IsRunning"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.id = data["Id"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysSequence {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysSequence();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SeqCode"] = this.seqCode;
        data["Descr"] = this.descr;
        data["SeqType"] = this.seqType;
        data["NowSeqvalue"] = this.nowSeqvalue;
        data["MaxValue"] = this.maxValue;
        data["ValueLength"] = this.valueLength;
        data["DataFormat"] = this.dataFormat;
        data["DateMax"] = this.dateMax;
        data["Status"] = this.status;
        data["InitValue"] = this.initValue;
        data["ResetType"] = this.resetType;
        data["IsRunning"] = this.isRunning;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["Id"] = this.id;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysSequence {
    seqCode?: string | undefined;
    descr?: string | undefined;
    seqType?: string | undefined;
    nowSeqvalue?: number | undefined;
    maxValue?: number | undefined;
    valueLength?: number | undefined;
    dataFormat?: string | undefined;
    dateMax?: string | undefined;
    status?: string | undefined;
    initValue?: string | undefined;
    resetType?: string | undefined;
    isRunning?: string | undefined;
    createTime?: Date | undefined;
    createUser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    id?: number | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessTaxreimbursement implements IEntTgBusinessTaxreimbursement {
    passTimeStart?: Date | undefined;
    passTimeEnd?: Date | undefined;
    currCn?: string | undefined;
    entryTypeCn?: string | undefined;
    rpTypeCn?: string | undefined;
    id?: number | undefined;
    entryId?: string | undefined;
    rpType?: string | undefined;
    invoice?: string | undefined;
    contract?: string | undefined;
    curr?: string | undefined;
    money?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    passTime?: Date | undefined;
    entryType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessTaxreimbursement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.passTimeStart = data["PassTimeStart"] ? new Date(data["PassTimeStart"].toString()) : <any>undefined;
            this.passTimeEnd = data["PassTimeEnd"] ? new Date(data["PassTimeEnd"].toString()) : <any>undefined;
            this.currCn = data["CurrCn"];
            this.entryTypeCn = data["EntryTypeCn"];
            this.rpTypeCn = data["RpTypeCn"];
            this.id = data["Id"];
            this.entryId = data["EntryId"];
            this.rpType = data["RpType"];
            this.invoice = data["Invoice"];
            this.contract = data["Contract"];
            this.curr = data["Curr"];
            this.money = data["Money"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.passTime = data["PassTime"] ? new Date(data["PassTime"].toString()) : <any>undefined;
            this.entryType = data["EntryType"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessTaxreimbursement {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessTaxreimbursement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PassTimeStart"] = this.passTimeStart ? this.passTimeStart.toISOString() : <any>undefined;
        data["PassTimeEnd"] = this.passTimeEnd ? this.passTimeEnd.toISOString() : <any>undefined;
        data["CurrCn"] = this.currCn;
        data["EntryTypeCn"] = this.entryTypeCn;
        data["RpTypeCn"] = this.rpTypeCn;
        data["Id"] = this.id;
        data["EntryId"] = this.entryId;
        data["RpType"] = this.rpType;
        data["Invoice"] = this.invoice;
        data["Contract"] = this.contract;
        data["Curr"] = this.curr;
        data["Money"] = this.money;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["PassTime"] = this.passTime ? this.passTime.toISOString() : <any>undefined;
        data["EntryType"] = this.entryType;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessTaxreimbursement {
    passTimeStart?: Date | undefined;
    passTimeEnd?: Date | undefined;
    currCn?: string | undefined;
    entryTypeCn?: string | undefined;
    rpTypeCn?: string | undefined;
    id?: number | undefined;
    entryId?: string | undefined;
    rpType?: string | undefined;
    invoice?: string | undefined;
    contract?: string | undefined;
    curr?: string | undefined;
    money?: number | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    passTime?: Date | undefined;
    entryType?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntTgBusinessTaxreimbursement implements IReturnResultOfPageListOfEntTgBusinessTaxreimbursement {
    success?: boolean | undefined;
    data?: PageListOfEntTgBusinessTaxreimbursement | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntTgBusinessTaxreimbursement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntTgBusinessTaxreimbursement.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntTgBusinessTaxreimbursement {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntTgBusinessTaxreimbursement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntTgBusinessTaxreimbursement {
    success?: boolean | undefined;
    data?: PageListOfEntTgBusinessTaxreimbursement | undefined;
    messge?: string | undefined;
}

export class PageListOfEntTgBusinessTaxreimbursement implements IPageListOfEntTgBusinessTaxreimbursement {
    dataSource?: EntTgBusinessTaxreimbursement[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntTgBusinessTaxreimbursement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntTgBusinessTaxreimbursement.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntTgBusinessTaxreimbursement {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntTgBusinessTaxreimbursement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntTgBusinessTaxreimbursement {
    dataSource?: EntTgBusinessTaxreimbursement[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntTgBusinessTaxreimbursementFile implements IEntTgBusinessTaxreimbursementFile {
    id?: number | undefined;
    entryId?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntTgBusinessTaxreimbursementFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.entryId = data["EntryId"];
            this.fileName = data["FileName"];
            this.filePath = data["FilePath"];
            this.remark = data["Remark"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntTgBusinessTaxreimbursementFile {
        data = typeof data === 'object' ? data : {};
        let result = new EntTgBusinessTaxreimbursementFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["EntryId"] = this.entryId;
        data["FileName"] = this.fileName;
        data["FilePath"] = this.filePath;
        data["Remark"] = this.remark;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntTgBusinessTaxreimbursementFile {
    id?: number | undefined;
    entryId?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    remark?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile implements IReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile {
    success?: boolean | undefined;
    data?: PageListOfEntTgBusinessTaxreimbursementFile | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? PageListOfEntTgBusinessTaxreimbursementFile.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfPageListOfEntTgBusinessTaxreimbursementFile {
    success?: boolean | undefined;
    data?: PageListOfEntTgBusinessTaxreimbursementFile | undefined;
    messge?: string | undefined;
}

export class PageListOfEntTgBusinessTaxreimbursementFile implements IPageListOfEntTgBusinessTaxreimbursementFile {
    dataSource?: EntTgBusinessTaxreimbursementFile[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPageListOfEntTgBusinessTaxreimbursementFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["DataSource"])) {
                this.dataSource = [] as any;
                for (let item of data["DataSource"])
                    this.dataSource!.push(EntTgBusinessTaxreimbursementFile.fromJS(item));
            }
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): PageListOfEntTgBusinessTaxreimbursementFile {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfEntTgBusinessTaxreimbursementFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataSource)) {
            data["DataSource"] = [];
            for (let item of this.dataSource)
                data["DataSource"].push(item.toJSON());
        }
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPageListOfEntTgBusinessTaxreimbursementFile {
    dataSource?: EntTgBusinessTaxreimbursementFile[] | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntSysPageText implements IEntSysPageText {
    id?: number | undefined;
    customerCode?: string | undefined;
    customerNameCn?: string | undefined;
    menuCode?: string | undefined;
    menuCodeCn?: string | undefined;
    controlName?: string | undefined;
    controlText?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntSysPageText) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.customerCode = data["CustomerCode"];
            this.customerNameCn = data["CustomerNameCn"];
            this.menuCode = data["MenuCode"];
            this.menuCodeCn = data["MenuCodeCn"];
            this.controlName = data["ControlName"];
            this.controlText = data["ControlText"];
            this.createUser = data["CreateUser"];
            this.createTime = data["CreateTime"] ? new Date(data["CreateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntSysPageText {
        data = typeof data === 'object' ? data : {};
        let result = new EntSysPageText();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["CustomerCode"] = this.customerCode;
        data["CustomerNameCn"] = this.customerNameCn;
        data["MenuCode"] = this.menuCode;
        data["MenuCodeCn"] = this.menuCodeCn;
        data["ControlName"] = this.controlName;
        data["ControlText"] = this.controlText;
        data["CreateUser"] = this.createUser;
        data["CreateTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntSysPageText {
    id?: number | undefined;
    customerCode?: string | undefined;
    customerNameCn?: string | undefined;
    menuCode?: string | undefined;
    menuCodeCn?: string | undefined;
    controlName?: string | undefined;
    controlText?: string | undefined;
    createUser?: string | undefined;
    createTime?: Date | undefined;
    updateUser?: string | undefined;
    updateTime?: Date | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntGoldenBusTurnConfig implements IEntGoldenBusTurnConfig {
    id?: number | undefined;
    operatingLink?: string | undefined;
    state?: number | undefined;
    remark?: string | undefined;
    displayIndex?: number | undefined;
    code?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntGoldenBusTurnConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.operatingLink = data["OperatingLink"];
            this.state = data["State"];
            this.remark = data["Remark"];
            this.displayIndex = data["DisplayIndex"];
            this.code = data["Code"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createuser = data["Createuser"];
            this.updateTime = data["UpdateTime"] ? new Date(data["UpdateTime"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntGoldenBusTurnConfig {
        data = typeof data === 'object' ? data : {};
        let result = new EntGoldenBusTurnConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["OperatingLink"] = this.operatingLink;
        data["State"] = this.state;
        data["Remark"] = this.remark;
        data["DisplayIndex"] = this.displayIndex;
        data["Code"] = this.code;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["Createuser"] = this.createuser;
        data["UpdateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntGoldenBusTurnConfig {
    id?: number | undefined;
    operatingLink?: string | undefined;
    state?: number | undefined;
    remark?: string | undefined;
    displayIndex?: number | undefined;
    code?: string | undefined;
    createDate?: Date | undefined;
    createuser?: string | undefined;
    updateTime?: Date | undefined;
    updateUser?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class ReturnResultOfSevCurrentUser implements IReturnResultOfSevCurrentUser {
    success?: boolean | undefined;
    data?: SevCurrentUser | undefined;
    messge?: string | undefined;

    constructor(data?: IReturnResultOfSevCurrentUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["Success"];
            this.data = data["Data"] ? SevCurrentUser.fromJS(data["Data"]) : <any>undefined;
            this.messge = data["Messge"];
        }
    }

    static fromJS(data: any): ReturnResultOfSevCurrentUser {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnResultOfSevCurrentUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Success"] = this.success;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["Messge"] = this.messge;
        return data; 
    }
}

export interface IReturnResultOfSevCurrentUser {
    success?: boolean | undefined;
    data?: SevCurrentUser | undefined;
    messge?: string | undefined;
}

export class SevCurrentUser implements ISevCurrentUser {
    subId?: string | undefined;
    userId?: number | undefined;
    userName?: string | undefined;
    loginName?: string | undefined;
    password?: string | undefined;
    userRight?: string | undefined;
    companyCode?: string | undefined;
    deptId?: string | undefined;
    userType?: string | undefined;
    roleId?: string | undefined;
    sequenceNo?: string | undefined;
    applicationName?: string | undefined;
    token?: string | undefined;
    organizationCode?: string | undefined;
    organizationName?: string | undefined;
    webSFOrderServiceUrl?: string | undefined;
    webSFOrderServiceClassName?: string | undefined;
    webSFOrderServiceMethodName?: string | undefined;
    webSFOrderSFCheckName?: string | undefined;
    webSFOrderSFCheckToken?: string | undefined;
    custId?: string | undefined;
    fPName?: string | undefined;
    fPPwd?: string | undefined;
    picFileSize?: string | undefined;
    picFileNum?: string | undefined;
    picPath?: string | undefined;
    clientSettingsProviderServiceUri?: string | undefined;
    applicationSetupFileUrl?: string | undefined;
    wareHouse?: string | undefined;
    endTime?: string | undefined;
    dicPnlList?: any | undefined;
    dicOpearList?: any | undefined;
    menuDt?: any | undefined;
    whDt?: any | undefined;
    cityDt?: any | undefined;
    whDic?: { [key: string]: string; } | undefined;
    currMenuCode?: string | undefined;
    numScale?: NumScale | undefined;
    allDataPermission?: string | undefined;

    constructor(data?: ISevCurrentUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subId = data["SubId"];
            this.userId = data["UserId"];
            this.userName = data["UserName"];
            this.loginName = data["LoginName"];
            this.password = data["Password"];
            this.userRight = data["UserRight"];
            this.companyCode = data["CompanyCode"];
            this.deptId = data["DeptId"];
            this.userType = data["UserType"];
            this.roleId = data["RoleId"];
            this.sequenceNo = data["SequenceNo"];
            this.applicationName = data["ApplicationName"];
            this.token = data["Token"];
            this.organizationCode = data["OrganizationCode"];
            this.organizationName = data["OrganizationName"];
            this.webSFOrderServiceUrl = data["WebSFOrderServiceUrl"];
            this.webSFOrderServiceClassName = data["WebSFOrderServiceClassName"];
            this.webSFOrderServiceMethodName = data["WebSFOrderServiceMethodName"];
            this.webSFOrderSFCheckName = data["WebSFOrderSFCheckName"];
            this.webSFOrderSFCheckToken = data["WebSFOrderSFCheckToken"];
            this.custId = data["CustId"];
            this.fPName = data["FPName"];
            this.fPPwd = data["FPPwd"];
            this.picFileSize = data["PicFileSize"];
            this.picFileNum = data["PicFileNum"];
            this.picPath = data["PicPath"];
            this.clientSettingsProviderServiceUri = data["ClientSettingsProviderServiceUri"];
            this.applicationSetupFileUrl = data["ApplicationSetupFileUrl"];
            this.wareHouse = data["WareHouse"];
            this.endTime = data["EndTime"];
            this.dicPnlList = data["dicPnlList"];
            this.dicOpearList = data["dicOpearList"];
            this.menuDt = data["MenuDt"];
            this.whDt = data["WhDt"];
            this.cityDt = data["CityDt"];
            if (data["WhDic"]) {
                this.whDic = {} as any;
                for (let key in data["WhDic"]) {
                    if (data["WhDic"].hasOwnProperty(key))
                        this.whDic![key] = data["WhDic"][key];
                }
            }
            this.currMenuCode = data["currMenuCode"];
            this.numScale = data["NumScale"] ? NumScale.fromJS(data["NumScale"]) : <any>undefined;
            this.allDataPermission = data["AllDataPermission"];
        }
    }

    static fromJS(data: any): SevCurrentUser {
        data = typeof data === 'object' ? data : {};
        let result = new SevCurrentUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SubId"] = this.subId;
        data["UserId"] = this.userId;
        data["UserName"] = this.userName;
        data["LoginName"] = this.loginName;
        data["Password"] = this.password;
        data["UserRight"] = this.userRight;
        data["CompanyCode"] = this.companyCode;
        data["DeptId"] = this.deptId;
        data["UserType"] = this.userType;
        data["RoleId"] = this.roleId;
        data["SequenceNo"] = this.sequenceNo;
        data["ApplicationName"] = this.applicationName;
        data["Token"] = this.token;
        data["OrganizationCode"] = this.organizationCode;
        data["OrganizationName"] = this.organizationName;
        data["WebSFOrderServiceUrl"] = this.webSFOrderServiceUrl;
        data["WebSFOrderServiceClassName"] = this.webSFOrderServiceClassName;
        data["WebSFOrderServiceMethodName"] = this.webSFOrderServiceMethodName;
        data["WebSFOrderSFCheckName"] = this.webSFOrderSFCheckName;
        data["WebSFOrderSFCheckToken"] = this.webSFOrderSFCheckToken;
        data["CustId"] = this.custId;
        data["FPName"] = this.fPName;
        data["FPPwd"] = this.fPPwd;
        data["PicFileSize"] = this.picFileSize;
        data["PicFileNum"] = this.picFileNum;
        data["PicPath"] = this.picPath;
        data["ClientSettingsProviderServiceUri"] = this.clientSettingsProviderServiceUri;
        data["ApplicationSetupFileUrl"] = this.applicationSetupFileUrl;
        data["WareHouse"] = this.wareHouse;
        data["EndTime"] = this.endTime;
        data["dicPnlList"] = this.dicPnlList;
        data["dicOpearList"] = this.dicOpearList;
        data["MenuDt"] = this.menuDt;
        data["WhDt"] = this.whDt;
        data["CityDt"] = this.cityDt;
        if (this.whDic) {
            data["WhDic"] = {};
            for (let key in this.whDic) {
                if (this.whDic.hasOwnProperty(key))
                    data["WhDic"][key] = this.whDic[key];
            }
        }
        data["currMenuCode"] = this.currMenuCode;
        data["NumScale"] = this.numScale ? this.numScale.toJSON() : <any>undefined;
        data["AllDataPermission"] = this.allDataPermission;
        return data; 
    }
}

export interface ISevCurrentUser {
    subId?: string | undefined;
    userId?: number | undefined;
    userName?: string | undefined;
    loginName?: string | undefined;
    password?: string | undefined;
    userRight?: string | undefined;
    companyCode?: string | undefined;
    deptId?: string | undefined;
    userType?: string | undefined;
    roleId?: string | undefined;
    sequenceNo?: string | undefined;
    applicationName?: string | undefined;
    token?: string | undefined;
    organizationCode?: string | undefined;
    organizationName?: string | undefined;
    webSFOrderServiceUrl?: string | undefined;
    webSFOrderServiceClassName?: string | undefined;
    webSFOrderServiceMethodName?: string | undefined;
    webSFOrderSFCheckName?: string | undefined;
    webSFOrderSFCheckToken?: string | undefined;
    custId?: string | undefined;
    fPName?: string | undefined;
    fPPwd?: string | undefined;
    picFileSize?: string | undefined;
    picFileNum?: string | undefined;
    picPath?: string | undefined;
    clientSettingsProviderServiceUri?: string | undefined;
    applicationSetupFileUrl?: string | undefined;
    wareHouse?: string | undefined;
    endTime?: string | undefined;
    dicPnlList?: any | undefined;
    dicOpearList?: any | undefined;
    menuDt?: any | undefined;
    whDt?: any | undefined;
    cityDt?: any | undefined;
    whDic?: { [key: string]: string; } | undefined;
    currMenuCode?: string | undefined;
    numScale?: NumScale | undefined;
    allDataPermission?: string | undefined;
}

export class EntAppTailorWarn implements IEntAppTailorWarn {
    iD?: number | undefined;
    hscode?: string | undefined;
    hgConditon?: string | undefined;
    nxConditon?: string | undefined;
    c3Conditon?: string | undefined;
    oConditon?: string | undefined;
    fwConditon?: string | undefined;
    threePager?: string | undefined;
    eighteenClassify?: string | undefined;
    catalogOut?: string | undefined;
    preLoadedCard?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    metalFamily?: string | undefined;
    specialEquipmentDeclaration?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntAppTailorWarn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.iD = data["ID"];
            this.hscode = data["Hscode"];
            this.hgConditon = data["HgConditon"];
            this.nxConditon = data["NxConditon"];
            this.c3Conditon = data["C3Conditon"];
            this.oConditon = data["OConditon"];
            this.fwConditon = data["FwConditon"];
            this.threePager = data["ThreePager"];
            this.eighteenClassify = data["EighteenClassify"];
            this.catalogOut = data["CatalogOut"];
            this.preLoadedCard = data["PreLoadedCard"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.usd3 = data["Usd3"];
            this.createUser = data["CreateUser"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.metalFamily = data["MetalFamily"];
            this.specialEquipmentDeclaration = data["SpecialEquipmentDeclaration"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntAppTailorWarn {
        data = typeof data === 'object' ? data : {};
        let result = new EntAppTailorWarn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Hscode"] = this.hscode;
        data["HgConditon"] = this.hgConditon;
        data["NxConditon"] = this.nxConditon;
        data["C3Conditon"] = this.c3Conditon;
        data["OConditon"] = this.oConditon;
        data["FwConditon"] = this.fwConditon;
        data["ThreePager"] = this.threePager;
        data["EighteenClassify"] = this.eighteenClassify;
        data["CatalogOut"] = this.catalogOut;
        data["PreLoadedCard"] = this.preLoadedCard;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["Usd3"] = this.usd3;
        data["CreateUser"] = this.createUser;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["MetalFamily"] = this.metalFamily;
        data["SpecialEquipmentDeclaration"] = this.specialEquipmentDeclaration;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntAppTailorWarn {
    iD?: number | undefined;
    hscode?: string | undefined;
    hgConditon?: string | undefined;
    nxConditon?: string | undefined;
    c3Conditon?: string | undefined;
    oConditon?: string | undefined;
    fwConditon?: string | undefined;
    threePager?: string | undefined;
    eighteenClassify?: string | undefined;
    catalogOut?: string | undefined;
    preLoadedCard?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    usd3?: string | undefined;
    createUser?: string | undefined;
    createDate?: Date | undefined;
    updateUser?: string | undefined;
    updateDate?: Date | undefined;
    metalFamily?: string | undefined;
    specialEquipmentDeclaration?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export class EntEpassBomInner implements IEntEpassBomInner {
    guid?: number | undefined;
    companyid?: string | undefined;
    exgNo?: string | undefined;
    productId?: string | undefined;
    exgQty?: number | undefined;
    exgUnit?: string | undefined;
    goddBatch?: string | undefined;
    imgNo?: string | undefined;
    imgQty?: number | undefined;
    imgUnit?: string | undefined;
    imgBatch?: string | undefined;
    plant?: string | undefined;
    tradeTotal?: number | undefined;
    tradeCurr?: string | undefined;
    reportNo?: string | undefined;
    bu?: string | undefined;
    impFlag?: string | undefined;
    impDate?: string | undefined;
    beginDate?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    filename?: string | undefined;
    oriImgQty?: number | undefined;
    oriImgUnit?: string | undefined;
    conUnit?: string | undefined;
    conQty?: number | undefined;
    exgNoNew?: string | undefined;
    imgNoNew?: string | undefined;
    usd3?: string | undefined;
    usd4?: string | undefined;
    usd5?: string | undefined;
    usd6?: string | undefined;
    usd7?: string | undefined;
    usd8?: string | undefined;
    usd9?: string | undefined;
    usd10?: string | undefined;
    intgbLossRate?: number | undefined;
    tgblLossRate?: number | undefined;
    emsNo?: string | undefined;
    bondMtpckPrpr?: number | undefined;
    bondFlag?: string | undefined;
    input_DateBegin?: string | undefined;
    input_DateEnd?: string | undefined;
    generationflag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;

    constructor(data?: IEntEpassBomInner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.companyid = data["Companyid"];
            this.exgNo = data["ExgNo"];
            this.productId = data["ProductId"];
            this.exgQty = data["ExgQty"];
            this.exgUnit = data["ExgUnit"];
            this.goddBatch = data["GoddBatch"];
            this.imgNo = data["ImgNo"];
            this.imgQty = data["ImgQty"];
            this.imgUnit = data["ImgUnit"];
            this.imgBatch = data["ImgBatch"];
            this.plant = data["Plant"];
            this.tradeTotal = data["TradeTotal"];
            this.tradeCurr = data["TradeCurr"];
            this.reportNo = data["ReportNo"];
            this.bu = data["Bu"];
            this.impFlag = data["ImpFlag"];
            this.impDate = data["ImpDate"];
            this.beginDate = data["BeginDate"];
            this.usd1 = data["Usd1"];
            this.usd2 = data["Usd2"];
            this.filename = data["Filename"];
            this.oriImgQty = data["OriImgQty"];
            this.oriImgUnit = data["OriImgUnit"];
            this.conUnit = data["ConUnit"];
            this.conQty = data["ConQty"];
            this.exgNoNew = data["ExgNoNew"];
            this.imgNoNew = data["ImgNoNew"];
            this.usd3 = data["Usd3"];
            this.usd4 = data["Usd4"];
            this.usd5 = data["Usd5"];
            this.usd6 = data["Usd6"];
            this.usd7 = data["Usd7"];
            this.usd8 = data["Usd8"];
            this.usd9 = data["Usd9"];
            this.usd10 = data["Usd10"];
            this.intgbLossRate = data["IntgbLossRate"];
            this.tgblLossRate = data["TgblLossRate"];
            this.emsNo = data["EmsNo"];
            this.bondMtpckPrpr = data["BondMtpckPrpr"];
            this.bondFlag = data["BondFlag"];
            this.input_DateBegin = data["Input_DateBegin"];
            this.input_DateEnd = data["Input_DateEnd"];
            this.generationflag = data["Generationflag"];
            this.pageSize = data["PageSize"];
            this.pageIndex = data["PageIndex"];
            this.totalCount = data["TotalCount"];
        }
    }

    static fromJS(data: any): EntEpassBomInner {
        data = typeof data === 'object' ? data : {};
        let result = new EntEpassBomInner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Companyid"] = this.companyid;
        data["ExgNo"] = this.exgNo;
        data["ProductId"] = this.productId;
        data["ExgQty"] = this.exgQty;
        data["ExgUnit"] = this.exgUnit;
        data["GoddBatch"] = this.goddBatch;
        data["ImgNo"] = this.imgNo;
        data["ImgQty"] = this.imgQty;
        data["ImgUnit"] = this.imgUnit;
        data["ImgBatch"] = this.imgBatch;
        data["Plant"] = this.plant;
        data["TradeTotal"] = this.tradeTotal;
        data["TradeCurr"] = this.tradeCurr;
        data["ReportNo"] = this.reportNo;
        data["Bu"] = this.bu;
        data["ImpFlag"] = this.impFlag;
        data["ImpDate"] = this.impDate;
        data["BeginDate"] = this.beginDate;
        data["Usd1"] = this.usd1;
        data["Usd2"] = this.usd2;
        data["Filename"] = this.filename;
        data["OriImgQty"] = this.oriImgQty;
        data["OriImgUnit"] = this.oriImgUnit;
        data["ConUnit"] = this.conUnit;
        data["ConQty"] = this.conQty;
        data["ExgNoNew"] = this.exgNoNew;
        data["ImgNoNew"] = this.imgNoNew;
        data["Usd3"] = this.usd3;
        data["Usd4"] = this.usd4;
        data["Usd5"] = this.usd5;
        data["Usd6"] = this.usd6;
        data["Usd7"] = this.usd7;
        data["Usd8"] = this.usd8;
        data["Usd9"] = this.usd9;
        data["Usd10"] = this.usd10;
        data["IntgbLossRate"] = this.intgbLossRate;
        data["TgblLossRate"] = this.tgblLossRate;
        data["EmsNo"] = this.emsNo;
        data["BondMtpckPrpr"] = this.bondMtpckPrpr;
        data["BondFlag"] = this.bondFlag;
        data["Input_DateBegin"] = this.input_DateBegin;
        data["Input_DateEnd"] = this.input_DateEnd;
        data["Generationflag"] = this.generationflag;
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        return data; 
    }
}

export interface IEntEpassBomInner {
    guid?: number | undefined;
    companyid?: string | undefined;
    exgNo?: string | undefined;
    productId?: string | undefined;
    exgQty?: number | undefined;
    exgUnit?: string | undefined;
    goddBatch?: string | undefined;
    imgNo?: string | undefined;
    imgQty?: number | undefined;
    imgUnit?: string | undefined;
    imgBatch?: string | undefined;
    plant?: string | undefined;
    tradeTotal?: number | undefined;
    tradeCurr?: string | undefined;
    reportNo?: string | undefined;
    bu?: string | undefined;
    impFlag?: string | undefined;
    impDate?: string | undefined;
    beginDate?: string | undefined;
    usd1?: string | undefined;
    usd2?: string | undefined;
    filename?: string | undefined;
    oriImgQty?: number | undefined;
    oriImgUnit?: string | undefined;
    conUnit?: string | undefined;
    conQty?: number | undefined;
    exgNoNew?: string | undefined;
    imgNoNew?: string | undefined;
    usd3?: string | undefined;
    usd4?: string | undefined;
    usd5?: string | undefined;
    usd6?: string | undefined;
    usd7?: string | undefined;
    usd8?: string | undefined;
    usd9?: string | undefined;
    usd10?: string | undefined;
    intgbLossRate?: number | undefined;
    tgblLossRate?: number | undefined;
    emsNo?: string | undefined;
    bondMtpckPrpr?: number | undefined;
    bondFlag?: string | undefined;
    input_DateBegin?: string | undefined;
    input_DateEnd?: string | undefined;
    generationflag?: string | undefined;
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    totalCount?: number | undefined;
}

export enum Ct {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _24 = 24,
    _25 = 25,
    _26 = 26,
    _27 = 27,
    _28 = 28,
    _29 = 29,
    _30 = 30,
    _31 = 31,
    _32 = 32,
    _33 = 33,
    _34 = 34,
    _35 = 35,
    _36 = 36,
    _37 = 37,
    _38 = 38,
    _39 = 39,
    _40 = 40,
    _41 = 41,
    _42 = 42,
    __1 = -1,
}

export enum Ct2 {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _24 = 24,
    _25 = 25,
    _26 = 26,
    _27 = 27,
    _28 = 28,
    _29 = 29,
    _30 = 30,
    _31 = 31,
    _32 = 32,
    _33 = 33,
    _34 = 34,
    _35 = 35,
    _36 = 36,
    _37 = 37,
    _38 = 38,
    _39 = 39,
    _40 = 40,
    _41 = 41,
    _42 = 42,
    __1 = -1,
}

export enum FilterItemOperator {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
}

export class NumScale implements INumScale {
    体积?: number | undefined;
    长宽高?: number | undefined;
    数量?: number | undefined;
    金额?: number | undefined;
    重量?: number | undefined;

    constructor(data?: INumScale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.体积 = data["体积"];
            this.长宽高 = data["长宽高"];
            this.数量 = data["数量"];
            this.金额 = data["金额"];
            this.重量 = data["重量"];
        }
    }

    static fromJS(data: any): NumScale {
        data = typeof data === 'object' ? data : {};
        let result = new NumScale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["体积"] = this.体积;
        data["长宽高"] = this.长宽高;
        data["数量"] = this.数量;
        data["金额"] = this.金额;
        data["重量"] = this.重量;
        return data; 
    }
}

export interface INumScale {
    体积?: number | undefined;
    长宽高?: number | undefined;
    数量?: number | undefined;
    金额?: number | undefined;
    重量?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}